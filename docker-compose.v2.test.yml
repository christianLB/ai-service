version: '3.8'

services:
  # Backend API Service
  ai-service-api:
    image: ai-service-api:dev
    container_name: ai-service-api
    restart: unless-stopped
    mem_limit: 400m
    memswap_limit: 400m
    cpus: 1.5
    environment:
      - NODE_ENV=production
      - PORT=3001
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GOCARDLESS_SECRET_ID=${GOCARDLESS_SECRET_ID}
      - GOCARDLESS_SECRET_KEY=${GOCARDLESS_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - ai-service-network
    depends_on:
      - postgres
    ports:
      - "3002:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Frontend Service
  ai-service-frontend:
    image: ai-service-frontend:dev
    container_name: ai-service-frontend
    restart: unless-stopped
    mem_limit: 150m
    memswap_limit: 150m
    cpus: 0.5
    environment:
      - NODE_ENV=production
    networks:
      - ai-service-network
    depends_on:
      - ai-service-api
    ports:
      - "3003:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-service-postgres
    restart: unless-stopped
    mem_limit: 300m
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - ai-service-network
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  ai-service-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local