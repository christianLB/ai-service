version: "3.8"

services:
  # Backend API Service (Development)
  ai-service-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: ai-service-api-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key}
      - ALLOW_REGISTRATION=${ALLOW_REGISTRATION:-false}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-dummy-key-for-development}
      - VERSION=${VERSION:-dev}
      - BUILD_DATE=${BUILD_DATE:-2025-07-14}
      - COMMIT=${COMMIT:-4efbbd869a230b5e51dea7d4e8ed3cc9425c26ec}
      - COMMIT_SHORT=${COMMIT_SHORT:-4efbbd8}
      - DATABASE_URL=postgresql://ai_user:ultra_secure_password_2025@postgres:5432/ai_service?schema=public
    networks:
      - ai-service-network
    depends_on:
      - postgres
      - redis
    ports:
      - "3001:3001"
    volumes:
      # Mount source for hot reload
      - ./src:/app/src:ro
      - ./migrations:/app/migrations:ro
      - ./.env.local:/app/.env.local:ro
      - ./data/documents:/app/documents:rw
      - ./logs:/app/logs

  # Frontend Service (Development)
  ai-service-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.dev
    container_name: ai-service-frontend-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
    networks:
      - ai-service-network
    depends_on:
      - ai-service-api
    ports:
      - "3000:5173"
    volumes:
      # Mount source for hot reload
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/index.html:/app/index.html:ro

  # PostgreSQL Database (Development)
  postgres:
    image: postgres:15-alpine
    container_name: ai-service-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ai_service
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=ultra_secure_password_2025
    volumes:
      - ai-service_postgres-data:/var/lib/postgresql/data
    networks:
      - ai-service-network
    ports:
      - "5434:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ai_service_dev}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Development)
  redis:
    image: redis:7-alpine
    container_name: ai-service-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --appendonly yes
    volumes:
      - redis_data_dev:/data
    networks:
      - ai-service-network
    ports:
      - "6379:6379"
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "--no-auth-warning",
          "-a",
          "${REDIS_PASSWORD:-redis123}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  # InfluxDB for Time Series Data (Trading)
  influxdb:
    image: influxdb:2.7-alpine
    container_name: ai-service-influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data_dev:/var/lib/influxdb2
      - ./config/influxdb:/etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD:-influx_password_2025}
      - DOCKER_INFLUXDB_INIT_ORG=ai-trading
      - DOCKER_INFLUXDB_INIT_BUCKET=market-data
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN:-dev-token-influxdb-2025}
    networks:
      - ai-service-network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database (Trading Patterns)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ai-service-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data_dev:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    networks:
      - ai-service-network

networks:
  ai-service-network:
    driver: bridge

volumes:
  ai-service_postgres-data:
    external: true
  redis_data_dev:
    driver: local
  influxdb_data_dev:
    driver: local
  qdrant_data_dev:
    driver: local
