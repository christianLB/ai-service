version: '3.8'

networks:
  ai-service-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: /home/k2600x/dev/ai-service-data/postgres
  redis-data:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: /home/k2600x/dev/ai-service-data/redis
  n8n-data:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: /home/k2600x/dev/ai-service-data/n8n
  grafana-data:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: /home/k2600x/dev/ai-service-data/grafana
  prometheus-data:
    driver: local
    driver_opts:
      type: bind
      o: bind
      device: /home/k2600x/dev/ai-service-data/prometheus

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_service
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ultra_secure_password_2025
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5434:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - ai-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass redis_secure_password_2025 --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - ai-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "redis_secure_password_2025", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Servicio n8n
  n8n:
    image: n8nio/n8n:latest
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=n8n_admin_2025
      - N8N_HOST=n8n
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=ai_user
      - DB_POSTGRESDB_PASSWORD=ultra_secure_password_2025
    ports:
      - "5678:5678"
    volumes:
      - n8n-data:/home/node/.n8n
    networks:
      - ai-service-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus para m√©tricas
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ai-service-network
    restart: unless-stopped

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana_admin_password_2025
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - ai-service-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Servicio AI principal
  ai-service:
    image: ghcr.io/christianlb/ai-service:latest
    # Fallback to local build if image not available
    # build: 
    #   context: .
    #   target: production
    environment:
      - NODE_ENV=production
      - PORT=3000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ai_service
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=ultra_secure_password_2025
      - DATABASE_URL=postgresql://ai_user:ultra_secure_password_2025@postgres:5432/ai_service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_secure_password_2025
      - N8N_API_URL=http://n8n:5678
      - N8N_API_KEY=${N8N_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-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}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-}
      - TELEGRAM_BOT_TOKEN=7675285244:AAHcM733tpyttgRPWITfeQOAGnrtbrWThpE
      - TELEGRAM_CHAT_ID=5015255679
      - DOCUMENT_STORAGE_PATH=/app/documents
      - TELEGRAM_WEBHOOK_URL=https://ai-service.anaxi.net/api/telegram/webhook
      - LOG_LEVEL=info
    ports:
      - "3000:3000"
    volumes:
      - /home/k2600x/dev/ai-service-data/workflows:/app/data/workflows
      - /home/k2600x/dev/ai-service-data/documents:/app/data/documents
      - /home/k2600x/dev/ai-service-data/knowledge:/app/data/knowledge
      - /home/k2600x/dev/ai-service-data/logs:/app/logs
    networks:
      - ai-service-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      # n8n:
      #   condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      # Labels for Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=ai-service"

  # Servicio de desarrollo (opcional)
  ai-service-dev:
    build: 
      context: .
      target: development
    environment:
      - NODE_ENV=development
      - PORT=3000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ai_service
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=ultra_secure_password_2025
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - N8N_API_URL=http://n8n:5678
      - N8N_API_KEY=${N8N_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - LOG_LEVEL=debug
    ports:
      - "3010:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /home/k2600x/dev/ai-service-data/workflows:/app/data/workflows
      - /home/k2600x/dev/ai-service-data/documents:/app/data/documents
      - /home/k2600x/dev/ai-service-data/knowledge:/app/data/knowledge
      - /home/k2600x/dev/ai-service-data/logs:/app/logs
    networks:
      - ai-service-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: "no"
    profiles:
      - dev

  # Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower:latest
    environment:
      # Update settings
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_SCOPE=ai-service
      - WATCHTOWER_POLL_INTERVAL=300  # Check every 5 minutes
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_REVIVE_STOPPED=false
      
      # GHCR Authentication (from environment)
      - REPO_USER=${GITHUB_USER:-}
      - REPO_PASS=${GITHUB_TOKEN:-}
      
      # Telegram Notifications via internal API
      - WATCHTOWER_NOTIFICATIONS=gotify
      - WATCHTOWER_NOTIFICATION_GOTIFY_URL=http://ai-service:3000/api/watchtower/notify
      - WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN=watchtower-notify
      
      # Debugging
      - WATCHTOWER_DEBUG=true
      - WATCHTOWER_LOG_LEVEL=info
      
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.docker/config.json:/config.json:ro
    networks:
      - ai-service-network
    restart: unless-stopped
    depends_on:
      - ai-service
    command: --scope ai-service --cleanup --rolling-restart --interval 300