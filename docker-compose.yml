version: "3.8"

services:
  # Backend API Service (Development)
  ai-service-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: ai-service-api-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3001
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-ai_service_dev}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key}
      - AUTH_BYPASS=${AUTH_BYPASS:-false}
      - ALLOW_REGISTRATION=${ALLOW_REGISTRATION:-false}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-dummy-key-for-development}
    networks:
      - ai-service-network
    depends_on:
      - postgres
      - redis
    ports:
      - "3001:3001"
    volumes:
      # Mount source for hot reload
      - ./src:/app/src:ro
      - ./migrations:/app/migrations:ro
      - ./.env.local:/app/.env.local:ro
      - ./documents:/app/documents
      - ./logs:/app/logs

  # Frontend Service (Development)
  ai-service-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: ai-service-frontend-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
    networks:
      - ai-service-network
    depends_on:
      - ai-service-api
    ports:
      - "3000:8080"

  # PostgreSQL Database (Development)
  postgres:
    image: postgres:15-alpine
    container_name: ai-service-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ai_service_dev}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ./config/init-auth.sql:/docker-entrypoint-initdb.d/02-init-auth.sql:ro
    networks:
      - ai-service-network
    ports:
      - "5434:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ai_service_dev}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Development)
  redis:
    image: redis:7-alpine
    container_name: ai-service-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --appendonly yes
    volumes:
      - redis_data_dev:/data
    networks:
      - ai-service-network
    ports:
      - "6379:6379"
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "--no-auth-warning",
          "-a",
          "${REDIS_PASSWORD:-redis123}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  ai-service-network:
    driver: bridge

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
