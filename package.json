{
  "name": "ai-service",
  "version": "1.0.0",
  "description": "Construir un microservicio `ai-service` autohosteado en Docker que orquesta la automatizaci√≥n financiera y operativa de mi stack personal, con capacidades de:",
  "main": "index.js",
  "scripts": {
    "test": "jest --detectOpenHandles --forceExit",
    "test:ci": "jest --passWithNoTests --maxWorkers=2 --forceExit --detectOpenHandles --ci",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage --detectOpenHandles --forceExit",
    "test:integration": "jest --testMatch='**/*.integration.test.ts' --passWithNoTests --detectOpenHandles --forceExit",
    "test:debug": "jest --runInBand --detectOpenHandles --verbose",
    "test:generator": "node tests/generator/parsePrismaModel.unit.test.mjs",
    "test:generator:integration": "node tests/generator/generateCrud.integration.test.mjs",
    "test:generator:templates": "node tests/generator/templateValidation.test.mjs",
    "test:generator:regression": "node tests/generator/regression.test.mjs",
    "test:generator:all": "npm run test:generator && npm run test:generator:templates && npm run test:generator:regression",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui",
    "test:e2e:debug": "playwright test --debug",
    "test:e2e:headed": "playwright test --headed",
    "test:e2e:chrome": "playwright test --project=chromium",
    "test:e2e:firefox": "playwright test --project=firefox",
    "test:e2e:webkit": "playwright test --project=webkit",
    "test:e2e:mobile": "playwright test --project='Mobile Chrome' --project='Mobile Safari'",
    "test:e2e:report": "playwright show-report",
    "build": "npm run build:frontend && npm run build:backend",
    "typecheck:packages": "pnpm -w tsc -b",
    "build:backend": "tsc",
    "build:backend:nocheck": "tsc --noEmit false || echo 'TypeScript errors ignored'",
    "build:frontend": "cd frontend && npm run build",
    "install:frontend": "cd frontend && npm install",
    "start": "node dist/index.js",
    "dev": "ts-node-dev --respawn src/index.ts",
    "dev:api": "ts-node-dev --respawn src/index.ts",
    "dev:services": "docker compose -f docker-compose.dev.yml up -d",
    "dev:services:down": "docker compose -f docker-compose.dev.yml down -v",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:full": "concurrently \"npm run dev\" \"npm run dev:frontend\"",
    "lint": "eslint src --ext .ts,.js --max-warnings 0 || echo 'ESLint not configured, skipping'",
    "lint:fix": "eslint src --ext .ts,.js --fix",
    "format": "prettier --write \"src/**/*.{ts,js,json}\" \"*.{json,md}\"",
    "format:check": "prettier --check \"src/**/*.{ts,js,json}\" \"*.{json,md}\"",
    "typecheck": "tsc --noEmit",
    "validate:schema": "ts-node scripts/validate-schema.ts",
    "predeploy": "npm run build && npm run validate:schema",
    "deploy:check": "npm run predeploy && echo 'Ready for deployment!'",
    "schema-sync": "ts-node scripts/schema-sync.ts",
    "schema:compare": "npm run schema-sync compare",
    "schema:validate": "npm run schema-sync validate",
    "schema:generate": "npm run schema-sync generate",
    "schema:apply": "npm run schema-sync apply",
    "migrate": "node-pg-migrate",
    "migrate:create": "node-pg-migrate create",
    "migrate:up": "DATABASE_URL=postgres://postgres:postgres123@localhost:5432/ai_service node-pg-migrate up",
    "migrate:down": "DATABASE_URL=postgres://postgres:postgres123@localhost:5432/ai_service node-pg-migrate down",
    "migrate:redo": "npm run migrate:down && npm run migrate:up",
    "migrate:status": "DATABASE_URL=postgres://postgres:postgres123@localhost:5432/ai_service node-pg-migrate status",
    "docker:dev": "./scripts/start-dev.sh",
    "docker:dev:clean": "./scripts/start-dev.sh --clean",
    "docker:dev:logs": "./scripts/start-dev.sh --no-start --logs",
    "docker:stop": "docker-compose down",
    "docker:test:auth": "./scripts/test-auth-docker.sh",
    "test:auth": "npm run docker:dev && npm run docker:test:auth",
    "migrate:env": "node scripts/migrate-env-to-db.js",
    "config:migrate": "npm run build:backend && npm run migrate:env",
    "db:generate": "prisma generate",
    "db:setup": "npx prisma generate",
    "db:push": "prisma db push",
    "db:migrate": "prisma migrate dev",
    "db:studio": "prisma studio",
    "db:seed": "tsx prisma/seed.ts",
    "generate": "plop",
    "generate:crud": "plop crud",
    "generate:crud:auto": "node scripts/generate-crud.mjs",
    "generate:full": "node scripts/generate-full.mjs",
    "generate:service": "plop service",
    "generate:hook": "plop hook",
    "migration:status": "node scripts/migration/update-migration-status.js",
    "migration:verify": "node scripts/migration/verify-financial-dashboard.js",
    "migration:rollback": "node scripts/migration/financial-dashboard-rollback.js",
    "migration:rollback:dry": "node scripts/migration/financial-dashboard-rollback.js --dry-run",
    "migration:test": "./test-prisma-dashboard.sh",
    "migration:monitor": "node scripts/migration/monitor-performance.js",
    "prepare": "husky || true",
    "contracts:generate": "tsx scripts/generate-contracts.ts && pnpm --filter @ai/contracts build",
    "contracts:validate": "tsx scripts/validate-contracts.ts",
    "contracts:build": "pnpm --filter @ai/contracts build",
    "contracts:check": "pnpm contracts:generate && git diff --exit-code -- packages/contracts/src/generated || (echo '\nContracts drift detected. Run: pnpm contracts:generate && pnpm contracts:build' && exit 1)",
    "sdk:build": "pnpm --filter @ai/sdk-client build",
    "sdk:generate": "pnpm contracts:generate && pnpm sdk:build"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "prisma": {
    "seed": "tsx prisma/seed.ts"
  },
  "dependencies": {
    "@alpacahq/alpaca-trade-api": "^3.1.3",
    "@anthropic-ai/sdk": "^0.57.0",
    "@binance/connector": "^3.4.0",
    "@influxdata/influxdb-client": "^1.35.0",
    "@open-policy-agent/opa-wasm": "^1.10.0",
    "@prisma/client": "^6.12.0",
    "@qdrant/js-client-rest": "^1.12.0",
    "@ts-rest/core": "^3.52.1",
    "@ts-rest/express": "^3.52.1",
    "@ts-rest/open-api": "^3.52.1",
    "@types/bcrypt": "^5.0.2",
    "@types/cookie-parser": "^1.4.9",
    "@types/js-yaml": "^4.0.9",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/multer": "^2.0.0",
    "@types/node-telegram-bot-api": "^0.64.9",
    "@types/pg": "^8.15.4",
    "@types/socket.io": "^3.0.1",
    "@types/uuid": "^10.0.0",
    "ajv": "^8.17.1",
    "ajv-formats": "^3.0.1",
    "axios": "^1.10.0",
    "bcrypt": "^6.0.0",
    "bull": "^4.16.3",
    "bullmq": "^5.58.0",
    "ccxt": "^4.4.41",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "date-fns": "^4.1.0",
    "dotenv": "^17.0.1",
    "ethers": "^6.15.0",
    "express": "^4.19.2",
    "express-jwt": "^8.5.1",
    "express-openapi-validator": "^5.1.2",
    "express-rate-limit": "^7.5.1",
    "express-validator": "^7.2.1",
    "handlebars": "^4.7.8",
    "helmet": "^8.1.0",
    "inversify": "^7.6.1",
    "ioredis": "^5.6.1",
    "joi": "^17.13.3",
    "js-yaml": "^4.1.0",
    "jsonwebtoken": "^9.0.2",
    "mammoth": "^1.9.1",
    "mathjs": "^13.2.3",
    "multer": "^2.0.1",
    "node-cron": "^3.0.3",
    "node-pg-migrate": "^8.0.3",
    "node-telegram-bot-api": "^0.66.0",
    "nodemailer": "^6.9.16",
    "openai": "^5.8.2",
    "pdf-parse": "^1.1.1",
    "pdf2pic": "^3.2.0",
    "pdfjs-dist": "^5.3.31",
    "pg": "^8.16.3",
    "pg-types": "^4.0.2",
    "prom-client": "^15.1.3",
    "puppeteer": "^24.3.1",
    "qrcode": "^1.5.4",
    "rate-limiter-flexible": "^7.2.0",
    "reflect-metadata": "^0.2.2",
    "socket.io": "^4.8.1",
    "superjson": "^2.2.2",
    "uuid": "^11.1.0",
    "winston": "^3.17.0",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@apidevtools/swagger-parser": "^10.1.1",
    "@axe-core/playwright": "^4.10.2",
    "@babel/preset-env": "^7.28.0",
    "@eslint/js": "^9.32.0",
    "@faker-js/faker": "^9.9.0",
    "@playwright/test": "^1.54.2",
    "@types/cors": "^2.8.19",
    "@types/express": "^5.0.3",
    "@types/handlebars": "^4.1.0",
    "@types/jest": "^29.5.12",
    "@types/node": "^24.1.0",
    "@types/node-cron": "^3.0.11",
    "@types/nodemailer": "*",
    "@types/pdf-parse": "^1.1.5",
    "@types/qrcode": "^1.5.5",
    "@types/supertest": "^6.0.3",
    "@types/swagger-ui-express": "^4.1.8",
    "@typescript-eslint/eslint-plugin": "^8.38.0",
    "@typescript-eslint/parser": "^8.38.0",
    "eslint": "^9.32.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.4",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "lint-staged": "^16.1.5",
    "node-plop": "^0.32.0",
    "openapi-typescript": "^6.7.6",
    "playwright-lighthouse": "^4.0.0",
    "plop": "^4.0.1",
    "prettier": "^3.6.2",
    "prisma": "^6.12.0",
    "supertest": "^7.1.1",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "ts-jest": "^29.4.0",
    "ts-node-dev": "^2.0.0",
    "tsx": "^4.20.3",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.38.0",
    "undici": "^6.21.3",
    "upper-case": "^2.0.2",
    "zod-prisma-types": "^3.2.4",
    "@jest/globals": "^29.7.0",
    "@types/jest": "^29.5.0"
  },
  "lint-staged": {
    "src/**/*.{ts,js}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md}": [
      "prettier --write"
    ]
  },
  "packageManager": "pnpm@10.12.1+sha1.4bd977ce548dc9fcd1ca0c62838c55646cea6847"
}
