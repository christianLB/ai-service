version: '3.8'

services:
  mcp-bridge:
    build:
      context: .
      dockerfile: Dockerfile
    image: mcp-bridge:latest
    container_name: mcp-bridge
    restart: unless-stopped
    environment:
      # Server Configuration
      NODE_ENV: production
      MCP_PORT: 8080
      MCP_HOST: 0.0.0.0
      
      # AI Service Connection
      AI_SERVICE_URL: http://ai-service:3000
      AI_SERVICE_TIMEOUT: 30000
      AI_SERVICE_RETRY_ATTEMPTS: 3
      
      # Authentication
      JWT_SECRET: ${JWT_SECRET:-${MCP_JWT_SECRET:-change-this-in-production}}
      JWT_EXPIRES_IN: 24h
      ENABLE_API_KEY: 'true'
      API_KEY_HEADER: x-api-key
      VALID_API_KEYS: ${MCP_API_KEYS:-}
      
      # Redis Configuration (shared with AI Service)
      REDIS_HOST: ai-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: 2
      REDIS_KEY_PREFIX: 'mcp:'
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 100
      RATE_LIMIT_SKIP_SUCCESSFUL: 'true'
      
      # CORS
      CORS_ORIGIN: '*'
      CORS_CREDENTIALS: 'true'
      
      # Logging
      LOG_LEVEL: info
      LOG_FORMAT: json
      
      # MCP Specific
      MCP_MAX_CONCURRENT_TOOLS: 10
      MCP_TOOL_TIMEOUT: 30000
    ports:
      - "8380:8080"
    volumes:
      # Usar volumen dedicado en NAS para persistencia
      - /volume1/docker/ai-service-mcp/logs:/app/logs
      - /volume1/docker/ai-service-mcp/config:/app/config:ro
    networks:
      - ai-service-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

networks:
  ai-service-network:
    external: true
    name: ai-service-network