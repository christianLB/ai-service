version: '3.8'

networks:
  ai-service-network:
    driver: bridge

services:
  # PostgreSQL para AI Service y n8n
  postgres:
    image: postgres:15-alpine
    container_name: ai-service-db
    environment:
      POSTGRES_DB: ai_service
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - /volume1/docker/ai-service/postgres:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ai-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: ai-service-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - /volume1/docker/ai-service/redis:/data
    ports:
      - "6379:6379"
    networks:
      - ai-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # AI Service Principal
  ai-service:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: ai-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3000
    env_file:
      - .env.local
    ports:
      - "3000:3000"
    volumes:
      - /volume1/docker/ai-service/data:/app/data
      - /volume1/docker/ai-service/logs:/app/logs
      - /volume1/docker/ai-service/workflows:/app/workflows
    networks:
      - ai-service-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n para workflows (opcional)
  n8n:
    image: n8nio/n8n:latest
    container_name: ai-service-n8n
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=ai_user
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=${N8N_ADMIN_PASSWORD}
      - WEBHOOK_URL=https://n8n.anaxi.net
      - N8N_HOST=n8n.anaxi.net
      - N8N_PROTOCOL=https
      - N8N_PORT=443
    ports:
      - "5678:5678"
    volumes:
      - /volume1/docker/ai-service/n8n:/home/node/.n8n
    networks:
      - ai-service-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Prometheus para m√©tricas
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-service-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://prometheus.anaxi.net'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - /volume1/docker/ai-service/prometheus:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ai-service-network
    restart: unless-stopped

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ai-service-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://grafana.anaxi.net
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - /volume1/docker/ai-service/grafana:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - ai-service-network
    depends_on:
      - prometheus
    restart: unless-stopped
    user: "472"  # grafana user