version: "3.8"

networks:
  ai-service-network:
    driver: bridge

services:
  # PostgreSQL básico
  postgres:
    image: postgres:15-alpine
    container_name: ai-service-db
    environment:
      POSTGRES_DB: ai_service
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - /volume1/docker/ai-service/postgres:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - ai-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis básico
  redis:
    image: redis:7-alpine
    container_name: ai-service-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - /volume1/docker/ai-service/redis:/data
    ports:
      - "6380:6379"
    networks:
      - ai-service-network
    restart: unless-stopped

  # N8N Workflow Engine
  n8n:
    image: n8nio/n8n:latest
    container_name: ai-service-n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=${N8N_ADMIN_PASSWORD}
      - N8N_HOST=n8n
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=${WEBHOOK_URL}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=ai_user
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5678:5678"
    volumes:
      - /volume1/docker/ai-service/n8n:/home/node/.n8n
    networks:
      - ai-service-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-service-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - /volume1/docker/ai-service/prometheus:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ai-service-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ai-service-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - /volume1/docker/ai-service/grafana:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - ai-service-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # AI Service Principal (imagen pre-construida)
  ai-service:
    image: k2600x/ai-service:latest
    container_name: ai-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3000
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      - TELEGRAM_ALERTS_ENABLED=true
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ai_service
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - N8N_API_URL=http://n8n:5678
      - N8N_API_KEY=${N8N_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - GO_SECRET_ID=${GO_SECRET_ID}
      - GO_SECRET_KEY=${GO_SECRET_KEY}
      - GO_REDIRECT_URI=${GO_REDIRECT_URI}
      - DASHBOARD_URL=${DASHBOARD_URL}
      - LOG_LEVEL=info
    ports:
      - "3003:3000"
    volumes:
      - /volume1/docker/ai-service/logs:/app/logs
      - /volume1/docker/ai-service/workflows:/app/data/workflows
      - /volume1/docker/ai-service/documents:/app/data/documents
      - /volume1/docker/ai-service/knowledge:/app/data/knowledge
    networks:
      - ai-service-network
    depends_on:
      postgres:
        condition: service_healthy
      n8n:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
