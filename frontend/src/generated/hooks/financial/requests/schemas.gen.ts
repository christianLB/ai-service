// This file is auto-generated by @hey-api/openapi-ts

export const $Error = {
    type: 'object',
    required: ['message', 'code'],
    properties: {
        message: {
            type: 'string',
            description: 'Error message'
        },
        code: {
            type: 'string',
            description: 'Error code (BAD_REQUEST, NOT_FOUND, etc.)'
        }
    }
} as const;

export const $StandardResponse = {
    type: 'object',
    required: ['success'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            description: 'Response data (varies by operation)'
        },
        message: {
            type: 'string',
            description: 'Success message'
        },
        error: {
            type: 'string',
            description: 'Error message (if success is false)'
        }
    }
} as const;

export const $CreateClient = {
    type: 'object',
    required: ['name', 'defaultCurrency', 'paymentTerms', 'isActive'],
    properties: {
        name: {
            type: 'string',
            minLength: 1
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        phone: {
            type: 'string',
            nullable: true
        },
        taxId: {
            type: 'string',
            nullable: true
        },
        address: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        postalCode: {
            type: 'string',
            nullable: true
        },
        country: {
            type: 'string',
            nullable: true
        },
        defaultCurrency: {
            type: 'string',
            default: 'EUR'
        },
        paymentTerms: {
            type: 'integer',
            minimum: 0,
            default: 30
        },
        notes: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean',
            default: true
        },
        metadata: {
            type: 'object',
            nullable: true
        }
    }
} as const;

export const $UpdateClient = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        phone: {
            type: 'string',
            nullable: true
        },
        taxId: {
            type: 'string',
            nullable: true
        },
        address: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        postalCode: {
            type: 'string',
            nullable: true
        },
        country: {
            type: 'string',
            nullable: true
        },
        defaultCurrency: {
            type: 'string'
        },
        paymentTerms: {
            type: 'integer',
            minimum: 0
        },
        notes: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        metadata: {
            type: 'object',
            nullable: true
        }
    }
} as const;

export const $SearchQuery = {
    type: 'object',
    properties: {
        query: {
            type: 'string',
            description: 'Search term'
        },
        filters: {
            type: 'object',
            description: 'Additional filters'
        },
        page: {
            type: 'integer',
            minimum: 1,
            default: 1
        },
        limit: {
            type: 'integer',
            minimum: 1,
            maximum: 100,
            default: 20
        }
    }
} as const;

export const $BulkOperationRequest = {
    type: 'object',
    required: ['operation', 'ids'],
    properties: {
        operation: {
            type: 'string',
            enum: ['delete', 'activate', 'deactivate', 'export']
        },
        ids: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            minItems: 1
        },
        options: {
            type: 'object',
            description: 'Operation-specific options'
        }
    }
} as const;

export const $BulkOperationResponse = {
    type: 'object',
    required: ['success', 'processed', 'failed'],
    properties: {
        success: {
            type: 'boolean'
        },
        processed: {
            type: 'integer'
        },
        failed: {
            type: 'integer'
        },
        errors: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    error: {
                        type: 'string'
                    }
                }
            }
        }
    }
} as const;

export const $ClientStats = {
    type: 'object',
    properties: {
        totalRevenue: {
            type: 'number'
        },
        totalInvoices: {
            type: 'integer'
        },
        outstandingBalance: {
            type: 'number'
        },
        averageInvoiceAmount: {
            type: 'number'
        },
        lastInvoiceDate: {
            type: 'string',
            format: 'date'
        },
        paymentHistory: {
            type: 'array',
            items: {
                type: 'object'
            }
        }
    }
} as const;

export const $CreateInvoice = {
    type: 'object',
    required: ['clientId', 'status', 'total', 'subtotal', 'tax', 'issueDate', 'dueDate', 'items'],
    properties: {
        clientId: {
            type: 'string',
            format: 'uuid'
        },
        invoiceNumber: {
            type: 'string',
            description: 'Auto-generated if not provided'
        },
        status: {
            type: 'string',
            enum: ['draft', 'sent', 'paid', 'overdue', 'cancelled'],
            default: 'draft'
        },
        total: {
            type: 'number'
        },
        subtotal: {
            type: 'number'
        },
        tax: {
            type: 'number'
        },
        issueDate: {
            type: 'string',
            format: 'date'
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        notes: {
            type: 'string'
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InvoiceItem'
            },
            minItems: 1
        }
    }
} as const;

export const $UpdateInvoice = {
    type: 'object',
    properties: {
        clientId: {
            type: 'string',
            format: 'uuid'
        },
        status: {
            type: 'string',
            enum: ['draft', 'sent', 'paid', 'overdue', 'cancelled']
        },
        total: {
            type: 'number'
        },
        subtotal: {
            type: 'number'
        },
        tax: {
            type: 'number'
        },
        issueDate: {
            type: 'string',
            format: 'date'
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        paidDate: {
            type: 'string',
            format: 'date'
        },
        notes: {
            type: 'string'
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InvoiceItem'
            }
        }
    }
} as const;

export const $PaymentDetails = {
    type: 'object',
    required: ['paidDate'],
    properties: {
        paidDate: {
            type: 'string',
            format: 'date'
        },
        paymentMethod: {
            type: 'string'
        },
        paymentReference: {
            type: 'string'
        }
    }
} as const;

export const $SendInvoiceRequest = {
    type: 'object',
    required: ['method'],
    properties: {
        method: {
            type: 'string',
            enum: ['email', 'post', 'sms']
        },
        email: {
            type: 'string',
            format: 'email'
        },
        message: {
            type: 'string'
        },
        attachPdf: {
            type: 'boolean',
            default: true
        }
    }
} as const;

export const $EmailRequest = {
    type: 'object',
    required: ['to', 'subject'],
    properties: {
        to: {
            type: 'string',
            format: 'email'
        },
        subject: {
            type: 'string'
        },
        message: {
            type: 'string'
        },
        attachPdf: {
            type: 'boolean',
            default: true
        }
    }
} as const;

export const $CategorizationRequest = {
    type: 'object',
    required: ['categoryId'],
    properties: {
        categoryId: {
            type: 'string',
            format: 'uuid'
        },
        confidence: {
            type: 'number',
            minimum: 0,
            maximum: 1
        },
        method: {
            type: 'string',
            enum: ['manual', 'ai', 'pattern'],
            default: 'manual'
        }
    }
} as const;

export const $ImportResult = {
    type: 'object',
    required: ['success', 'imported', 'skipped'],
    properties: {
        success: {
            type: 'boolean'
        },
        imported: {
            type: 'integer'
        },
        skipped: {
            type: 'integer'
        },
        errors: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    row: {
                        type: 'integer'
                    },
                    error: {
                        type: 'string'
                    }
                }
            }
        },
        duplicates: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    row: {
                        type: 'integer'
                    },
                    transactionId: {
                        type: 'string'
                    }
                }
            }
        }
    }
} as const;

export const $AccountStatusResponse = {
    type: 'object',
    properties: {
        connected: {
            type: 'boolean'
        },
        lastSync: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            type: 'string',
            enum: ['active', 'inactive', 'error']
        },
        accountsCount: {
            type: 'integer'
        },
        balanceTotal: {
            type: 'number'
        }
    }
} as const;

export const $GoCardlessConfig = {
    type: 'object',
    required: ['secretId', 'secretKey', 'environment'],
    properties: {
        secretId: {
            type: 'string'
        },
        secretKey: {
            type: 'string'
        },
        environment: {
            type: 'string',
            enum: ['sandbox', 'live'],
            default: 'sandbox'
        }
    }
} as const;

export const $GoCardlessStatus = {
    type: 'object',
    properties: {
        configured: {
            type: 'boolean'
        },
        connected: {
            type: 'boolean'
        },
        lastSync: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            type: 'string',
            enum: ['active', 'inactive', 'error']
        },
        error: {
            type: 'string'
        }
    }
} as const;

export const $DiagnosisReport = {
    type: 'object',
    properties: {
        status: {
            type: 'string',
            enum: ['healthy', 'warning', 'error']
        },
        issues: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string'
                    },
                    severity: {
                        type: 'string',
                        enum: ['low', 'medium', 'high', 'critical']
                    },
                    description: {
                        type: 'string'
                    },
                    solution: {
                        type: 'string'
                    }
                }
            }
        },
        lastChecked: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $SetupResponse = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean'
        },
        requisitionId: {
            type: 'string'
        },
        authUrl: {
            type: 'string'
        },
        status: {
            type: 'string'
        }
    }
} as const;

export const $SetupResult = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean'
        },
        accountsFound: {
            type: 'integer'
        },
        message: {
            type: 'string'
        }
    }
} as const;

export const $SyncResult = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean'
        },
        synchronized: {
            type: 'integer'
        },
        failed: {
            type: 'integer'
        },
        lastSync: {
            type: 'string',
            format: 'date-time'
        },
        message: {
            type: 'string'
        }
    }
} as const;

export const $PaginationInfo = {
    type: 'object',
    required: ['page', 'limit', 'total'],
    properties: {
        page: {
            type: 'integer',
            minimum: 1
        },
        limit: {
            type: 'integer',
            minimum: 1,
            maximum: 100
        },
        total: {
            type: 'integer',
            minimum: 0
        }
    }
} as const;

export const $Account = {
    type: 'object',
    required: ['id', 'account_id', 'name', 'type'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        account_id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        type: {
            type: 'string'
        },
        institution: {
            type: 'string'
        },
        institution_id: {
            type: 'string'
        },
        iban: {
            type: 'string'
        },
        currency: {
            type: 'string'
        },
        balance: {
            type: 'number'
        },
        available_balance: {
            type: 'number'
        },
        is_active: {
            type: 'boolean'
        },
        last_sync: {
            type: 'string',
            format: 'date-time'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $AccountListResponse = {
    allOf: [
        {
            '$ref': '#/components/schemas/PaginationInfo'
        },
        {
            type: 'object',
            required: ['accounts'],
            properties: {
                accounts: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Account'
                    }
                }
            }
        }
    ]
} as const;

export const $Client = {
    type: 'object',
    required: ['id', 'name', 'email', 'status'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        email: {
            type: 'string',
            format: 'email'
        },
        taxId: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        address: {
            type: 'string'
        },
        city: {
            type: 'string'
        },
        postalCode: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        status: {
            type: 'string',
            enum: ['active', 'inactive']
        },
        notes: {
            type: 'string'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $ClientListResponse = {
    allOf: [
        {
            '$ref': '#/components/schemas/PaginationInfo'
        },
        {
            type: 'object',
            required: ['clients'],
            properties: {
                clients: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Client'
                    }
                }
            }
        }
    ]
} as const;

export const $Invoice = {
    type: 'object',
    required: ['id', 'invoiceNumber', 'clientId', 'status', 'total', 'issueDate', 'dueDate'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        invoiceNumber: {
            type: 'string'
        },
        clientId: {
            type: 'string',
            format: 'uuid'
        },
        clientName: {
            type: 'string'
        },
        clientTaxId: {
            type: 'string'
        },
        status: {
            type: 'string',
            enum: ['draft', 'sent', 'paid', 'overdue', 'cancelled']
        },
        total: {
            type: 'number'
        },
        subtotal: {
            type: 'number'
        },
        tax: {
            type: 'number'
        },
        issueDate: {
            type: 'string',
            format: 'date'
        },
        dueDate: {
            type: 'string',
            format: 'date'
        },
        paidDate: {
            type: 'string',
            format: 'date'
        },
        notes: {
            type: 'string'
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InvoiceItem'
            }
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $InvoiceItem = {
    type: 'object',
    required: ['description', 'quantity', 'unitPrice', 'total'],
    properties: {
        description: {
            type: 'string'
        },
        quantity: {
            type: 'number'
        },
        unitPrice: {
            type: 'number'
        },
        total: {
            type: 'number'
        }
    }
} as const;

export const $InvoiceListResponse = {
    allOf: [
        {
            '$ref': '#/components/schemas/PaginationInfo'
        },
        {
            type: 'object',
            required: ['invoices'],
            properties: {
                invoices: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Invoice'
                    }
                }
            }
        }
    ]
} as const;

export const $Transaction = {
    type: 'object',
    required: ['id', 'transaction_id', 'account_id', 'amount', 'type', 'date'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        transaction_id: {
            type: 'string'
        },
        account_id: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        currency: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['debit', 'credit', 'transfer']
        },
        status: {
            type: 'string',
            enum: ['pending', 'confirmed', 'failed', 'cancelled']
        },
        description: {
            type: 'string'
        },
        reference: {
            type: 'string'
        },
        counterparty_name: {
            type: 'string'
        },
        counterparty_account: {
            type: 'string'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        fee_amount: {
            type: 'number'
        },
        fee_currency: {
            type: 'string'
        },
        metadata: {
            type: 'object'
        },
        gocardless_data: {
            type: 'object'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $TransactionListResponse = {
    allOf: [
        {
            '$ref': '#/components/schemas/PaginationInfo'
        },
        {
            type: 'object',
            required: ['transactions'],
            properties: {
                transactions: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Transaction'
                    }
                },
                stats: {
                    type: 'object',
                    properties: {
                        totalIncome: {
                            type: 'number'
                        },
                        totalExpenses: {
                            type: 'number'
                        }
                    }
                }
            }
        }
    ]
} as const;

export const $Attachment = {
    type: 'object',
    required: ['id', 'invoiceId', 'fileName', 'filePath', 'fileSize', 'fileType', 'uploadedAt'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        invoiceId: {
            type: 'string',
            format: 'uuid'
        },
        fileName: {
            type: 'string'
        },
        filePath: {
            type: 'string'
        },
        fileSize: {
            type: 'integer'
        },
        fileType: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        uploadedBy: {
            type: 'string'
        },
        uploadedAt: {
            type: 'string',
            format: 'date-time'
        },
        isDeleted: {
            type: 'boolean'
        },
        deletedAt: {
            type: 'string',
            format: 'date-time'
        },
        deletedBy: {
            type: 'string'
        }
    }
} as const;

export const $AttachmentListResponse = {
    allOf: [
        {
            '$ref': '#/components/schemas/PaginationInfo'
        },
        {
            type: 'object',
            required: ['attachments'],
            properties: {
                attachments: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Attachment'
                    }
                }
            }
        }
    ]
} as const;

export const $InvoiceTemplate = {
    type: 'object',
    required: ['id', 'userId', 'name', 'templateType', 'htmlContent', 'variables', 'isDefault', 'createdAt', 'updatedAt'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        userId: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            minLength: 1
        },
        description: {
            type: 'string',
            nullable: true
        },
        templateType: {
            type: 'string',
            default: 'invoice'
        },
        htmlContent: {
            type: 'string',
            description: 'HTML content of the template'
        },
        variables: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    },
                    type: {
                        type: 'string',
                        enum: ['text', 'number', 'date', 'boolean']
                    },
                    required: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        oneOf: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'boolean'
                            }
                        ]
                    }
                }
            },
            description: 'Template variable definitions'
        },
        isDefault: {
            type: 'boolean',
            default: false
        },
        metadata: {
            type: 'object',
            additionalProperties: true,
            nullable: true
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $CreateInvoiceTemplate = {
    type: 'object',
    required: ['name', 'htmlContent'],
    properties: {
        name: {
            type: 'string',
            minLength: 1
        },
        description: {
            type: 'string'
        },
        templateType: {
            type: 'string',
            default: 'invoice'
        },
        htmlContent: {
            type: 'string',
            description: 'HTML content of the template'
        },
        variables: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    },
                    type: {
                        type: 'string',
                        enum: ['text', 'number', 'date', 'boolean']
                    },
                    required: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        oneOf: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'boolean'
                            }
                        ]
                    }
                }
            }
        },
        isDefault: {
            type: 'boolean',
            default: false
        },
        metadata: {
            type: 'object',
            additionalProperties: true
        }
    }
} as const;

export const $UpdateInvoiceTemplate = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1
        },
        description: {
            type: 'string'
        },
        templateType: {
            type: 'string'
        },
        htmlContent: {
            type: 'string',
            description: 'HTML content of the template'
        },
        variables: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    },
                    type: {
                        type: 'string',
                        enum: ['text', 'number', 'date', 'boolean']
                    },
                    required: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        oneOf: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'boolean'
                            }
                        ]
                    }
                }
            }
        },
        isDefault: {
            type: 'boolean'
        },
        metadata: {
            type: 'object',
            additionalProperties: true
        }
    }
} as const;

export const $InvoiceTemplateResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/InvoiceTemplate'
        },
        message: {
            type: 'string'
        }
    }
} as const;

export const $InvoiceTemplateListResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            required: ['items', 'total', 'page', 'limit', 'totalPages'],
            properties: {
                items: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/InvoiceTemplate'
                    }
                },
                total: {
                    type: 'integer'
                },
                page: {
                    type: 'integer'
                },
                limit: {
                    type: 'integer'
                },
                totalPages: {
                    type: 'integer'
                }
            }
        }
    }
} as const;

export const $FinancialReport = {
    type: 'object',
    properties: {
        period: {
            type: 'object',
            properties: {
                startDate: {
                    type: 'string',
                    format: 'date'
                },
                endDate: {
                    type: 'string',
                    format: 'date'
                },
                granularity: {
                    type: 'string',
                    enum: ['daily', 'weekly', 'monthly', 'yearly']
                }
            }
        },
        summary: {
            type: 'object',
            properties: {
                totalIncome: {
                    type: 'number'
                },
                totalExpenses: {
                    type: 'number'
                },
                netIncome: {
                    type: 'number'
                },
                averageBalance: {
                    type: 'number'
                },
                transactionCount: {
                    type: 'integer'
                }
            }
        },
        accountBreakdown: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    accountId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    accountName: {
                        type: 'string'
                    },
                    balance: {
                        type: 'number'
                    },
                    income: {
                        type: 'number'
                    },
                    expenses: {
                        type: 'number'
                    },
                    transactionCount: {
                        type: 'integer'
                    }
                }
            }
        },
        categoryBreakdown: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    category: {
                        type: 'string'
                    },
                    amount: {
                        type: 'number'
                    },
                    percentage: {
                        type: 'number'
                    },
                    transactionCount: {
                        type: 'integer'
                    }
                }
            }
        },
        timeSeriesData: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    period: {
                        type: 'string'
                    },
                    income: {
                        type: 'number'
                    },
                    expenses: {
                        type: 'number'
                    },
                    balance: {
                        type: 'number'
                    }
                }
            }
        },
        forecasts: {
            type: 'object',
            nullable: true,
            properties: {
                nextMonth: {
                    type: 'object',
                    properties: {
                        expectedIncome: {
                            type: 'number'
                        },
                        expectedExpenses: {
                            type: 'number'
                        },
                        projectedBalance: {
                            type: 'number'
                        }
                    }
                },
                quarterEnd: {
                    type: 'object',
                    properties: {
                        expectedIncome: {
                            type: 'number'
                        },
                        expectedExpenses: {
                            type: 'number'
                        },
                        projectedBalance: {
                            type: 'number'
                        }
                    }
                }
            }
        },
        generatedAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $FinancialReportResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/FinancialReport'
        }
    }
} as const;