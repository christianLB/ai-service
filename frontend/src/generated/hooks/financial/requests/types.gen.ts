// This file is auto-generated by @hey-api/openapi-ts

export type Error = {
    /**
     * Error message
     */
    message: string;
    /**
     * Error code (BAD_REQUEST, NOT_FOUND, etc.)
     */
    code: string;
};

export type StandardResponse = {
    success: boolean;
    /**
     * Response data (varies by operation)
     */
    data?: {
        [key: string]: unknown;
    };
    /**
     * Success message
     */
    message?: string;
    /**
     * Error message (if success is false)
     */
    error?: string;
};

export type CreateClient = {
    name: string;
    email?: string | null;
    phone?: string | null;
    taxId?: string | null;
    address?: string | null;
    city?: string | null;
    postalCode?: string | null;
    country?: string | null;
    defaultCurrency: string;
    paymentTerms: number;
    notes?: string | null;
    isActive: boolean;
    metadata?: {
        [key: string]: unknown;
    } | null;
};

export type UpdateClient = {
    name?: string;
    email?: string | null;
    phone?: string | null;
    taxId?: string | null;
    address?: string | null;
    city?: string | null;
    postalCode?: string | null;
    country?: string | null;
    defaultCurrency?: string;
    paymentTerms?: number;
    notes?: string | null;
    isActive?: boolean;
    metadata?: {
        [key: string]: unknown;
    } | null;
};

export type SearchQuery = {
    /**
     * Search term
     */
    query?: string;
    /**
     * Additional filters
     */
    filters?: {
        [key: string]: unknown;
    };
    page?: number;
    limit?: number;
};

export type BulkOperationRequest = {
    operation: 'delete' | 'activate' | 'deactivate' | 'export';
    ids: Array<(string)>;
    /**
     * Operation-specific options
     */
    options?: {
        [key: string]: unknown;
    };
};

export type operation = 'delete' | 'activate' | 'deactivate' | 'export';

export type BulkOperationResponse = {
    success: boolean;
    processed: number;
    failed: number;
    errors?: Array<{
        id?: string;
        error?: string;
    }>;
};

export type ClientStats = {
    totalRevenue?: number;
    totalInvoices?: number;
    outstandingBalance?: number;
    averageInvoiceAmount?: number;
    lastInvoiceDate?: string;
    paymentHistory?: Array<{
        [key: string]: unknown;
    }>;
};

export type CreateInvoice = {
    clientId: string;
    /**
     * Auto-generated if not provided
     */
    invoiceNumber?: string;
    status: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';
    total: number;
    subtotal: number;
    tax: number;
    issueDate: string;
    dueDate: string;
    notes?: string;
    items: Array<InvoiceItem>;
};

export type status = 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';

export type UpdateInvoice = {
    clientId?: string;
    status?: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';
    total?: number;
    subtotal?: number;
    tax?: number;
    issueDate?: string;
    dueDate?: string;
    paidDate?: string;
    notes?: string;
    items?: Array<InvoiceItem>;
};

export type PaymentDetails = {
    paidDate: string;
    paymentMethod?: string;
    paymentReference?: string;
};

export type SendInvoiceRequest = {
    method: 'email' | 'post' | 'sms';
    email?: string;
    message?: string;
    attachPdf?: boolean;
};

export type method = 'email' | 'post' | 'sms';

export type EmailRequest = {
    to: string;
    subject: string;
    message?: string;
    attachPdf?: boolean;
};

export type CategorizationRequest = {
    categoryId: string;
    confidence?: number;
    method?: 'manual' | 'ai' | 'pattern';
};

export type method2 = 'manual' | 'ai' | 'pattern';

export type ImportResult = {
    success: boolean;
    imported: number;
    skipped: number;
    errors?: Array<{
        row?: number;
        error?: string;
    }>;
    duplicates?: Array<{
        row?: number;
        transactionId?: string;
    }>;
};

export type AccountStatusResponse = {
    connected?: boolean;
    lastSync?: string;
    status?: 'active' | 'inactive' | 'error';
    accountsCount?: number;
    balanceTotal?: number;
};

export type status2 = 'active' | 'inactive' | 'error';

export type GoCardlessConfig = {
    secretId: string;
    secretKey: string;
    environment: 'sandbox' | 'live';
};

export type environment = 'sandbox' | 'live';

export type GoCardlessStatus = {
    configured?: boolean;
    connected?: boolean;
    lastSync?: string;
    status?: 'active' | 'inactive' | 'error';
    error?: string;
};

export type DiagnosisReport = {
    status?: 'healthy' | 'warning' | 'error';
    issues?: Array<{
        type?: string;
        severity?: 'low' | 'medium' | 'high' | 'critical';
        description?: string;
        solution?: string;
    }>;
    lastChecked?: string;
};

export type status3 = 'healthy' | 'warning' | 'error';

export type SetupResponse = {
    success?: boolean;
    requisitionId?: string;
    authUrl?: string;
    status?: string;
};

export type SetupResult = {
    success?: boolean;
    accountsFound?: number;
    message?: string;
};

export type SyncResult = {
    success?: boolean;
    synchronized?: number;
    failed?: number;
    lastSync?: string;
    message?: string;
};

export type PaginationInfo = {
    page: number;
    limit: number;
    total: number;
};

export type Account = {
    id: string;
    account_id: string;
    name: string;
    type: string;
    institution?: string;
    institution_id?: string;
    iban?: string;
    currency?: string;
    balance?: number;
    available_balance?: number;
    is_active?: boolean;
    last_sync?: string;
    created_at?: string;
    updated_at?: string;
};

export type AccountListResponse = PaginationInfo & {
    accounts: Array<Account>;
};

export type Client = {
    id: string;
    name: string;
    email: string;
    taxId?: string;
    phone?: string;
    address?: string;
    city?: string;
    postalCode?: string;
    country?: string;
    status: 'active' | 'inactive';
    notes?: string;
    createdAt?: string;
    updatedAt?: string;
};

export type status4 = 'active' | 'inactive';

export type ClientListResponse = PaginationInfo & {
    clients: Array<Client>;
};

export type Invoice = {
    id: string;
    invoiceNumber: string;
    clientId: string;
    clientName?: string;
    clientTaxId?: string;
    status: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';
    total: number;
    subtotal?: number;
    tax?: number;
    issueDate: string;
    dueDate: string;
    paidDate?: string;
    notes?: string;
    items?: Array<InvoiceItem>;
    createdAt?: string;
    updatedAt?: string;
};

export type InvoiceItem = {
    description: string;
    quantity: number;
    unitPrice: number;
    total: number;
};

export type InvoiceListResponse = PaginationInfo & {
    invoices: Array<Invoice>;
};

export type Transaction = {
    id: string;
    transaction_id: string;
    account_id: string;
    amount: number;
    currency?: string;
    type: 'debit' | 'credit' | 'transfer';
    status?: 'pending' | 'confirmed' | 'failed' | 'cancelled';
    description?: string;
    reference?: string;
    counterparty_name?: string;
    counterparty_account?: string;
    date: string;
    tags?: Array<(string)>;
    fee_amount?: number;
    fee_currency?: string;
    metadata?: {
        [key: string]: unknown;
    };
    gocardless_data?: {
        [key: string]: unknown;
    };
    created_at?: string;
    updated_at?: string;
};

export type type = 'debit' | 'credit' | 'transfer';

export type status5 = 'pending' | 'confirmed' | 'failed' | 'cancelled';

export type TransactionListResponse = PaginationInfo & {
    transactions: Array<Transaction>;
    stats?: {
        totalIncome?: number;
        totalExpenses?: number;
    };
};

export type Attachment = {
    id: string;
    invoiceId: string;
    fileName: string;
    filePath: string;
    fileSize: number;
    fileType: string;
    description?: string;
    uploadedBy?: string;
    uploadedAt: string;
    isDeleted?: boolean;
    deletedAt?: string;
    deletedBy?: string;
};

export type AttachmentListResponse = PaginationInfo & {
    attachments: Array<Attachment>;
};

export type InvoiceTemplate = {
    id: string;
    userId: string;
    name: string;
    description?: string | null;
    templateType: string;
    /**
     * HTML content of the template
     */
    htmlContent: string;
    /**
     * Template variable definitions
     */
    variables: Array<{
        name?: string;
        type?: 'text' | 'number' | 'date' | 'boolean';
        required?: boolean;
        defaultValue?: string | number | boolean;
    }>;
    isDefault: boolean;
    metadata?: {
        [key: string]: unknown;
    } | null;
    createdAt: string;
    updatedAt: string;
};

export type CreateInvoiceTemplate = {
    name: string;
    description?: string;
    templateType?: string;
    /**
     * HTML content of the template
     */
    htmlContent: string;
    variables?: Array<{
        name?: string;
        type?: 'text' | 'number' | 'date' | 'boolean';
        required?: boolean;
        defaultValue?: string | number | boolean;
    }>;
    isDefault?: boolean;
    metadata?: {
        [key: string]: unknown;
    };
};

export type UpdateInvoiceTemplate = {
    name?: string;
    description?: string;
    templateType?: string;
    /**
     * HTML content of the template
     */
    htmlContent?: string;
    variables?: Array<{
        name?: string;
        type?: 'text' | 'number' | 'date' | 'boolean';
        required?: boolean;
        defaultValue?: string | number | boolean;
    }>;
    isDefault?: boolean;
    metadata?: {
        [key: string]: unknown;
    };
};

export type InvoiceTemplateResponse = {
    success: boolean;
    data: InvoiceTemplate;
    message?: string;
};

export type InvoiceTemplateListResponse = {
    success: boolean;
    data: {
        items: Array<InvoiceTemplate>;
        total: number;
        page: number;
        limit: number;
        totalPages: number;
    };
};

export type FinancialReport = {
    period?: {
        startDate?: string;
        endDate?: string;
        granularity?: 'daily' | 'weekly' | 'monthly' | 'yearly';
    };
    summary?: {
        totalIncome?: number;
        totalExpenses?: number;
        netIncome?: number;
        averageBalance?: number;
        transactionCount?: number;
    };
    accountBreakdown?: Array<{
        accountId?: string;
        accountName?: string;
        balance?: number;
        income?: number;
        expenses?: number;
        transactionCount?: number;
    }>;
    categoryBreakdown?: Array<{
        category?: string;
        amount?: number;
        percentage?: number;
        transactionCount?: number;
    }>;
    timeSeriesData?: Array<{
        period?: string;
        income?: number;
        expenses?: number;
        balance?: number;
    }>;
    forecasts?: {
        nextMonth?: {
            expectedIncome?: number;
            expectedExpenses?: number;
            projectedBalance?: number;
        };
        quarterEnd?: {
            expectedIncome?: number;
            expectedExpenses?: number;
            projectedBalance?: number;
        };
    } | null;
    generatedAt?: string;
};

export type granularity = 'daily' | 'weekly' | 'monthly' | 'yearly';

export type FinancialReportResponse = {
    success: boolean;
    data: FinancialReport;
};

export type ListAccountsData = {
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Page number (1-based)
     */
    page?: number;
};

export type ListAccountsResponse = AccountListResponse;

export type GetAccountData = {
    id: string;
};

export type GetAccountResponse = Account;

export type GetAccountStatusResponse = AccountStatusResponse;

export type ListClientsData = {
    email?: string;
    limit?: number;
    name?: string;
    page?: number;
};

export type ListClientsResponse = ClientListResponse;

export type CreateClientData = {
    requestBody: CreateClient;
};

export type CreateClientResponse = StandardResponse;

export type SearchClientsData = {
    requestBody: SearchQuery;
};

export type SearchClientsResponse = ClientListResponse;

export type BulkClientsData = {
    requestBody: BulkOperationRequest;
};

export type BulkClientsResponse = BulkOperationResponse;

export type GetClientByTaxIdData = {
    taxId: string;
};

export type GetClientByTaxIdResponse = Client;

export type GetClientData = {
    id: string;
};

export type GetClientResponse = Client;

export type UpdateClientData = {
    id: string;
    requestBody: UpdateClient;
};

export type UpdateClientResponse = StandardResponse;

export type DeleteClientData = {
    id: string;
};

export type DeleteClientResponse = StandardResponse;

export type GetClientStatsData = {
    id: string;
};

export type GetClientStatsResponse = ClientStats;

export type GetClientTransactionsData = {
    dateFrom?: string;
    dateTo?: string;
    id: string;
    limit?: number;
    page?: number;
};

export type GetClientTransactionsResponse = TransactionListResponse;

export type ListInvoicesData = {
    clientId?: string;
    limit?: number;
    page?: number;
    status?: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';
};

export type ListInvoicesResponse = InvoiceListResponse;

export type CreateInvoiceData = {
    requestBody: CreateInvoice;
};

export type CreateInvoiceResponse = StandardResponse;

export type GetOverdueInvoicesData = {
    limit?: number;
    page?: number;
};

export type GetOverdueInvoicesResponse = InvoiceListResponse;

export type GetInvoiceByNumberData = {
    invoiceNumber: string;
};

export type GetInvoiceByNumberResponse = Invoice;

export type GetInvoiceData = {
    id: string;
};

export type GetInvoiceResponse = Invoice;

export type UpdateInvoiceData = {
    id: string;
    requestBody: UpdateInvoice;
};

export type UpdateInvoiceResponse = StandardResponse;

export type DeleteInvoiceData = {
    id: string;
};

export type DeleteInvoiceResponse = StandardResponse;

export type MarkInvoicePaidData = {
    id: string;
    requestBody: PaymentDetails;
};

export type MarkInvoicePaidResponse = StandardResponse;

export type SendInvoiceData = {
    id: string;
    requestBody: SendInvoiceRequest;
};

export type SendInvoiceResponse = StandardResponse;

export type DuplicateInvoiceData = {
    id: string;
};

export type DuplicateInvoiceResponse = StandardResponse;

export type AddInvoiceItemData = {
    id: string;
    requestBody: InvoiceItem;
};

export type AddInvoiceItemResponse = StandardResponse;

export type GenerateInvoicePdfData = {
    id: string;
};

export type GenerateInvoicePdfResponse = {
    success?: boolean;
    pdfUrl?: string;
};

export type DownloadInvoicePdfData = {
    id: string;
};

export type DownloadInvoicePdfResponse = (Blob | File);

export type SendInvoiceEmailData = {
    id: string;
    requestBody: EmailRequest;
};

export type SendInvoiceEmailResponse = StandardResponse;

export type ListTransactionsData = {
    accountId?: string;
    dateFrom?: string;
    dateTo?: string;
    limit?: number;
    maxAmount?: number;
    minAmount?: number;
    page?: number;
    search?: string;
    status?: 'pending' | 'confirmed' | 'failed' | 'cancelled';
    type?: 'debit' | 'credit' | 'transfer';
};

export type ListTransactionsResponse = TransactionListResponse;

export type ImportTransactionsData = {
    formData: {
        /**
         * JSON file containing transactions
         */
        file: (Blob | File);
        /**
         * Account ID to associate transactions with
         */
        accountId: string;
    };
};

export type ImportTransactionsResponse = ImportResult;

export type GetTransactionData = {
    id: string;
};

export type GetTransactionResponse = Transaction;

export type DeleteTransactionData = {
    id: string;
};

export type DeleteTransactionResponse = StandardResponse;

export type CategorizeTransactionData = {
    id: string;
    requestBody: CategorizationRequest;
};

export type CategorizeTransactionResponse = StandardResponse;

export type AutoCategorizeTransactionsData = {
    requestBody: {
        transactionIds: Array<(string)>;
    };
};

export type AutoCategorizeTransactionsResponse = {
    success?: boolean;
    categorizedCount?: number;
};

export type ExportTransactionsData = {
    accountId?: string;
    dateFrom?: string;
    dateTo?: string;
    format?: 'csv' | 'json';
};

export type ExportTransactionsResponse = Array<Transaction>;

export type CheckGoCardlessCredentialsResponse = {
    configured?: boolean;
};

export type ConfigureGoCardlessCredentialsData = {
    requestBody: GoCardlessConfig;
};

export type ConfigureGoCardlessCredentialsResponse = StandardResponse;

export type DeleteGoCardlessCredentialsResponse = StandardResponse;

export type GetGoCardlessStatusResponse = GoCardlessStatus;

export type TestGoCardlessConnectionResponse = StandardResponse;

export type DiagnoseGoCardlessIssuesResponse = DiagnosisReport;

export type SetupBbvaConnectionResponse = SetupResponse;

export type CompleteSetupData = {
    requestBody: {
        requisitionId: string;
    };
};

export type CompleteSetupResponse = SetupResult;

export type ManualSyncResponse = SyncResult;

export type SyncAccountsResponse = SyncResult;

export type SyncBalancesData = {
    requestBody?: {
        forceRefresh?: boolean;
    };
};

export type SyncBalancesResponse = SyncResult;

export type SyncTransactionsData = {
    requestBody?: {
        /**
         * Number of days to sync
         */
        days?: number;
    };
};

export type SyncTransactionsResponse = SyncResult;

export type StartSchedulerResponse = StandardResponse;

export type StopSchedulerResponse = StandardResponse;

export type ListAttachmentsData = {
    fileType?: string;
    invoiceId?: string;
    limit?: number;
    page?: number;
};

export type ListAttachmentsResponse = AttachmentListResponse;

export type GetAttachmentData = {
    id: string;
};

export type GetAttachmentResponse = Attachment;

export type ListInvoiceTemplatesData = {
    limit?: number;
    page?: number;
    /**
     * Search in name or description
     */
    search?: string;
    sortBy?: 'name' | 'createdAt' | 'updatedAt';
    sortOrder?: 'asc' | 'desc';
};

export type ListInvoiceTemplatesResponse = InvoiceTemplateListResponse;

export type CreateInvoiceTemplateData = {
    requestBody: CreateInvoiceTemplate;
};

export type CreateInvoiceTemplateResponse = InvoiceTemplateResponse;

export type GetInvoiceTemplateData = {
    id: string;
};

export type GetInvoiceTemplateResponse = InvoiceTemplateResponse;

export type UpdateInvoiceTemplateData = {
    id: string;
    requestBody: UpdateInvoiceTemplate;
};

export type UpdateInvoiceTemplateResponse = InvoiceTemplateResponse;

export type DeleteInvoiceTemplateData = {
    id: string;
};

export type DeleteInvoiceTemplateResponse = StandardResponse;

export type GenerateComprehensiveReportData = {
    /**
     * Filter by specific account
     */
    accountId?: string;
    /**
     * End date for report period
     */
    endDate?: string;
    /**
     * Report data granularity
     */
    granularity?: 'daily' | 'weekly' | 'monthly' | 'yearly';
    /**
     * Include financial forecasts
     */
    includeForecasts?: boolean;
    /**
     * Start date for report period
     */
    startDate?: string;
};

export type GenerateComprehensiveReportResponse = FinancialReportResponse;

export type $OpenApiTs = {
    '/api/financial/accounts': {
        get: {
            req: ListAccountsData;
            res: {
                /**
                 * List of accounts
                 */
                200: AccountListResponse;
                /**
                 * Invalid parameters
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/accounts/{id}': {
        get: {
            req: GetAccountData;
            res: {
                /**
                 * Account details
                 */
                200: Account;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Account not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/account-status': {
        get: {
            res: {
                /**
                 * Account status information
                 */
                200: AccountStatusResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/clients': {
        get: {
            req: ListClientsData;
            res: {
                /**
                 * List of clients
                 */
                200: ClientListResponse;
                /**
                 * Invalid parameters
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
        post: {
            req: CreateClientData;
            res: {
                /**
                 * Client created successfully
                 */
                201: StandardResponse;
                /**
                 * Invalid request data
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Internal server error
                 */
                500: Error;
            };
        };
    };
    '/api/financial/clients/search': {
        post: {
            req: SearchClientsData;
            res: {
                /**
                 * Search results
                 */
                200: ClientListResponse;
                /**
                 * Invalid search parameters
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/clients/bulk': {
        post: {
            req: BulkClientsData;
            res: {
                /**
                 * Bulk operation completed
                 */
                200: BulkOperationResponse;
                /**
                 * Invalid bulk operation
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/clients/tax/{taxId}': {
        get: {
            req: GetClientByTaxIdData;
            res: {
                /**
                 * Client details
                 */
                200: Client;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Client not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/clients/{id}': {
        get: {
            req: GetClientData;
            res: {
                /**
                 * Client details
                 */
                200: Client;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Client not found
                 */
                404: Error;
            };
        };
        put: {
            req: UpdateClientData;
            res: {
                /**
                 * Client updated successfully
                 */
                200: StandardResponse;
                /**
                 * Invalid request data
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Client not found
                 */
                404: Error;
                /**
                 * Internal server error
                 */
                500: Error;
            };
        };
        delete: {
            req: DeleteClientData;
            res: {
                /**
                 * Client deleted successfully
                 */
                200: StandardResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Client not found
                 */
                404: Error;
                /**
                 * Internal server error
                 */
                500: Error;
            };
        };
    };
    '/api/financial/clients/{id}/stats': {
        get: {
            req: GetClientStatsData;
            res: {
                /**
                 * Client statistics
                 */
                200: ClientStats;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Client not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/clients/{id}/transactions': {
        get: {
            req: GetClientTransactionsData;
            res: {
                /**
                 * Client transactions
                 */
                200: TransactionListResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Client not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/invoices': {
        get: {
            req: ListInvoicesData;
            res: {
                /**
                 * List of invoices
                 */
                200: InvoiceListResponse;
                /**
                 * Invalid parameters
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
        post: {
            req: CreateInvoiceData;
            res: {
                /**
                 * Invoice created successfully
                 */
                201: StandardResponse;
                /**
                 * Invalid request data
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Internal server error
                 */
                500: Error;
            };
        };
    };
    '/api/financial/invoices/overdue': {
        get: {
            req: GetOverdueInvoicesData;
            res: {
                /**
                 * List of overdue invoices
                 */
                200: InvoiceListResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/invoices/number/{invoiceNumber}': {
        get: {
            req: GetInvoiceByNumberData;
            res: {
                /**
                 * Invoice details
                 */
                200: Invoice;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/invoices/{id}': {
        get: {
            req: GetInvoiceData;
            res: {
                /**
                 * Invoice details
                 */
                200: Invoice;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice not found
                 */
                404: Error;
            };
        };
        put: {
            req: UpdateInvoiceData;
            res: {
                /**
                 * Invoice updated successfully
                 */
                200: StandardResponse;
                /**
                 * Invalid request data
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice not found
                 */
                404: Error;
                /**
                 * Internal server error
                 */
                500: Error;
            };
        };
        delete: {
            req: DeleteInvoiceData;
            res: {
                /**
                 * Invoice deleted successfully
                 */
                200: StandardResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice not found
                 */
                404: Error;
                /**
                 * Internal server error
                 */
                500: Error;
            };
        };
    };
    '/api/financial/invoices/{id}/mark-paid': {
        post: {
            req: MarkInvoicePaidData;
            res: {
                /**
                 * Invoice marked as paid
                 */
                200: StandardResponse;
                /**
                 * Invalid payment details
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/invoices/{id}/send': {
        post: {
            req: SendInvoiceData;
            res: {
                /**
                 * Invoice sent successfully
                 */
                200: StandardResponse;
                /**
                 * Invalid send request
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/invoices/{id}/duplicate': {
        post: {
            req: DuplicateInvoiceData;
            res: {
                /**
                 * Invoice duplicated successfully
                 */
                201: StandardResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/invoices/{id}/items': {
        post: {
            req: AddInvoiceItemData;
            res: {
                /**
                 * Item added to invoice
                 */
                200: StandardResponse;
                /**
                 * Invalid item data
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/invoices/{id}/generate-pdf': {
        post: {
            req: GenerateInvoicePdfData;
            res: {
                /**
                 * PDF generated successfully
                 */
                200: {
                    success?: boolean;
                    pdfUrl?: string;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/invoices/{id}/download-pdf': {
        get: {
            req: DownloadInvoicePdfData;
            res: {
                /**
                 * PDF file
                 */
                200: (Blob | File);
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice or PDF not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/invoices/{id}/send-email': {
        post: {
            req: SendInvoiceEmailData;
            res: {
                /**
                 * Email sent successfully
                 */
                200: StandardResponse;
                /**
                 * Invalid email request
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/transactions': {
        get: {
            req: ListTransactionsData;
            res: {
                /**
                 * List of transactions
                 */
                200: TransactionListResponse;
                /**
                 * Invalid parameters
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/transactions/import': {
        post: {
            req: ImportTransactionsData;
            res: {
                /**
                 * Import completed
                 */
                200: ImportResult;
                /**
                 * Invalid file or parameters
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/transactions/{id}': {
        get: {
            req: GetTransactionData;
            res: {
                /**
                 * Transaction details
                 */
                200: Transaction;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Transaction not found
                 */
                404: Error;
            };
        };
        delete: {
            req: DeleteTransactionData;
            res: {
                /**
                 * Transaction deleted successfully
                 */
                200: StandardResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Transaction not found
                 */
                404: Error;
                /**
                 * Internal server error
                 */
                500: Error;
            };
        };
    };
    '/api/financial/transactions/{id}/categorize': {
        post: {
            req: CategorizeTransactionData;
            res: {
                /**
                 * Transaction categorized successfully
                 */
                200: StandardResponse;
                /**
                 * Invalid categorization request
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Transaction not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/categorize/auto': {
        post: {
            req: AutoCategorizeTransactionsData;
            res: {
                /**
                 * Auto-categorization completed
                 */
                200: {
                    success?: boolean;
                    categorizedCount?: number;
                };
                /**
                 * Invalid request
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/transactions/export': {
        get: {
            req: ExportTransactionsData;
            res: {
                /**
                 * Exported transactions
                 */
                200: Array<Transaction>;
                /**
                 * Invalid parameters
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/gocardless/credentials': {
        get: {
            res: {
                /**
                 * Credentials status
                 */
                200: {
                    configured?: boolean;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
        post: {
            req: ConfigureGoCardlessCredentialsData;
            res: {
                /**
                 * Credentials configured successfully
                 */
                200: StandardResponse;
                /**
                 * Invalid configuration
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
        delete: {
            res: {
                /**
                 * Credentials deleted successfully
                 */
                200: StandardResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/gocardless/status': {
        get: {
            res: {
                /**
                 * GoCardless status information
                 */
                200: GoCardlessStatus;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/test-gocardless': {
        post: {
            res: {
                /**
                 * Connection test result
                 */
                200: StandardResponse;
                /**
                 * Connection test failed
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/diagnose-gocardless': {
        post: {
            res: {
                /**
                 * Diagnosis report
                 */
                200: DiagnosisReport;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/setup-bbva': {
        post: {
            res: {
                /**
                 * Setup initiated
                 */
                200: SetupResponse;
                /**
                 * Setup failed
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/complete-setup': {
        post: {
            req: CompleteSetupData;
            res: {
                /**
                 * Setup completed
                 */
                200: SetupResult;
                /**
                 * Invalid requisition ID
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/sync': {
        post: {
            res: {
                /**
                 * Sync completed
                 */
                200: SyncResult;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/sync/accounts': {
        post: {
            res: {
                /**
                 * Accounts synced
                 */
                200: SyncResult;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/sync/balances': {
        post: {
            req: SyncBalancesData;
            res: {
                /**
                 * Balances synced
                 */
                200: SyncResult;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/sync/transactions': {
        post: {
            req: SyncTransactionsData;
            res: {
                /**
                 * Transactions synced
                 */
                200: SyncResult;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/scheduler/start': {
        post: {
            res: {
                /**
                 * Scheduler started
                 */
                200: StandardResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/scheduler/stop': {
        post: {
            res: {
                /**
                 * Scheduler stopped
                 */
                200: StandardResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/attachments': {
        get: {
            req: ListAttachmentsData;
            res: {
                /**
                 * List of attachments
                 */
                200: AttachmentListResponse;
                /**
                 * Invalid parameters
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/financial/attachments/{id}': {
        get: {
            req: GetAttachmentData;
            res: {
                /**
                 * Attachment details
                 */
                200: Attachment;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Attachment not found
                 */
                404: Error;
            };
        };
    };
    '/api/financial/invoice-templates': {
        get: {
            req: ListInvoiceTemplatesData;
            res: {
                /**
                 * List of invoice templates
                 */
                200: InvoiceTemplateListResponse;
                /**
                 * Invalid parameters
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
        post: {
            req: CreateInvoiceTemplateData;
            res: {
                /**
                 * Invoice template created successfully
                 */
                201: InvoiceTemplateResponse;
                /**
                 * Invalid request data
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Internal server error
                 */
                500: Error;
            };
        };
    };
    '/api/financial/invoice-templates/{id}': {
        get: {
            req: GetInvoiceTemplateData;
            res: {
                /**
                 * Invoice template details
                 */
                200: InvoiceTemplateResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice template not found
                 */
                404: Error;
            };
        };
        put: {
            req: UpdateInvoiceTemplateData;
            res: {
                /**
                 * Invoice template updated successfully
                 */
                200: InvoiceTemplateResponse;
                /**
                 * Invalid request data
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice template not found
                 */
                404: Error;
                /**
                 * Internal server error
                 */
                500: Error;
            };
        };
        delete: {
            req: DeleteInvoiceTemplateData;
            res: {
                /**
                 * Invoice template deleted successfully
                 */
                200: StandardResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Invoice template not found
                 */
                404: Error;
                /**
                 * Internal server error
                 */
                500: Error;
            };
        };
    };
    '/api/financial/reports/comprehensive': {
        get: {
            req: GenerateComprehensiveReportData;
            res: {
                /**
                 * Financial report generated successfully
                 */
                200: FinancialReportResponse;
                /**
                 * Invalid parameters
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Internal server error
                 */
                500: Error;
            };
        };
    };
};