// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ListAccountsData, ListAccountsResponse, GetAccountData, GetAccountResponse, GetAccountStatusResponse, ListClientsData, ListClientsResponse, CreateClientData, CreateClientResponse, SearchClientsData, SearchClientsResponse, BulkClientsData, BulkClientsResponse, GetClientByTaxIdData, GetClientByTaxIdResponse, GetClientData, GetClientResponse, UpdateClientData, UpdateClientResponse, DeleteClientData, DeleteClientResponse, GetClientStatsData, GetClientStatsResponse, GetClientTransactionsData, GetClientTransactionsResponse, ListInvoicesData, ListInvoicesResponse, CreateInvoiceData, CreateInvoiceResponse, GetOverdueInvoicesData, GetOverdueInvoicesResponse, GetInvoiceByNumberData, GetInvoiceByNumberResponse, GetInvoiceData, GetInvoiceResponse, UpdateInvoiceData, UpdateInvoiceResponse, DeleteInvoiceData, DeleteInvoiceResponse, MarkInvoicePaidData, MarkInvoicePaidResponse, SendInvoiceData, SendInvoiceResponse, DuplicateInvoiceData, DuplicateInvoiceResponse, AddInvoiceItemData, AddInvoiceItemResponse, GenerateInvoicePdfData, GenerateInvoicePdfResponse, DownloadInvoicePdfData, DownloadInvoicePdfResponse, SendInvoiceEmailData, SendInvoiceEmailResponse, ListTransactionsData, ListTransactionsResponse, ImportTransactionsData, ImportTransactionsResponse, GetTransactionData, GetTransactionResponse, DeleteTransactionData, DeleteTransactionResponse, CategorizeTransactionData, CategorizeTransactionResponse, AutoCategorizeTransactionsData, AutoCategorizeTransactionsResponse, ExportTransactionsData, ExportTransactionsResponse, CheckGoCardlessCredentialsResponse, ConfigureGoCardlessCredentialsData, ConfigureGoCardlessCredentialsResponse, DeleteGoCardlessCredentialsResponse, GetGoCardlessStatusResponse, TestGoCardlessConnectionResponse, DiagnoseGoCardlessIssuesResponse, SetupBbvaConnectionResponse, CompleteSetupData, CompleteSetupResponse, ManualSyncResponse, SyncAccountsResponse, SyncBalancesData, SyncBalancesResponse, SyncTransactionsData, SyncTransactionsResponse, StartSchedulerResponse, StopSchedulerResponse, ListAttachmentsData, ListAttachmentsResponse, GetAttachmentData, GetAttachmentResponse, ListInvoiceTemplatesData, ListInvoiceTemplatesResponse, CreateInvoiceTemplateData, CreateInvoiceTemplateResponse, GetInvoiceTemplateData, GetInvoiceTemplateResponse, UpdateInvoiceTemplateData, UpdateInvoiceTemplateResponse, DeleteInvoiceTemplateData, DeleteInvoiceTemplateResponse, GenerateComprehensiveReportData, GenerateComprehensiveReportResponse } from './types.gen';

export class AccountsService {
    /**
     * List bank accounts
     * @param data The data for the request.
     * @param data.page Page number (1-based)
     * @param data.limit Items per page
     * @returns AccountListResponse List of accounts
     * @throws ApiError
     */
    public static listAccounts(data: ListAccountsData = {}): CancelablePromise<ListAccountsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/accounts',
            query: {
                page: data.page,
                limit: data.limit
            },
            errors: {
                400: 'Invalid parameters',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get account by ID
     * @param data The data for the request.
     * @param data.id
     * @returns Account Account details
     * @throws ApiError
     */
    public static getAccount(data: GetAccountData): CancelablePromise<GetAccountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/accounts/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Account not found'
            }
        });
    }
    
    /**
     * Get account status
     * @returns AccountStatusResponse Account status information
     * @throws ApiError
     */
    public static getAccountStatus(): CancelablePromise<GetAccountStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/account-status',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
}

export class ClientsService {
    /**
     * List clients
     * @param data The data for the request.
     * @param data.page
     * @param data.limit
     * @param data.email
     * @param data.name
     * @returns ClientListResponse List of clients
     * @throws ApiError
     */
    public static listClients(data: ListClientsData = {}): CancelablePromise<ListClientsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/clients',
            query: {
                page: data.page,
                limit: data.limit,
                email: data.email,
                name: data.name
            },
            errors: {
                400: 'Invalid parameters',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Create client
     * @param data The data for the request.
     * @param data.requestBody
     * @returns StandardResponse Client created successfully
     * @throws ApiError
     */
    public static createClient(data: CreateClientData): CancelablePromise<CreateClientResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/clients',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid request data',
                401: 'Unauthorized',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Search clients
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ClientListResponse Search results
     * @throws ApiError
     */
    public static searchClients(data: SearchClientsData): CancelablePromise<SearchClientsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/clients/search',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid search parameters',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Bulk operations on clients
     * @param data The data for the request.
     * @param data.requestBody
     * @returns BulkOperationResponse Bulk operation completed
     * @throws ApiError
     */
    public static bulkClients(data: BulkClientsData): CancelablePromise<BulkClientsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/clients/bulk',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid bulk operation',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get client by tax ID
     * @param data The data for the request.
     * @param data.taxId
     * @returns Client Client details
     * @throws ApiError
     */
    public static getClientByTaxId(data: GetClientByTaxIdData): CancelablePromise<GetClientByTaxIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/clients/tax/{taxId}',
            path: {
                taxId: data.taxId
            },
            errors: {
                401: 'Unauthorized',
                404: 'Client not found'
            }
        });
    }
    
    /**
     * Get client by ID
     * @param data The data for the request.
     * @param data.id
     * @returns Client Client details
     * @throws ApiError
     */
    public static getClient(data: GetClientData): CancelablePromise<GetClientResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/clients/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Client not found'
            }
        });
    }
    
    /**
     * Update client
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns StandardResponse Client updated successfully
     * @throws ApiError
     */
    public static updateClient(data: UpdateClientData): CancelablePromise<UpdateClientResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/financial/clients/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid request data',
                401: 'Unauthorized',
                404: 'Client not found',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Delete client
     * @param data The data for the request.
     * @param data.id
     * @returns StandardResponse Client deleted successfully
     * @throws ApiError
     */
    public static deleteClient(data: DeleteClientData): CancelablePromise<DeleteClientResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/financial/clients/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Client not found',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Get client statistics
     * @param data The data for the request.
     * @param data.id
     * @returns ClientStats Client statistics
     * @throws ApiError
     */
    public static getClientStats(data: GetClientStatsData): CancelablePromise<GetClientStatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/clients/{id}/stats',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Client not found'
            }
        });
    }
    
    /**
     * Get client transactions
     * @param data The data for the request.
     * @param data.id
     * @param data.page
     * @param data.limit
     * @param data.dateFrom
     * @param data.dateTo
     * @returns TransactionListResponse Client transactions
     * @throws ApiError
     */
    public static getClientTransactions(data: GetClientTransactionsData): CancelablePromise<GetClientTransactionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/clients/{id}/transactions',
            path: {
                id: data.id
            },
            query: {
                page: data.page,
                limit: data.limit,
                dateFrom: data.dateFrom,
                dateTo: data.dateTo
            },
            errors: {
                401: 'Unauthorized',
                404: 'Client not found'
            }
        });
    }
    
}

export class InvoicesService {
    /**
     * List invoices
     * @param data The data for the request.
     * @param data.page
     * @param data.limit
     * @param data.clientId
     * @param data.status
     * @returns InvoiceListResponse List of invoices
     * @throws ApiError
     */
    public static listInvoices(data: ListInvoicesData = {}): CancelablePromise<ListInvoicesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/invoices',
            query: {
                page: data.page,
                limit: data.limit,
                clientId: data.clientId,
                status: data.status
            },
            errors: {
                400: 'Invalid parameters',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Create invoice
     * @param data The data for the request.
     * @param data.requestBody
     * @returns StandardResponse Invoice created successfully
     * @throws ApiError
     */
    public static createInvoice(data: CreateInvoiceData): CancelablePromise<CreateInvoiceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/invoices',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid request data',
                401: 'Unauthorized',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Get overdue invoices
     * @param data The data for the request.
     * @param data.page
     * @param data.limit
     * @returns InvoiceListResponse List of overdue invoices
     * @throws ApiError
     */
    public static getOverdueInvoices(data: GetOverdueInvoicesData = {}): CancelablePromise<GetOverdueInvoicesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/invoices/overdue',
            query: {
                page: data.page,
                limit: data.limit
            },
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get invoice by number
     * @param data The data for the request.
     * @param data.invoiceNumber
     * @returns Invoice Invoice details
     * @throws ApiError
     */
    public static getInvoiceByNumber(data: GetInvoiceByNumberData): CancelablePromise<GetInvoiceByNumberResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/invoices/number/{invoiceNumber}',
            path: {
                invoiceNumber: data.invoiceNumber
            },
            errors: {
                401: 'Unauthorized',
                404: 'Invoice not found'
            }
        });
    }
    
    /**
     * Get invoice by ID
     * @param data The data for the request.
     * @param data.id
     * @returns Invoice Invoice details
     * @throws ApiError
     */
    public static getInvoice(data: GetInvoiceData): CancelablePromise<GetInvoiceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/invoices/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Invoice not found'
            }
        });
    }
    
    /**
     * Update invoice
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns StandardResponse Invoice updated successfully
     * @throws ApiError
     */
    public static updateInvoice(data: UpdateInvoiceData): CancelablePromise<UpdateInvoiceResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/financial/invoices/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid request data',
                401: 'Unauthorized',
                404: 'Invoice not found',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Delete invoice
     * @param data The data for the request.
     * @param data.id
     * @returns StandardResponse Invoice deleted successfully
     * @throws ApiError
     */
    public static deleteInvoice(data: DeleteInvoiceData): CancelablePromise<DeleteInvoiceResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/financial/invoices/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Invoice not found',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Mark invoice as paid
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns StandardResponse Invoice marked as paid
     * @throws ApiError
     */
    public static markInvoicePaid(data: MarkInvoicePaidData): CancelablePromise<MarkInvoicePaidResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/invoices/{id}/mark-paid',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid payment details',
                401: 'Unauthorized',
                404: 'Invoice not found'
            }
        });
    }
    
    /**
     * Send invoice
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns StandardResponse Invoice sent successfully
     * @throws ApiError
     */
    public static sendInvoice(data: SendInvoiceData): CancelablePromise<SendInvoiceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/invoices/{id}/send',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid send request',
                401: 'Unauthorized',
                404: 'Invoice not found'
            }
        });
    }
    
    /**
     * Duplicate invoice
     * @param data The data for the request.
     * @param data.id
     * @returns StandardResponse Invoice duplicated successfully
     * @throws ApiError
     */
    public static duplicateInvoice(data: DuplicateInvoiceData): CancelablePromise<DuplicateInvoiceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/invoices/{id}/duplicate',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Invoice not found'
            }
        });
    }
    
    /**
     * Add item to invoice
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns StandardResponse Item added to invoice
     * @throws ApiError
     */
    public static addInvoiceItem(data: AddInvoiceItemData): CancelablePromise<AddInvoiceItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/invoices/{id}/items',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid item data',
                401: 'Unauthorized',
                404: 'Invoice not found'
            }
        });
    }
    
    /**
     * Generate invoice PDF
     * @param data The data for the request.
     * @param data.id
     * @returns unknown PDF generated successfully
     * @throws ApiError
     */
    public static generateInvoicePdf(data: GenerateInvoicePdfData): CancelablePromise<GenerateInvoicePdfResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/invoices/{id}/generate-pdf',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Invoice not found'
            }
        });
    }
    
    /**
     * Download invoice PDF
     * @param data The data for the request.
     * @param data.id
     * @returns binary PDF file
     * @throws ApiError
     */
    public static downloadInvoicePdf(data: DownloadInvoicePdfData): CancelablePromise<DownloadInvoicePdfResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/invoices/{id}/download-pdf',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Invoice or PDF not found'
            }
        });
    }
    
    /**
     * Send invoice by email
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns StandardResponse Email sent successfully
     * @throws ApiError
     */
    public static sendInvoiceEmail(data: SendInvoiceEmailData): CancelablePromise<SendInvoiceEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/invoices/{id}/send-email',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid email request',
                401: 'Unauthorized',
                404: 'Invoice not found'
            }
        });
    }
    
}

export class TransactionsService {
    /**
     * List transactions
     * @param data The data for the request.
     * @param data.page
     * @param data.limit
     * @param data.accountId
     * @param data.type
     * @param data.status
     * @param data.dateFrom
     * @param data.dateTo
     * @param data.minAmount
     * @param data.maxAmount
     * @param data.search
     * @returns TransactionListResponse List of transactions
     * @throws ApiError
     */
    public static listTransactions(data: ListTransactionsData = {}): CancelablePromise<ListTransactionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/transactions',
            query: {
                page: data.page,
                limit: data.limit,
                accountId: data.accountId,
                type: data.type,
                status: data.status,
                dateFrom: data.dateFrom,
                dateTo: data.dateTo,
                minAmount: data.minAmount,
                maxAmount: data.maxAmount,
                search: data.search
            },
            errors: {
                400: 'Invalid parameters',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Import transactions
     * @param data The data for the request.
     * @param data.formData
     * @returns ImportResult Import completed
     * @throws ApiError
     */
    public static importTransactions(data: ImportTransactionsData): CancelablePromise<ImportTransactionsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/transactions/import',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: 'Invalid file or parameters',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get transaction by ID
     * @param data The data for the request.
     * @param data.id
     * @returns Transaction Transaction details
     * @throws ApiError
     */
    public static getTransaction(data: GetTransactionData): CancelablePromise<GetTransactionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/transactions/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Transaction not found'
            }
        });
    }
    
    /**
     * Delete transaction
     * @param data The data for the request.
     * @param data.id
     * @returns StandardResponse Transaction deleted successfully
     * @throws ApiError
     */
    public static deleteTransaction(data: DeleteTransactionData): CancelablePromise<DeleteTransactionResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/financial/transactions/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Transaction not found',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Categorize transaction
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns StandardResponse Transaction categorized successfully
     * @throws ApiError
     */
    public static categorizeTransaction(data: CategorizeTransactionData): CancelablePromise<CategorizeTransactionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/transactions/{id}/categorize',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid categorization request',
                401: 'Unauthorized',
                404: 'Transaction not found'
            }
        });
    }
    
    /**
     * Auto-categorize transactions
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Auto-categorization completed
     * @throws ApiError
     */
    public static autoCategorizeTransactions(data: AutoCategorizeTransactionsData): CancelablePromise<AutoCategorizeTransactionsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/categorize/auto',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Export transactions
     * @param data The data for the request.
     * @param data.format
     * @param data.accountId
     * @param data.dateFrom
     * @param data.dateTo
     * @returns Transaction Exported transactions
     * @throws ApiError
     */
    public static exportTransactions(data: ExportTransactionsData = {}): CancelablePromise<ExportTransactionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/transactions/export',
            query: {
                format: data.format,
                accountId: data.accountId,
                dateFrom: data.dateFrom,
                dateTo: data.dateTo
            },
            errors: {
                400: 'Invalid parameters',
                401: 'Unauthorized'
            }
        });
    }
    
}

export class GoCardlessService {
    /**
     * Check GoCardless credentials
     * @returns unknown Credentials status
     * @throws ApiError
     */
    public static checkGoCardlessCredentials(): CancelablePromise<CheckGoCardlessCredentialsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/gocardless/credentials',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Configure GoCardless credentials
     * @param data The data for the request.
     * @param data.requestBody
     * @returns StandardResponse Credentials configured successfully
     * @throws ApiError
     */
    public static configureGoCardlessCredentials(data: ConfigureGoCardlessCredentialsData): CancelablePromise<ConfigureGoCardlessCredentialsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/gocardless/credentials',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid configuration',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Delete GoCardless credentials
     * @returns StandardResponse Credentials deleted successfully
     * @throws ApiError
     */
    public static deleteGoCardlessCredentials(): CancelablePromise<DeleteGoCardlessCredentialsResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/financial/gocardless/credentials',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get GoCardless status
     * @returns GoCardlessStatus GoCardless status information
     * @throws ApiError
     */
    public static getGoCardlessStatus(): CancelablePromise<GetGoCardlessStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/gocardless/status',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Test GoCardless connection
     * @returns StandardResponse Connection test result
     * @throws ApiError
     */
    public static testGoCardlessConnection(): CancelablePromise<TestGoCardlessConnectionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/test-gocardless',
            errors: {
                400: 'Connection test failed',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Diagnose GoCardless issues
     * @returns DiagnosisReport Diagnosis report
     * @throws ApiError
     */
    public static diagnoseGoCardlessIssues(): CancelablePromise<DiagnoseGoCardlessIssuesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/diagnose-gocardless',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
}

export class SetupService {
    /**
     * Setup BBVA connection
     * @returns SetupResponse Setup initiated
     * @throws ApiError
     */
    public static setupBbvaConnection(): CancelablePromise<SetupBbvaConnectionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/setup-bbva',
            errors: {
                400: 'Setup failed',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Complete setup process
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SetupResult Setup completed
     * @throws ApiError
     */
    public static completeSetup(data: CompleteSetupData): CancelablePromise<CompleteSetupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/complete-setup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid requisition ID',
                401: 'Unauthorized'
            }
        });
    }
    
}

export class SyncService {
    /**
     * Manual sync
     * @returns SyncResult Sync completed
     * @throws ApiError
     */
    public static manualSync(): CancelablePromise<ManualSyncResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/sync',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Sync accounts
     * @returns SyncResult Accounts synced
     * @throws ApiError
     */
    public static syncAccounts(): CancelablePromise<SyncAccountsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/sync/accounts',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Sync balances
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SyncResult Balances synced
     * @throws ApiError
     */
    public static syncBalances(data: SyncBalancesData = {}): CancelablePromise<SyncBalancesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/sync/balances',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Sync transactions
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SyncResult Transactions synced
     * @throws ApiError
     */
    public static syncTransactions(data: SyncTransactionsData = {}): CancelablePromise<SyncTransactionsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/sync/transactions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
}

export class SchedulerService {
    /**
     * Start scheduler
     * @returns StandardResponse Scheduler started
     * @throws ApiError
     */
    public static startScheduler(): CancelablePromise<StartSchedulerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/scheduler/start',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Stop scheduler
     * @returns StandardResponse Scheduler stopped
     * @throws ApiError
     */
    public static stopScheduler(): CancelablePromise<StopSchedulerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/scheduler/stop',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
}

export class AttachmentsService {
    /**
     * List attachments
     * @param data The data for the request.
     * @param data.page
     * @param data.limit
     * @param data.invoiceId
     * @param data.fileType
     * @returns AttachmentListResponse List of attachments
     * @throws ApiError
     */
    public static listAttachments(data: ListAttachmentsData = {}): CancelablePromise<ListAttachmentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/attachments',
            query: {
                page: data.page,
                limit: data.limit,
                invoiceId: data.invoiceId,
                fileType: data.fileType
            },
            errors: {
                400: 'Invalid parameters',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get attachment by ID
     * @param data The data for the request.
     * @param data.id
     * @returns Attachment Attachment details
     * @throws ApiError
     */
    public static getAttachment(data: GetAttachmentData): CancelablePromise<GetAttachmentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/attachments/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Attachment not found'
            }
        });
    }
    
}

export class InvoiceTemplatesService {
    /**
     * List invoice templates
     * @param data The data for the request.
     * @param data.page
     * @param data.limit
     * @param data.search Search in name or description
     * @param data.sortBy
     * @param data.sortOrder
     * @returns InvoiceTemplateListResponse List of invoice templates
     * @throws ApiError
     */
    public static listInvoiceTemplates(data: ListInvoiceTemplatesData = {}): CancelablePromise<ListInvoiceTemplatesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/invoice-templates',
            query: {
                page: data.page,
                limit: data.limit,
                search: data.search,
                sortBy: data.sortBy,
                sortOrder: data.sortOrder
            },
            errors: {
                400: 'Invalid parameters',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Create invoice template
     * @param data The data for the request.
     * @param data.requestBody
     * @returns InvoiceTemplateResponse Invoice template created successfully
     * @throws ApiError
     */
    public static createInvoiceTemplate(data: CreateInvoiceTemplateData): CancelablePromise<CreateInvoiceTemplateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/financial/invoice-templates',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid request data',
                401: 'Unauthorized',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Get invoice template by ID
     * @param data The data for the request.
     * @param data.id
     * @returns InvoiceTemplateResponse Invoice template details
     * @throws ApiError
     */
    public static getInvoiceTemplate(data: GetInvoiceTemplateData): CancelablePromise<GetInvoiceTemplateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/invoice-templates/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Invoice template not found'
            }
        });
    }
    
    /**
     * Update invoice template
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns InvoiceTemplateResponse Invoice template updated successfully
     * @throws ApiError
     */
    public static updateInvoiceTemplate(data: UpdateInvoiceTemplateData): CancelablePromise<UpdateInvoiceTemplateResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/financial/invoice-templates/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid request data',
                401: 'Unauthorized',
                404: 'Invoice template not found',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Delete invoice template
     * @param data The data for the request.
     * @param data.id
     * @returns StandardResponse Invoice template deleted successfully
     * @throws ApiError
     */
    public static deleteInvoiceTemplate(data: DeleteInvoiceTemplateData): CancelablePromise<DeleteInvoiceTemplateResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/financial/invoice-templates/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Invoice template not found',
                500: 'Internal server error'
            }
        });
    }
    
}

export class ReportsService {
    /**
     * Generate comprehensive financial report
     * @param data The data for the request.
     * @param data.startDate Start date for report period
     * @param data.endDate End date for report period
     * @param data.accountId Filter by specific account
     * @param data.includeForecasts Include financial forecasts
     * @param data.granularity Report data granularity
     * @returns FinancialReportResponse Financial report generated successfully
     * @throws ApiError
     */
    public static generateComprehensiveReport(data: GenerateComprehensiveReportData = {}): CancelablePromise<GenerateComprehensiveReportResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/financial/reports/comprehensive',
            query: {
                startDate: data.startDate,
                endDate: data.endDate,
                accountId: data.accountId,
                includeForecasts: data.includeForecasts,
                granularity: data.granularity
            },
            errors: {
                400: 'Invalid parameters',
                401: 'Unauthorized',
                500: 'Internal server error'
            }
        });
    }
    
}