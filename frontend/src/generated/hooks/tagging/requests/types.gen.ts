// This file is auto-generated by @hey-api/openapi-ts

export type Error = {
    /**
     * Error message
     */
    message: string;
    /**
     * Error code
     */
    code: string;
    /**
     * Additional error details
     */
    details?: {
        [key: string]: unknown;
    };
};

export type StandardResponse = {
    success: boolean;
    /**
     * Response data
     */
    data?: {
        [key: string]: unknown;
    };
    /**
     * Success message
     */
    message?: string;
    timestamp?: string;
    path?: string;
};

export type PaginationMeta = {
    /**
     * Current page number
     */
    page: number;
    /**
     * Items per page
     */
    limit: number;
    /**
     * Total number of items
     */
    total: number;
    /**
     * Total number of pages
     */
    pages: number;
    /**
     * Has next page
     */
    hasNext?: boolean;
    /**
     * Has previous page
     */
    hasPrev?: boolean;
};

/**
 * Supported entity types for tagging
 */
export type EntityType = 'transaction' | 'document' | 'client' | 'invoice';

/**
 * Method used to apply the tag
 */
export type TagMethod = 'AI' | 'PATTERN' | 'MANUAL' | 'AUTO';

export type TagPatterns = {
    /**
     * Keywords to match
     */
    keywords?: Array<(string)>;
    /**
     * Merchant names to match
     */
    merchants?: Array<(string)>;
    /**
     * Categories to match
     */
    categories?: Array<(string)>;
    /**
     * Regular expression pattern
     */
    regex?: string;
    /**
     * Custom matching rules
     */
    customRules?: {
        [key: string]: unknown;
    };
};

export type Tag = {
    id: string;
    /**
     * Unique tag code (uppercase with underscores)
     */
    code: string;
    /**
     * Human-readable tag name
     */
    name: string;
    /**
     * Tag description
     */
    description?: string | null;
    /**
     * Supported entity types
     */
    entityTypes: Array<EntityType>;
    patterns?: TagPatterns | null;
    /**
     * Custom tagging rules
     */
    rules?: {
        [key: string]: unknown;
    } | null;
    /**
     * Default confidence for this tag
     */
    confidence: number;
    /**
     * AI model used for embeddings
     */
    embeddingModel?: string | null;
    /**
     * Parent tag ID for hierarchy
     */
    parentId?: string | null;
    /**
     * Hierarchical path
     */
    path: string;
    /**
     * Hierarchy level
     */
    level: number;
    /**
     * Display color (hex code)
     */
    color?: string | null;
    /**
     * Display icon
     */
    icon?: string | null;
    /**
     * Whether tag is active
     */
    isActive: boolean;
    /**
     * Whether tag is system-defined
     */
    isSystem: boolean;
    /**
     * Additional metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Number of times tag has been used
     */
    usageCount: number;
    /**
     * Success rate based on feedback
     */
    successRate: number;
    /**
     * Last time tag was used
     */
    lastUsed?: string | null;
    createdAt?: string;
    updatedAt?: string;
};

export type CreateTag = {
    /**
     * Unique tag code (uppercase with underscores)
     */
    code: string;
    /**
     * Human-readable tag name
     */
    name: string;
    /**
     * Tag description
     */
    description?: string | null;
    /**
     * Supported entity types
     */
    entityTypes: Array<EntityType>;
    patterns?: TagPatterns | null;
    /**
     * Custom tagging rules
     */
    rules?: {
        [key: string]: unknown;
    } | null;
    /**
     * Default confidence for this tag
     */
    confidence?: number;
    /**
     * AI model used for embeddings
     */
    embeddingModel?: string | null;
    /**
     * Parent tag ID for hierarchy
     */
    parentId?: string | null;
    /**
     * Display color (hex code)
     */
    color?: string | null;
    /**
     * Display icon
     */
    icon?: string | null;
    /**
     * Whether tag is active
     */
    isActive?: boolean;
    /**
     * Whether tag is system-defined
     */
    isSystem?: boolean;
    /**
     * Additional metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};

export type UpdateTag = {
    /**
     * Human-readable tag name
     */
    name?: string;
    /**
     * Tag description
     */
    description?: string | null;
    /**
     * Supported entity types
     */
    entityTypes?: Array<EntityType>;
    patterns?: TagPatterns | null;
    /**
     * Custom tagging rules
     */
    rules?: {
        [key: string]: unknown;
    } | null;
    /**
     * Default confidence for this tag
     */
    confidence?: number;
    /**
     * AI model used for embeddings
     */
    embeddingModel?: string | null;
    /**
     * Parent tag ID for hierarchy
     */
    parentId?: string | null;
    /**
     * Display color (hex code)
     */
    color?: string | null;
    /**
     * Display icon
     */
    icon?: string | null;
    /**
     * Whether tag is active
     */
    isActive?: boolean;
    /**
     * Whether tag is system-defined
     */
    isSystem?: boolean;
    /**
     * Additional metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};

export type EntityTag = {
    id: string;
    entityType: EntityType;
    /**
     * ID of the tagged entity
     */
    entityId: string;
    /**
     * ID of the applied tag
     */
    tagId: string;
    /**
     * Confidence score for this tag assignment
     */
    confidence: number;
    method: TagMethod;
    /**
     * When tag was applied
     */
    appliedAt?: string;
    /**
     * User who applied the tag
     */
    appliedBy?: string;
    /**
     * Whether tag has been verified as correct
     */
    isVerified: boolean;
    /**
     * User who verified the tag
     */
    verifiedBy?: string | null;
    /**
     * When tag was verified
     */
    verifiedAt?: string | null;
    /**
     * Additional metadata for this tag assignment
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};

export type EntityTagResponse = EntityTag & {
    /**
     * Tag code for display
     */
    tagCode: string;
    /**
     * Tag name for display
     */
    tagName: string;
};

export type UpdateEntityTag = {
    /**
     * Updated confidence score
     */
    confidence?: number;
    /**
     * Verification status
     */
    isVerified?: boolean;
};

export type TagEntityRequest = {
    /**
     * Tagging method to use
     */
    method?: 'auto' | 'ai' | 'pattern' | 'manual';
    options?: {
        /**
         * AI provider for tagging
         */
        aiProvider?: 'claude' | 'openai';
        /**
         * Minimum confidence threshold
         */
        confidenceThreshold?: number;
        /**
         * Maximum number of tags to apply
         */
        maxTags?: number;
        /**
         * Include related entity context
         */
        includeRelated?: boolean;
        /**
         * Remove existing tags before applying new ones
         */
        forceReTag?: boolean;
    };
};

/**
 * Tagging method to use
 */
export type method = 'auto' | 'ai' | 'pattern' | 'manual';

/**
 * AI provider for tagging
 */
export type aiProvider = 'claude' | 'openai';

export type BatchTagRequest = {
    entities: Array<{
        type: EntityType;
        id: string;
        /**
         * Optional content override
         */
        content?: string;
        /**
         * Additional metadata
         */
        metadata?: {
            [key: string]: unknown;
        };
    }>;
    options?: {
        aiProvider?: 'claude' | 'openai';
        confidenceThreshold?: number;
        maxTags?: number;
        includeRelated?: boolean;
        forceReTag?: boolean;
    };
};

export type ReTagRequest = {
    filter: {
        entityType?: EntityType;
        dateRange?: {
            start: string;
            end: string;
        };
        /**
         * Filter by existing tags
         */
        tags?: Array<(string)>;
        /**
         * Include only entities with no tags
         */
        hasNoTags?: boolean;
    };
    options?: {
        method?: 'ai' | 'pattern';
        batchSize?: number;
        /**
         * Preview changes without applying
         */
        dryRun?: boolean;
    };
};

export type method2 = 'ai' | 'pattern';

export type TagFeedback = {
    entityType: EntityType;
    entityId: string;
    entityTagId: string;
    feedback: {
        /**
         * Whether the tag is correct
         */
        isCorrect: boolean;
        /**
         * Alternative tag suggestion
         */
        suggestedTagId?: string;
        /**
         * Reason for feedback
         */
        reason?: string;
        /**
         * Confidence in feedback
         */
        confidence?: number;
    };
};

export type TagResponse = {
    success: boolean;
    data?: Tag;
    error?: {
        code?: string;
        message?: string;
        details?: {
            [key: string]: unknown;
        };
    };
};

export type TagListResponse = {
    success: boolean;
    data?: Array<Tag>;
    pagination: PaginationMeta;
    error?: {
        code?: string;
        message?: string;
    };
};

export type TagSearchResponse = {
    success: boolean;
    data?: Array<(Tag & {
    /**
     * Hierarchical path for display
     */
    path?: string;
    /**
     * Relevance score
     */
    score?: number;
})>;
};

export type EntityTagsResponse = {
    success: boolean;
    data?: {
        entity: {
            type: EntityType;
            id: string;
            /**
             * Entity preview text
             */
            preview?: string;
        };
        tags: Array<EntityTagResponse>;
    };
};

export type TagEntityResponse = {
    success: boolean;
    data?: {
        entity: {
            type: EntityType;
            id: string;
        };
        tags: Array<EntityTagResponse>;
        /**
         * Processing time in milliseconds
         */
        processingTime: number;
        /**
         * AI provider used
         */
        aiProvider?: string;
    };
};

export type BatchTagResponse = {
    success: boolean;
    data?: {
        results: Array<{
            entityId: string;
            status: 'success' | 'failed' | 'skipped';
            tags?: Array<EntityTagResponse>;
            error?: string;
            processingTime: number;
        }>;
        summary: {
            total: number;
            successful: number;
            failed: number;
            skipped: number;
            totalProcessingTime: number;
        };
    };
};

export type ReTagResponse = {
    success: boolean;
    data?: {
        /**
         * Total entities processed
         */
        processed: number;
        /**
         * Entities successfully tagged
         */
        tagged: number;
        /**
         * Entities that failed
         */
        failed: number;
        /**
         * Entities skipped
         */
        skipped: number;
        errors?: Array<{
            entityId: string;
            error: string;
        }>;
    };
};

export type AccuracyMetrics = {
    success: boolean;
    data?: {
        overall: {
            /**
             * Overall accuracy rate
             */
            accuracy: number;
            /**
             * Total number of tags applied
             */
            totalTags: number;
            /**
             * Number of verified tags
             */
            verifiedTags: number;
            /**
             * Number of correct tags
             */
            correctTags: number;
        };
        byEntityType: {
            [key: string]: {
                accuracy?: number;
                totalTags?: number;
                verifiedTags?: number;
                correctTags?: number;
            };
        };
        byMethod: {
            [key: string]: {
                accuracy?: number;
                totalTags?: number;
                verifiedTags?: number;
                correctTags?: number;
            };
        };
    };
};

export type GetApiTagsData = {
    /**
     * Filter by entity type
     */
    entityType?: EntityType;
    /**
     * Filter by active status
     */
    isActive?: boolean;
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Filter by parent tag ID
     */
    parentId?: string;
    /**
     * Search in tag name, code, or description
     */
    search?: string;
    /**
     * Sort field
     */
    sortBy?: 'name' | 'code' | 'usageCount' | 'createdAt';
    /**
     * Sort order
     */
    sortOrder?: 'asc' | 'desc';
};

export type GetApiTagsResponse = TagListResponse;

export type PostApiTagsData = {
    requestBody: CreateTag;
};

export type PostApiTagsResponse = TagResponse;

export type GetApiTagsSearchData = {
    /**
     * Filter by entity type
     */
    entityType?: EntityType;
    /**
     * Maximum results to return
     */
    limit?: number;
    /**
     * Search query
     */
    q: string;
};

export type GetApiTagsSearchResponse = TagSearchResponse;

export type GetApiTagsByIdData = {
    /**
     * Tag ID
     */
    id: string;
};

export type GetApiTagsByIdResponse = TagResponse;

export type PutApiTagsByIdData = {
    /**
     * Tag ID
     */
    id: string;
    requestBody: UpdateTag;
};

export type PutApiTagsByIdResponse = TagResponse;

export type DeleteApiTagsByIdData = {
    /**
     * Tag ID
     */
    id: string;
    /**
     * Reassign existing entity tags to this tag ID
     */
    reassignTo?: string;
};

export type DeleteApiTagsByIdResponse = void;

export type GetApiEntitiesByTypeByIdTagsData = {
    /**
     * Entity ID
     */
    id: string;
    /**
     * Entity type
     */
    type: EntityType;
};

export type GetApiEntitiesByTypeByIdTagsResponse = EntityTagsResponse;

export type PostApiEntitiesByTypeByIdTagsData = {
    /**
     * Entity ID
     */
    id: string;
    requestBody: TagEntityRequest;
    /**
     * Entity type
     */
    type: EntityType;
};

export type PostApiEntitiesByTypeByIdTagsResponse = TagEntityResponse;

export type PatchApiEntitiesByTypeByIdTagsByTagIdData = {
    /**
     * Entity ID
     */
    id: string;
    requestBody: UpdateEntityTag;
    /**
     * Tag ID
     */
    tagId: string;
    /**
     * Entity type
     */
    type: EntityType;
};

export type PatchApiEntitiesByTypeByIdTagsByTagIdResponse = EntityTagResponse;

export type DeleteApiEntitiesByTypeByIdTagsByTagIdData = {
    /**
     * Entity ID
     */
    id: string;
    /**
     * Tag ID
     */
    tagId: string;
    /**
     * Entity type
     */
    type: EntityType;
};

export type DeleteApiEntitiesByTypeByIdTagsByTagIdResponse = void;

export type PostApiTaggingBatchData = {
    requestBody: BatchTagRequest;
};

export type PostApiTaggingBatchResponse = BatchTagResponse;

export type PostApiTaggingRetagData = {
    requestBody: ReTagRequest;
};

export type PostApiTaggingRetagResponse = ReTagResponse;

export type PostApiTaggingFeedbackData = {
    requestBody: TagFeedback;
};

export type PostApiTaggingFeedbackResponse = StandardResponse;

export type GetApiTaggingAccuracyData = {
    /**
     * Filter by entity type
     */
    entityType?: EntityType;
    /**
     * Time period for metrics
     */
    period?: 'day' | 'week' | 'month' | 'year';
};

export type GetApiTaggingAccuracyResponse = AccuracyMetrics;

export type $OpenApiTs = {
    '/api/tags': {
        get: {
            req: GetApiTagsData;
            res: {
                /**
                 * List of tags with pagination
                 */
                200: TagListResponse;
                /**
                 * Invalid query parameters
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
        post: {
            req: PostApiTagsData;
            res: {
                /**
                 * Tag created successfully
                 */
                201: TagResponse;
                /**
                 * Invalid tag data
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Tag code already exists
                 */
                409: Error;
            };
        };
    };
    '/api/tags/search': {
        get: {
            req: GetApiTagsSearchData;
            res: {
                /**
                 * Search results with relevance scores
                 */
                200: TagSearchResponse;
                /**
                 * Invalid search parameters
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/tags/{id}': {
        get: {
            req: GetApiTagsByIdData;
            res: {
                /**
                 * Tag details
                 */
                200: TagResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Tag not found
                 */
                404: Error;
            };
        };
        put: {
            req: PutApiTagsByIdData;
            res: {
                /**
                 * Tag updated successfully
                 */
                200: TagResponse;
                /**
                 * Invalid tag data
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Tag not found
                 */
                404: Error;
            };
        };
        delete: {
            req: DeleteApiTagsByIdData;
            res: {
                /**
                 * Tag deleted successfully
                 */
                204: void;
                /**
                 * Cannot delete tag (has children or other constraints)
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Tag not found
                 */
                404: Error;
            };
        };
    };
    '/api/entities/{type}/{id}/tags': {
        get: {
            req: GetApiEntitiesByTypeByIdTagsData;
            res: {
                /**
                 * Entity tags
                 */
                200: EntityTagsResponse;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Entity not found
                 */
                404: Error;
            };
        };
        post: {
            req: PostApiEntitiesByTypeByIdTagsData;
            res: {
                /**
                 * Entity tagged successfully
                 */
                200: TagEntityResponse;
                /**
                 * Invalid tagging request
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Entity not found
                 */
                404: Error;
            };
        };
    };
    '/api/entities/{type}/{id}/tags/{tagId}': {
        patch: {
            req: PatchApiEntitiesByTypeByIdTagsByTagIdData;
            res: {
                /**
                 * Entity tag updated successfully
                 */
                200: EntityTagResponse;
                /**
                 * Invalid update data
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Entity or tag not found
                 */
                404: Error;
            };
        };
        delete: {
            req: DeleteApiEntitiesByTypeByIdTagsByTagIdData;
            res: {
                /**
                 * Tag removed from entity successfully
                 */
                204: void;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Entity or tag not found
                 */
                404: Error;
            };
        };
    };
    '/api/tagging/batch': {
        post: {
            req: PostApiTaggingBatchData;
            res: {
                /**
                 * Batch tagging results
                 */
                200: BatchTagResponse;
                /**
                 * Invalid batch request
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/tagging/retag': {
        post: {
            req: PostApiTaggingRetagData;
            res: {
                /**
                 * Re-tagging results
                 */
                200: ReTagResponse;
                /**
                 * Invalid retag request
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/tagging/feedback': {
        post: {
            req: PostApiTaggingFeedbackData;
            res: {
                /**
                 * Feedback submitted successfully
                 */
                200: StandardResponse;
                /**
                 * Invalid feedback data
                 */
                400: Error;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/api/tagging/accuracy': {
        get: {
            req: GetApiTaggingAccuracyData;
            res: {
                /**
                 * Accuracy metrics
                 */
                200: AccuracyMetrics;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
};