// This file is auto-generated by @hey-api/openapi-ts

export const $Error = {
    type: 'object',
    required: ['message', 'code'],
    properties: {
        message: {
            type: 'string',
            description: 'Error message'
        },
        code: {
            type: 'string',
            description: 'Error code'
        },
        details: {
            type: 'object',
            description: 'Additional error details'
        }
    }
} as const;

export const $StandardResponse = {
    type: 'object',
    required: ['success'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            description: 'Response data'
        },
        message: {
            type: 'string',
            description: 'Success message'
        },
        timestamp: {
            type: 'string',
            format: 'date-time'
        },
        path: {
            type: 'string'
        }
    }
} as const;

export const $PaginationMeta = {
    type: 'object',
    required: ['page', 'limit', 'total', 'pages'],
    properties: {
        page: {
            type: 'integer',
            description: 'Current page number'
        },
        limit: {
            type: 'integer',
            description: 'Items per page'
        },
        total: {
            type: 'integer',
            description: 'Total number of items'
        },
        pages: {
            type: 'integer',
            description: 'Total number of pages'
        },
        hasNext: {
            type: 'boolean',
            description: 'Has next page'
        },
        hasPrev: {
            type: 'boolean',
            description: 'Has previous page'
        }
    }
} as const;

export const $EntityType = {
    type: 'string',
    enum: ['transaction', 'document', 'client', 'invoice'],
    description: 'Supported entity types for tagging'
} as const;

export const $TagMethod = {
    type: 'string',
    enum: ['AI', 'PATTERN', 'MANUAL', 'AUTO'],
    description: 'Method used to apply the tag'
} as const;

export const $TagPatterns = {
    type: 'object',
    properties: {
        keywords: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Keywords to match'
        },
        merchants: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Merchant names to match'
        },
        categories: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Categories to match'
        },
        regex: {
            type: 'string',
            description: 'Regular expression pattern'
        },
        customRules: {
            type: 'object',
            description: 'Custom matching rules'
        }
    }
} as const;

export const $Tag = {
    type: 'object',
    required: ['id', 'code', 'name', 'entityTypes', 'path', 'level', 'isActive', 'isSystem', 'confidence', 'usageCount', 'successRate'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            type: 'string',
            pattern: '^[A-Z][A-Z0-9_]*$',
            description: 'Unique tag code (uppercase with underscores)'
        },
        name: {
            type: 'string',
            description: 'Human-readable tag name'
        },
        description: {
            type: 'string',
            nullable: true,
            description: 'Tag description'
        },
        entityTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EntityType'
            },
            minItems: 1,
            description: 'Supported entity types'
        },
        patterns: {
            '$ref': '#/components/schemas/TagPatterns',
            nullable: true
        },
        rules: {
            type: 'object',
            nullable: true,
            description: 'Custom tagging rules'
        },
        confidence: {
            type: 'number',
            minimum: 0,
            maximum: 1,
            description: 'Default confidence for this tag'
        },
        embeddingModel: {
            type: 'string',
            nullable: true,
            description: 'AI model used for embeddings'
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true,
            description: 'Parent tag ID for hierarchy'
        },
        path: {
            type: 'string',
            description: 'Hierarchical path'
        },
        level: {
            type: 'integer',
            minimum: 0,
            description: 'Hierarchy level'
        },
        color: {
            type: 'string',
            nullable: true,
            description: 'Display color (hex code)'
        },
        icon: {
            type: 'string',
            nullable: true,
            description: 'Display icon'
        },
        isActive: {
            type: 'boolean',
            description: 'Whether tag is active'
        },
        isSystem: {
            type: 'boolean',
            description: 'Whether tag is system-defined'
        },
        metadata: {
            type: 'object',
            nullable: true,
            description: 'Additional metadata'
        },
        usageCount: {
            type: 'integer',
            minimum: 0,
            description: 'Number of times tag has been used'
        },
        successRate: {
            type: 'number',
            minimum: 0,
            maximum: 1,
            description: 'Success rate based on feedback'
        },
        lastUsed: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            description: 'Last time tag was used'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $CreateTag = {
    type: 'object',
    required: ['code', 'name', 'entityTypes'],
    properties: {
        code: {
            type: 'string',
            pattern: '^[A-Z][A-Z0-9_]*$',
            description: 'Unique tag code (uppercase with underscores)'
        },
        name: {
            type: 'string',
            minLength: 1,
            description: 'Human-readable tag name'
        },
        description: {
            type: 'string',
            nullable: true,
            description: 'Tag description'
        },
        entityTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EntityType'
            },
            minItems: 1,
            description: 'Supported entity types'
        },
        patterns: {
            '$ref': '#/components/schemas/TagPatterns',
            nullable: true
        },
        rules: {
            type: 'object',
            nullable: true,
            description: 'Custom tagging rules'
        },
        confidence: {
            type: 'number',
            minimum: 0,
            maximum: 1,
            default: 0.5,
            description: 'Default confidence for this tag'
        },
        embeddingModel: {
            type: 'string',
            nullable: true,
            description: 'AI model used for embeddings'
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true,
            description: 'Parent tag ID for hierarchy'
        },
        color: {
            type: 'string',
            nullable: true,
            description: 'Display color (hex code)'
        },
        icon: {
            type: 'string',
            nullable: true,
            description: 'Display icon'
        },
        isActive: {
            type: 'boolean',
            default: true,
            description: 'Whether tag is active'
        },
        isSystem: {
            type: 'boolean',
            default: false,
            description: 'Whether tag is system-defined'
        },
        metadata: {
            type: 'object',
            nullable: true,
            description: 'Additional metadata'
        }
    }
} as const;

export const $UpdateTag = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            description: 'Human-readable tag name'
        },
        description: {
            type: 'string',
            nullable: true,
            description: 'Tag description'
        },
        entityTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EntityType'
            },
            minItems: 1,
            description: 'Supported entity types'
        },
        patterns: {
            '$ref': '#/components/schemas/TagPatterns',
            nullable: true
        },
        rules: {
            type: 'object',
            nullable: true,
            description: 'Custom tagging rules'
        },
        confidence: {
            type: 'number',
            minimum: 0,
            maximum: 1,
            description: 'Default confidence for this tag'
        },
        embeddingModel: {
            type: 'string',
            nullable: true,
            description: 'AI model used for embeddings'
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true,
            description: 'Parent tag ID for hierarchy'
        },
        color: {
            type: 'string',
            nullable: true,
            description: 'Display color (hex code)'
        },
        icon: {
            type: 'string',
            nullable: true,
            description: 'Display icon'
        },
        isActive: {
            type: 'boolean',
            description: 'Whether tag is active'
        },
        isSystem: {
            type: 'boolean',
            description: 'Whether tag is system-defined'
        },
        metadata: {
            type: 'object',
            nullable: true,
            description: 'Additional metadata'
        }
    }
} as const;

export const $EntityTag = {
    type: 'object',
    required: ['id', 'entityType', 'entityId', 'tagId', 'confidence', 'method', 'isVerified'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        entityType: {
            '$ref': '#/components/schemas/EntityType'
        },
        entityId: {
            type: 'string',
            description: 'ID of the tagged entity'
        },
        tagId: {
            type: 'string',
            format: 'uuid',
            description: 'ID of the applied tag'
        },
        confidence: {
            type: 'number',
            minimum: 0,
            maximum: 1,
            description: 'Confidence score for this tag assignment'
        },
        method: {
            '$ref': '#/components/schemas/TagMethod'
        },
        appliedAt: {
            type: 'string',
            format: 'date-time',
            description: 'When tag was applied'
        },
        appliedBy: {
            type: 'string',
            description: 'User who applied the tag'
        },
        isVerified: {
            type: 'boolean',
            description: 'Whether tag has been verified as correct'
        },
        verifiedBy: {
            type: 'string',
            nullable: true,
            description: 'User who verified the tag'
        },
        verifiedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            description: 'When tag was verified'
        },
        metadata: {
            type: 'object',
            nullable: true,
            description: 'Additional metadata for this tag assignment'
        }
    }
} as const;

export const $EntityTagResponse = {
    allOf: [
        {
            '$ref': '#/components/schemas/EntityTag'
        },
        {
            type: 'object',
            required: ['tagCode', 'tagName'],
            properties: {
                tagCode: {
                    type: 'string',
                    description: 'Tag code for display'
                },
                tagName: {
                    type: 'string',
                    description: 'Tag name for display'
                }
            }
        }
    ]
} as const;

export const $UpdateEntityTag = {
    type: 'object',
    properties: {
        confidence: {
            type: 'number',
            minimum: 0,
            maximum: 1,
            description: 'Updated confidence score'
        },
        isVerified: {
            type: 'boolean',
            description: 'Verification status'
        }
    }
} as const;

export const $TagEntityRequest = {
    type: 'object',
    properties: {
        method: {
            type: 'string',
            enum: ['auto', 'ai', 'pattern', 'manual'],
            default: 'auto',
            description: 'Tagging method to use'
        },
        options: {
            type: 'object',
            properties: {
                aiProvider: {
                    type: 'string',
                    enum: ['claude', 'openai'],
                    description: 'AI provider for tagging'
                },
                confidenceThreshold: {
                    type: 'number',
                    minimum: 0,
                    maximum: 1,
                    default: 0.7,
                    description: 'Minimum confidence threshold'
                },
                maxTags: {
                    type: 'integer',
                    minimum: 1,
                    maximum: 10,
                    default: 5,
                    description: 'Maximum number of tags to apply'
                },
                includeRelated: {
                    type: 'boolean',
                    default: false,
                    description: 'Include related entity context'
                },
                forceReTag: {
                    type: 'boolean',
                    default: false,
                    description: 'Remove existing tags before applying new ones'
                }
            }
        }
    }
} as const;

export const $BatchTagRequest = {
    type: 'object',
    required: ['entities'],
    properties: {
        entities: {
            type: 'array',
            minItems: 1,
            maxItems: 100,
            items: {
                type: 'object',
                required: ['type', 'id'],
                properties: {
                    type: {
                        '$ref': '#/components/schemas/EntityType'
                    },
                    id: {
                        type: 'string'
                    },
                    content: {
                        type: 'string',
                        description: 'Optional content override'
                    },
                    metadata: {
                        type: 'object',
                        description: 'Additional metadata'
                    }
                }
            }
        },
        options: {
            type: 'object',
            properties: {
                aiProvider: {
                    type: 'string',
                    enum: ['claude', 'openai']
                },
                confidenceThreshold: {
                    type: 'number',
                    minimum: 0,
                    maximum: 1,
                    default: 0.7
                },
                maxTags: {
                    type: 'integer',
                    minimum: 1,
                    maximum: 10,
                    default: 5
                },
                includeRelated: {
                    type: 'boolean',
                    default: false
                },
                forceReTag: {
                    type: 'boolean',
                    default: false
                }
            }
        }
    }
} as const;

export const $ReTagRequest = {
    type: 'object',
    required: ['filter'],
    properties: {
        filter: {
            type: 'object',
            properties: {
                entityType: {
                    '$ref': '#/components/schemas/EntityType'
                },
                dateRange: {
                    type: 'object',
                    required: ['start', 'end'],
                    properties: {
                        start: {
                            type: 'string',
                            format: 'date'
                        },
                        end: {
                            type: 'string',
                            format: 'date'
                        }
                    }
                },
                tags: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'Filter by existing tags'
                },
                hasNoTags: {
                    type: 'boolean',
                    description: 'Include only entities with no tags'
                }
            }
        },
        options: {
            type: 'object',
            properties: {
                method: {
                    type: 'string',
                    enum: ['ai', 'pattern'],
                    default: 'ai'
                },
                batchSize: {
                    type: 'integer',
                    minimum: 1,
                    maximum: 1000,
                    default: 100
                },
                dryRun: {
                    type: 'boolean',
                    default: false,
                    description: 'Preview changes without applying'
                }
            }
        }
    }
} as const;

export const $TagFeedback = {
    type: 'object',
    required: ['entityType', 'entityId', 'entityTagId', 'feedback'],
    properties: {
        entityType: {
            '$ref': '#/components/schemas/EntityType'
        },
        entityId: {
            type: 'string'
        },
        entityTagId: {
            type: 'string',
            format: 'uuid'
        },
        feedback: {
            type: 'object',
            required: ['isCorrect'],
            properties: {
                isCorrect: {
                    type: 'boolean',
                    description: 'Whether the tag is correct'
                },
                suggestedTagId: {
                    type: 'string',
                    format: 'uuid',
                    description: 'Alternative tag suggestion'
                },
                reason: {
                    type: 'string',
                    description: 'Reason for feedback'
                },
                confidence: {
                    type: 'number',
                    minimum: 0,
                    maximum: 1,
                    description: 'Confidence in feedback'
                }
            }
        }
    }
} as const;

export const $TagResponse = {
    type: 'object',
    required: ['success'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/Tag'
        },
        error: {
            type: 'object',
            properties: {
                code: {
                    type: 'string'
                },
                message: {
                    type: 'string'
                },
                details: {
                    type: 'object'
                }
            }
        }
    }
} as const;

export const $TagListResponse = {
    type: 'object',
    required: ['success', 'pagination'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Tag'
            }
        },
        pagination: {
            '$ref': '#/components/schemas/PaginationMeta'
        },
        error: {
            type: 'object',
            properties: {
                code: {
                    type: 'string'
                },
                message: {
                    type: 'string'
                }
            }
        }
    }
} as const;

export const $TagSearchResponse = {
    type: 'object',
    required: ['success'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'array',
            items: {
                allOf: [
                    {
                        '$ref': '#/components/schemas/Tag'
                    },
                    {
                        type: 'object',
                        properties: {
                            path: {
                                type: 'string',
                                description: 'Hierarchical path for display'
                            },
                            score: {
                                type: 'number',
                                description: 'Relevance score'
                            }
                        }
                    }
                ]
            }
        }
    }
} as const;

export const $EntityTagsResponse = {
    type: 'object',
    required: ['success'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            required: ['entity', 'tags'],
            properties: {
                entity: {
                    type: 'object',
                    required: ['type', 'id'],
                    properties: {
                        type: {
                            '$ref': '#/components/schemas/EntityType'
                        },
                        id: {
                            type: 'string'
                        },
                        preview: {
                            type: 'string',
                            description: 'Entity preview text'
                        }
                    }
                },
                tags: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/EntityTagResponse'
                    }
                }
            }
        }
    }
} as const;

export const $TagEntityResponse = {
    type: 'object',
    required: ['success'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            required: ['entity', 'tags', 'processingTime'],
            properties: {
                entity: {
                    type: 'object',
                    required: ['type', 'id'],
                    properties: {
                        type: {
                            '$ref': '#/components/schemas/EntityType'
                        },
                        id: {
                            type: 'string'
                        }
                    }
                },
                tags: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/EntityTagResponse'
                    }
                },
                processingTime: {
                    type: 'number',
                    description: 'Processing time in milliseconds'
                },
                aiProvider: {
                    type: 'string',
                    description: 'AI provider used'
                }
            }
        }
    }
} as const;

export const $BatchTagResponse = {
    type: 'object',
    required: ['success'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            required: ['results', 'summary'],
            properties: {
                results: {
                    type: 'array',
                    items: {
                        type: 'object',
                        required: ['entityId', 'status', 'processingTime'],
                        properties: {
                            entityId: {
                                type: 'string'
                            },
                            status: {
                                type: 'string',
                                enum: ['success', 'failed', 'skipped']
                            },
                            tags: {
                                type: 'array',
                                items: {
                                    '$ref': '#/components/schemas/EntityTagResponse'
                                }
                            },
                            error: {
                                type: 'string'
                            },
                            processingTime: {
                                type: 'number'
                            }
                        }
                    }
                },
                summary: {
                    type: 'object',
                    required: ['total', 'successful', 'failed', 'skipped', 'totalProcessingTime'],
                    properties: {
                        total: {
                            type: 'integer'
                        },
                        successful: {
                            type: 'integer'
                        },
                        failed: {
                            type: 'integer'
                        },
                        skipped: {
                            type: 'integer'
                        },
                        totalProcessingTime: {
                            type: 'number'
                        }
                    }
                }
            }
        }
    }
} as const;

export const $ReTagResponse = {
    type: 'object',
    required: ['success'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            required: ['processed', 'tagged', 'failed', 'skipped'],
            properties: {
                processed: {
                    type: 'integer',
                    description: 'Total entities processed'
                },
                tagged: {
                    type: 'integer',
                    description: 'Entities successfully tagged'
                },
                failed: {
                    type: 'integer',
                    description: 'Entities that failed'
                },
                skipped: {
                    type: 'integer',
                    description: 'Entities skipped'
                },
                errors: {
                    type: 'array',
                    items: {
                        type: 'object',
                        required: ['entityId', 'error'],
                        properties: {
                            entityId: {
                                type: 'string'
                            },
                            error: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    }
} as const;

export const $AccuracyMetrics = {
    type: 'object',
    required: ['success'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            required: ['overall', 'byEntityType', 'byMethod'],
            properties: {
                overall: {
                    type: 'object',
                    required: ['accuracy', 'totalTags', 'verifiedTags', 'correctTags'],
                    properties: {
                        accuracy: {
                            type: 'number',
                            minimum: 0,
                            maximum: 1,
                            description: 'Overall accuracy rate'
                        },
                        totalTags: {
                            type: 'integer',
                            description: 'Total number of tags applied'
                        },
                        verifiedTags: {
                            type: 'integer',
                            description: 'Number of verified tags'
                        },
                        correctTags: {
                            type: 'integer',
                            description: 'Number of correct tags'
                        }
                    }
                },
                byEntityType: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            accuracy: {
                                type: 'number'
                            },
                            totalTags: {
                                type: 'integer'
                            },
                            verifiedTags: {
                                type: 'integer'
                            },
                            correctTags: {
                                type: 'integer'
                            }
                        }
                    }
                },
                byMethod: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            accuracy: {
                                type: 'number'
                            },
                            totalTags: {
                                type: 'integer'
                            },
                            verifiedTags: {
                                type: 'integer'
                            },
                            correctTags: {
                                type: 'integer'
                            }
                        }
                    }
                }
            }
        }
    }
} as const;