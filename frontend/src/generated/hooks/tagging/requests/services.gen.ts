// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetApiTagsData, GetApiTagsResponse, PostApiTagsData, PostApiTagsResponse, GetApiTagsSearchData, GetApiTagsSearchResponse, GetApiTagsByIdData, GetApiTagsByIdResponse, PutApiTagsByIdData, PutApiTagsByIdResponse, DeleteApiTagsByIdData, DeleteApiTagsByIdResponse, GetApiEntitiesByTypeByIdTagsData, GetApiEntitiesByTypeByIdTagsResponse, PostApiEntitiesByTypeByIdTagsData, PostApiEntitiesByTypeByIdTagsResponse, PatchApiEntitiesByTypeByIdTagsByTagIdData, PatchApiEntitiesByTypeByIdTagsByTagIdResponse, DeleteApiEntitiesByTypeByIdTagsByTagIdData, DeleteApiEntitiesByTypeByIdTagsByTagIdResponse, PostApiTaggingBatchData, PostApiTaggingBatchResponse, PostApiTaggingRetagData, PostApiTaggingRetagResponse, PostApiTaggingFeedbackData, PostApiTaggingFeedbackResponse, GetApiTaggingAccuracyData, GetApiTaggingAccuracyResponse } from './types.gen';

export class TagsService {
    /**
     * List all tags
     * @param data The data for the request.
     * @param data.page Page number (1-based)
     * @param data.limit Items per page
     * @param data.search Search in tag name, code, or description
     * @param data.entityType Filter by entity type
     * @param data.parentId Filter by parent tag ID
     * @param data.isActive Filter by active status
     * @param data.sortBy Sort field
     * @param data.sortOrder Sort order
     * @returns TagListResponse List of tags with pagination
     * @throws ApiError
     */
    public static getApiTags(data: GetApiTagsData = {}): CancelablePromise<GetApiTagsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/tags',
            query: {
                page: data.page,
                limit: data.limit,
                search: data.search,
                entityType: data.entityType,
                parentId: data.parentId,
                isActive: data.isActive,
                sortBy: data.sortBy,
                sortOrder: data.sortOrder
            },
            errors: {
                400: 'Invalid query parameters',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Create a new tag
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TagResponse Tag created successfully
     * @throws ApiError
     */
    public static postApiTags(data: PostApiTagsData): CancelablePromise<PostApiTagsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/tags',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid tag data',
                401: 'Unauthorized',
                409: 'Tag code already exists'
            }
        });
    }
    
    /**
     * Search tags
     * @param data The data for the request.
     * @param data.q Search query
     * @param data.entityType Filter by entity type
     * @param data.limit Maximum results to return
     * @returns TagSearchResponse Search results with relevance scores
     * @throws ApiError
     */
    public static getApiTagsSearch(data: GetApiTagsSearchData): CancelablePromise<GetApiTagsSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/tags/search',
            query: {
                q: data.q,
                entityType: data.entityType,
                limit: data.limit
            },
            errors: {
                400: 'Invalid search parameters',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get tag by ID
     * @param data The data for the request.
     * @param data.id Tag ID
     * @returns TagResponse Tag details
     * @throws ApiError
     */
    public static getApiTagsById(data: GetApiTagsByIdData): CancelablePromise<GetApiTagsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/tags/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Tag not found'
            }
        });
    }
    
    /**
     * Update tag
     * @param data The data for the request.
     * @param data.id Tag ID
     * @param data.requestBody
     * @returns TagResponse Tag updated successfully
     * @throws ApiError
     */
    public static putApiTagsById(data: PutApiTagsByIdData): CancelablePromise<PutApiTagsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/tags/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid tag data',
                401: 'Unauthorized',
                404: 'Tag not found'
            }
        });
    }
    
    /**
     * Delete tag
     * @param data The data for the request.
     * @param data.id Tag ID
     * @param data.reassignTo Reassign existing entity tags to this tag ID
     * @returns void Tag deleted successfully
     * @throws ApiError
     */
    public static deleteApiTagsById(data: DeleteApiTagsByIdData): CancelablePromise<DeleteApiTagsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/tags/{id}',
            path: {
                id: data.id
            },
            query: {
                reassignTo: data.reassignTo
            },
            errors: {
                400: 'Cannot delete tag (has children or other constraints)',
                401: 'Unauthorized',
                404: 'Tag not found'
            }
        });
    }
    
}

export class EntityTagsService {
    /**
     * Get entity tags
     * @param data The data for the request.
     * @param data.type Entity type
     * @param data.id Entity ID
     * @returns EntityTagsResponse Entity tags
     * @throws ApiError
     */
    public static getApiEntitiesByTypeByIdTags(data: GetApiEntitiesByTypeByIdTagsData): CancelablePromise<GetApiEntitiesByTypeByIdTagsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/entities/{type}/{id}/tags',
            path: {
                type: data.type,
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Entity not found'
            }
        });
    }
    
    /**
     * Tag an entity
     * @param data The data for the request.
     * @param data.type Entity type
     * @param data.id Entity ID
     * @param data.requestBody
     * @returns TagEntityResponse Entity tagged successfully
     * @throws ApiError
     */
    public static postApiEntitiesByTypeByIdTags(data: PostApiEntitiesByTypeByIdTagsData): CancelablePromise<PostApiEntitiesByTypeByIdTagsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/entities/{type}/{id}/tags',
            path: {
                type: data.type,
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid tagging request',
                401: 'Unauthorized',
                404: 'Entity not found'
            }
        });
    }
    
    /**
     * Update entity tag
     * @param data The data for the request.
     * @param data.type Entity type
     * @param data.id Entity ID
     * @param data.tagId Tag ID
     * @param data.requestBody
     * @returns EntityTagResponse Entity tag updated successfully
     * @throws ApiError
     */
    public static patchApiEntitiesByTypeByIdTagsByTagId(data: PatchApiEntitiesByTypeByIdTagsByTagIdData): CancelablePromise<PatchApiEntitiesByTypeByIdTagsByTagIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/entities/{type}/{id}/tags/{tagId}',
            path: {
                type: data.type,
                id: data.id,
                tagId: data.tagId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid update data',
                401: 'Unauthorized',
                404: 'Entity or tag not found'
            }
        });
    }
    
    /**
     * Remove tag from entity
     * @param data The data for the request.
     * @param data.type Entity type
     * @param data.id Entity ID
     * @param data.tagId Tag ID
     * @returns void Tag removed from entity successfully
     * @throws ApiError
     */
    public static deleteApiEntitiesByTypeByIdTagsByTagId(data: DeleteApiEntitiesByTypeByIdTagsByTagIdData): CancelablePromise<DeleteApiEntitiesByTypeByIdTagsByTagIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/entities/{type}/{id}/tags/{tagId}',
            path: {
                type: data.type,
                id: data.id,
                tagId: data.tagId
            },
            errors: {
                401: 'Unauthorized',
                404: 'Entity or tag not found'
            }
        });
    }
    
}

export class BatchOperationsService {
    /**
     * Batch tag multiple entities
     * @param data The data for the request.
     * @param data.requestBody
     * @returns BatchTagResponse Batch tagging results
     * @throws ApiError
     */
    public static postApiTaggingBatch(data: PostApiTaggingBatchData): CancelablePromise<PostApiTaggingBatchResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/tagging/batch',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid batch request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Re-tag entities based on criteria
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ReTagResponse Re-tagging results
     * @throws ApiError
     */
    public static postApiTaggingRetag(data: PostApiTaggingRetagData): CancelablePromise<PostApiTaggingRetagResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/tagging/retag',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid retag request',
                401: 'Unauthorized'
            }
        });
    }
    
}

export class FeedbackService {
    /**
     * Submit feedback on tag accuracy
     * @param data The data for the request.
     * @param data.requestBody
     * @returns StandardResponse Feedback submitted successfully
     * @throws ApiError
     */
    public static postApiTaggingFeedback(data: PostApiTaggingFeedbackData): CancelablePromise<PostApiTaggingFeedbackResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/tagging/feedback',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid feedback data',
                401: 'Unauthorized'
            }
        });
    }
    
}

export class MetricsService {
    /**
     * Get system accuracy metrics
     * @param data The data for the request.
     * @param data.entityType Filter by entity type
     * @param data.period Time period for metrics
     * @returns AccuracyMetrics Accuracy metrics
     * @throws ApiError
     */
    public static getApiTaggingAccuracy(data: GetApiTaggingAccuracyData = {}): CancelablePromise<GetApiTaggingAccuracyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/tagging/accuracy',
            query: {
                entityType: data.entityType,
                period: data.period
            },
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
}