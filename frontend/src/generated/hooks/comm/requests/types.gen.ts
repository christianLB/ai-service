// This file is auto-generated by @hey-api/openapi-ts

/**
 * Telegram bot update object
 */
export type TelegramUpdate = {
    update_id?: number;
    message?: {
        message_id?: number;
        from?: {
            id?: number;
            first_name?: string;
            username?: string;
        };
        chat?: {
            id?: number;
            type?: string;
        };
        text?: string;
        date?: number;
    };
};

export type SendTelegramMessageRequest = {
    /**
     * Telegram chat ID
     */
    chatId: string;
    /**
     * Message text
     */
    text: string;
    /**
     * Text parsing mode
     */
    parseMode?: 'Markdown' | 'HTML';
    /**
     * Inline keyboard markup
     */
    replyMarkup?: {
        [key: string]: unknown;
    };
};

/**
 * Text parsing mode
 */
export type parseMode = 'Markdown' | 'HTML';

export type SendAlertRequest = {
    type: AlertType;
    message: string;
    priority: AlertPriority;
    details?: {
        [key: string]: unknown;
    };
};

export type SetupWebhookRequest = {
    /**
     * Webhook URL
     */
    url: string;
    /**
     * Update types to receive
     */
    allowedUpdates?: Array<(string)>;
};

export type TelegramStatus = {
    botUsername?: string;
    webhookUrl?: string;
    isActive?: boolean;
    lastUpdate?: string;
    pendingUpdates?: number;
};

export type SendInvoiceEmailRequest = {
    to: string;
    invoiceId: string;
    cc?: Array<(string)>;
    bcc?: Array<(string)>;
    language?: 'en' | 'es';
    attachPdf?: boolean;
};

export type language = 'en' | 'es';

export type SendReminderRequest = {
    to: string;
    invoiceId: string;
    daysOverdue: number;
    language?: 'en' | 'es';
};

export type SendReceiptRequest = {
    to: string;
    paymentId: string;
    amount: number;
    currency?: string;
    language?: 'en' | 'es';
};

export type EmailTemplate = {
    id?: string;
    name?: string;
    subject?: string;
    language?: string;
    variables?: Array<(string)>;
};

export type EmailResult = {
    messageId?: string;
    accepted?: Array<(string)>;
    rejected?: Array<(string)>;
};

export type SendWebSocketMessageRequest = {
    userId: string;
    event: string;
    data: {
        [key: string]: unknown;
    };
};

export type BroadcastWebSocketRequest = {
    event: string;
    data: {
        [key: string]: unknown;
    };
    /**
     * Optional list of user IDs to broadcast to
     */
    userIds?: Array<(string)>;
};

export type ConnectedUser = {
    userId?: string;
    socketId?: string;
    connectedAt?: string;
    rooms?: Array<(string)>;
};

export type AlertType = 'transaction' | 'sync_error' | 'unusual_spending' | 'system_error' | 'security' | 'performance';

export type NotificationType = 'alert' | 'reminder' | 'system' | 'payment' | 'invoice' | 'general';

export type AlertPriority = 'critical' | 'high' | 'medium' | 'low';

export type Alert = {
    id: string;
    type: AlertType;
    message: string;
    priority: AlertPriority;
    details?: {
        [key: string]: unknown;
    };
    acknowledged?: boolean;
    acknowledgedBy?: string;
    acknowledgedAt?: string;
    createdAt: string;
};

export type CreateAlertRequest = {
    type: AlertType;
    message: string;
    priority: AlertPriority;
    details?: {
        [key: string]: unknown;
    };
    /**
     * Notification channels
     */
    channels?: Array<('telegram' | 'email' | 'websocket')>;
};

export type UpdateAlertRequest = {
    type?: AlertType;
    message?: string;
    priority?: AlertPriority;
    details?: {
        [key: string]: unknown;
    };
};

export type BulkDeleteAlertsRequest = {
    /**
     * Array of alert IDs to delete
     */
    ids: Array<(string)>;
};

export type Notification = {
    id: string;
    type: NotificationType;
    title: string;
    message: string;
    userId: string;
    read: boolean;
    readAt?: string;
    /**
     * Additional notification data
     */
    data?: {
        [key: string]: unknown;
    };
    /**
     * Optional expiration date
     */
    expiresAt?: string;
    createdAt: string;
    updatedAt?: string;
};

export type CreateNotificationRequest = {
    type: NotificationType;
    title: string;
    message: string;
    userId: string;
    /**
     * Additional notification data
     */
    data?: {
        [key: string]: unknown;
    };
    /**
     * Optional expiration date
     */
    expiresAt?: string;
    /**
     * Delivery channels
     */
    channels?: Array<('websocket' | 'email' | 'telegram')>;
};

export type TelegramMessageResponse = {
    success: boolean;
    data: {
        messageId?: number;
        chatId?: string;
    };
};

export type TelegramStatusResponse = {
    success: boolean;
    data: TelegramStatus;
};

export type EmailResponse = {
    success: boolean;
    data: EmailResult;
};

export type EmailTemplateListResponse = {
    success: boolean;
    data: Array<EmailTemplate>;
};

export type BroadcastResponse = {
    success: boolean;
    data: {
        delivered?: number;
        failed?: number;
    };
};

export type ConnectedUsersResponse = {
    success: boolean;
    data: Array<ConnectedUser>;
};

export type UserConnectionStatusResponse = {
    success: boolean;
    data: {
        isConnected?: boolean;
        lastSeen?: string;
    };
};

export type AlertResponse = {
    success: boolean;
    data: Alert;
};

export type AlertListResponse = {
    success: boolean;
    data: Array<Alert>;
    pagination: PaginationMeta;
};

export type NotificationResponse = {
    success: boolean;
    data: Notification;
};

export type NotificationListResponse = {
    success: boolean;
    data: Array<Notification>;
    pagination: PaginationMeta;
};

export type BulkDeleteResponse = {
    success: boolean;
    data: {
        /**
         * Number of items deleted
         */
        deleted: number;
    };
};

export type BulkUpdateResponse = {
    success: boolean;
    data: {
        /**
         * Number of items updated
         */
        updated: number;
    };
};

export type MessageResponse = {
    success: boolean;
    message: string;
};

export type PaginationMeta = {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
};

export type ErrorResponse = {
    success: boolean;
    error: {
        code: string;
        message: string;
        details?: {
            [key: string]: unknown;
        };
    };
};

/**
 * Page number
 */
export type ParameterPageParam = number;

/**
 * Items per page
 */
export type ParameterLimitParam = number;

export type PostTelegramWebhookData = {
    requestBody: TelegramUpdate;
};

export type PostTelegramWebhookResponse = MessageResponse;

export type PostTelegramSendMessageData = {
    requestBody: SendTelegramMessageRequest;
};

export type PostTelegramSendMessageResponse = TelegramMessageResponse;

export type PostTelegramSendAlertData = {
    requestBody: SendAlertRequest;
};

export type PostTelegramSendAlertResponse = MessageResponse;

export type PostTelegramSetupWebhookData = {
    requestBody: SetupWebhookRequest;
};

export type PostTelegramSetupWebhookResponse = MessageResponse;

export type GetTelegramStatusResponse = TelegramStatusResponse;

export type PostEmailSendInvoiceData = {
    requestBody: SendInvoiceEmailRequest;
};

export type PostEmailSendInvoiceResponse = EmailResponse;

export type PostEmailSendReminderData = {
    requestBody: SendReminderRequest;
};

export type PostEmailSendReminderResponse = EmailResponse;

export type PostEmailSendReceiptData = {
    requestBody: SendReceiptRequest;
};

export type PostEmailSendReceiptResponse = EmailResponse;

export type GetEmailTemplatesData = {
    /**
     * Template language
     */
    language?: 'en' | 'es';
};

export type GetEmailTemplatesResponse = EmailTemplateListResponse;

export type PostWebsocketSendToUserData = {
    requestBody: SendWebSocketMessageRequest;
};

export type PostWebsocketSendToUserResponse = MessageResponse;

export type PostWebsocketBroadcastData = {
    requestBody: BroadcastWebSocketRequest;
};

export type PostWebsocketBroadcastResponse = BroadcastResponse;

export type GetWebsocketConnectedUsersResponse = ConnectedUsersResponse;

export type GetWebsocketUserStatusByUserIdData = {
    /**
     * User ID to check
     */
    userId: string;
};

export type GetWebsocketUserStatusByUserIdResponse = UserConnectionStatusResponse;

export type GetAlertsData = {
    /**
     * Filter by acknowledgment status
     */
    acknowledged?: boolean;
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Filter by priority
     */
    priority?: AlertPriority;
    /**
     * Filter by alert type
     */
    type?: AlertType;
};

export type GetAlertsResponse = AlertListResponse;

export type PostAlertsData = {
    requestBody: CreateAlertRequest;
};

export type PostAlertsResponse = AlertResponse;

export type GetAlertsByIdData = {
    /**
     * Alert ID
     */
    id: string;
};

export type GetAlertsByIdResponse = AlertResponse;

export type PutAlertsByIdData = {
    /**
     * Alert ID
     */
    id: string;
    requestBody: UpdateAlertRequest;
};

export type PutAlertsByIdResponse = AlertResponse;

export type DeleteAlertsByIdData = {
    /**
     * Alert ID
     */
    id: string;
};

export type DeleteAlertsByIdResponse = MessageResponse;

export type DeleteAlertsBulkDeleteData = {
    requestBody: BulkDeleteAlertsRequest;
};

export type DeleteAlertsBulkDeleteResponse = BulkDeleteResponse;

export type GetAlertsSearchData = {
    /**
     * Start date filter
     */
    from?: string;
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Filter by priority
     */
    priority?: AlertPriority;
    /**
     * Search query
     */
    query?: string;
    /**
     * End date filter
     */
    to?: string;
    /**
     * Filter by alert type
     */
    type?: AlertType;
};

export type GetAlertsSearchResponse = AlertListResponse;

export type GetAlertsActiveData = {
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Filter by priority
     */
    priority?: AlertPriority;
};

export type GetAlertsActiveResponse = AlertListResponse;

export type GetAlertsHistoryData = {
    /**
     * Start date filter
     */
    from?: string;
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * End date filter
     */
    to?: string;
    /**
     * Filter by alert type
     */
    type?: AlertType;
};

export type GetAlertsHistoryResponse = AlertListResponse;

export type PostAlertsByAlertIdAcknowledgeData = {
    /**
     * Alert ID
     */
    alertId: string;
};

export type PostAlertsByAlertIdAcknowledgeResponse = AlertResponse;

export type GetNotificationsData = {
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Filter by read status
     */
    read?: boolean;
    /**
     * Filter by notification type
     */
    type?: NotificationType;
    /**
     * Filter by user ID
     */
    userId?: string;
};

export type GetNotificationsResponse = NotificationListResponse;

export type PostNotificationsData = {
    requestBody: CreateNotificationRequest;
};

export type PostNotificationsResponse = NotificationResponse;

export type GetNotificationsByIdData = {
    /**
     * Notification ID
     */
    id: string;
};

export type GetNotificationsByIdResponse = NotificationResponse;

export type DeleteNotificationsByIdData = {
    /**
     * Notification ID
     */
    id: string;
};

export type DeleteNotificationsByIdResponse = MessageResponse;

export type PutNotificationsByIdReadData = {
    /**
     * Notification ID
     */
    id: string;
};

export type PutNotificationsByIdReadResponse = NotificationResponse;

export type PutNotificationsReadAllData = {
    /**
     * Optional user ID to mark notifications for specific user
     */
    userId?: string;
};

export type PutNotificationsReadAllResponse = BulkUpdateResponse;

export type $OpenApiTs = {
    '/telegram/webhook': {
        post: {
            req: PostTelegramWebhookData;
            res: {
                /**
                 * Webhook processed successfully
                 */
                200: MessageResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
            };
        };
    };
    '/telegram/send-message': {
        post: {
            req: PostTelegramSendMessageData;
            res: {
                /**
                 * Message sent successfully
                 */
                200: TelegramMessageResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/telegram/send-alert': {
        post: {
            req: PostTelegramSendAlertData;
            res: {
                /**
                 * Alert sent successfully
                 */
                200: MessageResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/telegram/setup-webhook': {
        post: {
            req: PostTelegramSetupWebhookData;
            res: {
                /**
                 * Webhook configured successfully
                 */
                200: MessageResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/telegram/status': {
        get: {
            res: {
                /**
                 * Status retrieved successfully
                 */
                200: TelegramStatusResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/email/send-invoice': {
        post: {
            req: PostEmailSendInvoiceData;
            res: {
                /**
                 * Email sent successfully
                 */
                200: EmailResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/email/send-reminder': {
        post: {
            req: PostEmailSendReminderData;
            res: {
                /**
                 * Reminder sent successfully
                 */
                200: EmailResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/email/send-receipt': {
        post: {
            req: PostEmailSendReceiptData;
            res: {
                /**
                 * Receipt sent successfully
                 */
                200: EmailResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/email/templates': {
        get: {
            req: GetEmailTemplatesData;
            res: {
                /**
                 * Templates retrieved successfully
                 */
                200: EmailTemplateListResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/websocket/send-to-user': {
        post: {
            req: PostWebsocketSendToUserData;
            res: {
                /**
                 * Message sent successfully
                 */
                200: MessageResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/websocket/broadcast': {
        post: {
            req: PostWebsocketBroadcastData;
            res: {
                /**
                 * Message broadcast successfully
                 */
                200: BroadcastResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/websocket/connected-users': {
        get: {
            res: {
                /**
                 * Connected users retrieved successfully
                 */
                200: ConnectedUsersResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/websocket/user-status/{userId}': {
        get: {
            req: GetWebsocketUserStatusByUserIdData;
            res: {
                /**
                 * Status retrieved successfully
                 */
                200: UserConnectionStatusResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
    };
    '/alerts': {
        get: {
            req: GetAlertsData;
            res: {
                /**
                 * Alerts retrieved successfully
                 */
                200: AlertListResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
        post: {
            req: PostAlertsData;
            res: {
                /**
                 * Alert created successfully
                 */
                201: AlertResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/alerts/{id}': {
        get: {
            req: GetAlertsByIdData;
            res: {
                /**
                 * Alert retrieved successfully
                 */
                200: AlertResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
                /**
                 * Internal server error
                 */
                500: ErrorResponse;
            };
        };
        put: {
            req: PutAlertsByIdData;
            res: {
                /**
                 * Alert updated successfully
                 */
                200: AlertResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
        delete: {
            req: DeleteAlertsByIdData;
            res: {
                /**
                 * Alert deleted successfully
                 */
                200: MessageResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
    };
    '/alerts/bulk-delete': {
        delete: {
            req: DeleteAlertsBulkDeleteData;
            res: {
                /**
                 * Alerts deleted successfully
                 */
                200: BulkDeleteResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/alerts/search': {
        get: {
            req: GetAlertsSearchData;
            res: {
                /**
                 * Search results retrieved successfully
                 */
                200: AlertListResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/alerts/active': {
        get: {
            req: GetAlertsActiveData;
            res: {
                /**
                 * Active alerts retrieved successfully
                 */
                200: AlertListResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/alerts/history': {
        get: {
            req: GetAlertsHistoryData;
            res: {
                /**
                 * Alert history retrieved successfully
                 */
                200: AlertListResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/alerts/{alertId}/acknowledge': {
        post: {
            req: PostAlertsByAlertIdAcknowledgeData;
            res: {
                /**
                 * Alert acknowledged successfully
                 */
                200: AlertResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
    };
    '/notifications': {
        get: {
            req: GetNotificationsData;
            res: {
                /**
                 * Notifications retrieved successfully
                 */
                200: NotificationListResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Internal server error
                 */
                500: ErrorResponse;
            };
        };
        post: {
            req: PostNotificationsData;
            res: {
                /**
                 * Notification created successfully
                 */
                201: NotificationResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Internal server error
                 */
                500: ErrorResponse;
            };
        };
    };
    '/notifications/{id}': {
        get: {
            req: GetNotificationsByIdData;
            res: {
                /**
                 * Notification retrieved successfully
                 */
                200: NotificationResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
        delete: {
            req: DeleteNotificationsByIdData;
            res: {
                /**
                 * Notification deleted successfully
                 */
                200: MessageResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
    };
    '/notifications/{id}/read': {
        put: {
            req: PutNotificationsByIdReadData;
            res: {
                /**
                 * Notification marked as read successfully
                 */
                200: NotificationResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
    };
    '/notifications/read-all': {
        put: {
            req: PutNotificationsReadAllData;
            res: {
                /**
                 * All notifications marked as read successfully
                 */
                200: BulkUpdateResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
};