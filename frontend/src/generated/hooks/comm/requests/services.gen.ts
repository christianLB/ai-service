// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PostTelegramWebhookData, PostTelegramWebhookResponse, PostTelegramSendMessageData, PostTelegramSendMessageResponse, PostTelegramSendAlertData, PostTelegramSendAlertResponse, PostTelegramSetupWebhookData, PostTelegramSetupWebhookResponse, GetTelegramStatusResponse, PostEmailSendInvoiceData, PostEmailSendInvoiceResponse, PostEmailSendReminderData, PostEmailSendReminderResponse, PostEmailSendReceiptData, PostEmailSendReceiptResponse, GetEmailTemplatesData, GetEmailTemplatesResponse, PostWebsocketSendToUserData, PostWebsocketSendToUserResponse, PostWebsocketBroadcastData, PostWebsocketBroadcastResponse, GetWebsocketConnectedUsersResponse, GetWebsocketUserStatusByUserIdData, GetWebsocketUserStatusByUserIdResponse, GetAlertsData, GetAlertsResponse, PostAlertsData, PostAlertsResponse, GetAlertsByIdData, GetAlertsByIdResponse, PutAlertsByIdData, PutAlertsByIdResponse, DeleteAlertsByIdData, DeleteAlertsByIdResponse, DeleteAlertsBulkDeleteData, DeleteAlertsBulkDeleteResponse, GetAlertsSearchData, GetAlertsSearchResponse, GetAlertsActiveData, GetAlertsActiveResponse, GetAlertsHistoryData, GetAlertsHistoryResponse, PostAlertsByAlertIdAcknowledgeData, PostAlertsByAlertIdAcknowledgeResponse, GetNotificationsData, GetNotificationsResponse, PostNotificationsData, PostNotificationsResponse, GetNotificationsByIdData, GetNotificationsByIdResponse, DeleteNotificationsByIdData, DeleteNotificationsByIdResponse, PutNotificationsByIdReadData, PutNotificationsByIdReadResponse, PutNotificationsReadAllData, PutNotificationsReadAllResponse } from './types.gen';

export class TelegramService {
    /**
     * Receive Telegram webhook
     * Endpoint for Telegram bot updates
     * @param data The data for the request.
     * @param data.requestBody
     * @returns MessageResponse Webhook processed successfully
     * @throws ApiError
     */
    public static postTelegramWebhook(data: PostTelegramWebhookData): CancelablePromise<PostTelegramWebhookResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/telegram/webhook',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request'
            }
        });
    }
    
    /**
     * Send Telegram message
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TelegramMessageResponse Message sent successfully
     * @throws ApiError
     */
    public static postTelegramSendMessage(data: PostTelegramSendMessageData): CancelablePromise<PostTelegramSendMessageResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/telegram/send-message',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Send system alert via Telegram
     * @param data The data for the request.
     * @param data.requestBody
     * @returns MessageResponse Alert sent successfully
     * @throws ApiError
     */
    public static postTelegramSendAlert(data: PostTelegramSendAlertData): CancelablePromise<PostTelegramSendAlertResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/telegram/send-alert',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Configure Telegram webhook
     * @param data The data for the request.
     * @param data.requestBody
     * @returns MessageResponse Webhook configured successfully
     * @throws ApiError
     */
    public static postTelegramSetupWebhook(data: PostTelegramSetupWebhookData): CancelablePromise<PostTelegramSetupWebhookResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/telegram/setup-webhook',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get Telegram service status
     * @returns TelegramStatusResponse Status retrieved successfully
     * @throws ApiError
     */
    public static getTelegramStatus(): CancelablePromise<GetTelegramStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/telegram/status',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
}

export class EmailService {
    /**
     * Send invoice email
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EmailResponse Email sent successfully
     * @throws ApiError
     */
    public static postEmailSendInvoice(data: PostEmailSendInvoiceData): CancelablePromise<PostEmailSendInvoiceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/email/send-invoice',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Send payment reminder
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EmailResponse Reminder sent successfully
     * @throws ApiError
     */
    public static postEmailSendReminder(data: PostEmailSendReminderData): CancelablePromise<PostEmailSendReminderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/email/send-reminder',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Send payment receipt
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EmailResponse Receipt sent successfully
     * @throws ApiError
     */
    public static postEmailSendReceipt(data: PostEmailSendReceiptData): CancelablePromise<PostEmailSendReceiptResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/email/send-receipt',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * List email templates
     * @param data The data for the request.
     * @param data.language Template language
     * @returns EmailTemplateListResponse Templates retrieved successfully
     * @throws ApiError
     */
    public static getEmailTemplates(data: GetEmailTemplatesData = {}): CancelablePromise<GetEmailTemplatesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/email/templates',
            query: {
                language: data.language
            },
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
}

export class WebSocketService {
    /**
     * Send WebSocket message to user
     * @param data The data for the request.
     * @param data.requestBody
     * @returns MessageResponse Message sent successfully
     * @throws ApiError
     */
    public static postWebsocketSendToUser(data: PostWebsocketSendToUserData): CancelablePromise<PostWebsocketSendToUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/websocket/send-to-user',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Broadcast WebSocket message
     * @param data The data for the request.
     * @param data.requestBody
     * @returns BroadcastResponse Message broadcast successfully
     * @throws ApiError
     */
    public static postWebsocketBroadcast(data: PostWebsocketBroadcastData): CancelablePromise<PostWebsocketBroadcastResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/websocket/broadcast',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get connected users
     * @returns ConnectedUsersResponse Connected users retrieved successfully
     * @throws ApiError
     */
    public static getWebsocketConnectedUsers(): CancelablePromise<GetWebsocketConnectedUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/websocket/connected-users',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Check user connection status
     * @param data The data for the request.
     * @param data.userId User ID to check
     * @returns UserConnectionStatusResponse Status retrieved successfully
     * @throws ApiError
     */
    public static getWebsocketUserStatusByUserId(data: GetWebsocketUserStatusByUserIdData): CancelablePromise<GetWebsocketUserStatusByUserIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/websocket/user-status/{userId}',
            path: {
                userId: data.userId
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
}

export class AlertsService {
    /**
     * List alerts
     * @param data The data for the request.
     * @param data.page Page number
     * @param data.limit Items per page
     * @param data.type Filter by alert type
     * @param data.priority Filter by priority
     * @param data.acknowledged Filter by acknowledgment status
     * @returns AlertListResponse Alerts retrieved successfully
     * @throws ApiError
     */
    public static getAlerts(data: GetAlertsData = {}): CancelablePromise<GetAlertsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/alerts',
            query: {
                page: data.page,
                limit: data.limit,
                type: data.type,
                priority: data.priority,
                acknowledged: data.acknowledged
            },
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Create alert
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AlertResponse Alert created successfully
     * @throws ApiError
     */
    public static postAlerts(data: PostAlertsData): CancelablePromise<PostAlertsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/alerts',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get single alert
     * @param data The data for the request.
     * @param data.id Alert ID
     * @returns AlertResponse Alert retrieved successfully
     * @throws ApiError
     */
    public static getAlertsById(data: GetAlertsByIdData): CancelablePromise<GetAlertsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/alerts/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Update alert
     * @param data The data for the request.
     * @param data.id Alert ID
     * @param data.requestBody
     * @returns AlertResponse Alert updated successfully
     * @throws ApiError
     */
    public static putAlertsById(data: PutAlertsByIdData): CancelablePromise<PutAlertsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/alerts/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Delete alert
     * @param data The data for the request.
     * @param data.id Alert ID
     * @returns MessageResponse Alert deleted successfully
     * @throws ApiError
     */
    public static deleteAlertsById(data: DeleteAlertsByIdData): CancelablePromise<DeleteAlertsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/alerts/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Bulk delete alerts
     * @param data The data for the request.
     * @param data.requestBody
     * @returns BulkDeleteResponse Alerts deleted successfully
     * @throws ApiError
     */
    public static deleteAlertsBulkDelete(data: DeleteAlertsBulkDeleteData): CancelablePromise<DeleteAlertsBulkDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/alerts/bulk-delete',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Search alerts
     * @param data The data for the request.
     * @param data.page Page number
     * @param data.limit Items per page
     * @param data.query Search query
     * @param data.type Filter by alert type
     * @param data.priority Filter by priority
     * @param data.from Start date filter
     * @param data.to End date filter
     * @returns AlertListResponse Search results retrieved successfully
     * @throws ApiError
     */
    public static getAlertsSearch(data: GetAlertsSearchData = {}): CancelablePromise<GetAlertsSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/alerts/search',
            query: {
                page: data.page,
                limit: data.limit,
                query: data.query,
                type: data.type,
                priority: data.priority,
                from: data.from,
                to: data.to
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get active alerts
     * @param data The data for the request.
     * @param data.page Page number
     * @param data.limit Items per page
     * @param data.priority Filter by priority
     * @returns AlertListResponse Active alerts retrieved successfully
     * @throws ApiError
     */
    public static getAlertsActive(data: GetAlertsActiveData = {}): CancelablePromise<GetAlertsActiveResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/alerts/active',
            query: {
                page: data.page,
                limit: data.limit,
                priority: data.priority
            },
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get alert history
     * @param data The data for the request.
     * @param data.page Page number
     * @param data.limit Items per page
     * @param data.from Start date filter
     * @param data.to End date filter
     * @param data.type Filter by alert type
     * @returns AlertListResponse Alert history retrieved successfully
     * @throws ApiError
     */
    public static getAlertsHistory(data: GetAlertsHistoryData = {}): CancelablePromise<GetAlertsHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/alerts/history',
            query: {
                page: data.page,
                limit: data.limit,
                from: data.from,
                to: data.to,
                type: data.type
            },
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Acknowledge alert
     * @param data The data for the request.
     * @param data.alertId Alert ID
     * @returns AlertResponse Alert acknowledged successfully
     * @throws ApiError
     */
    public static postAlertsByAlertIdAcknowledge(data: PostAlertsByAlertIdAcknowledgeData): CancelablePromise<PostAlertsByAlertIdAcknowledgeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/alerts/{alertId}/acknowledge',
            path: {
                alertId: data.alertId
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
}

export class NotificationsService {
    /**
     * List notifications
     * @param data The data for the request.
     * @param data.page Page number
     * @param data.limit Items per page
     * @param data.type Filter by notification type
     * @param data.read Filter by read status
     * @param data.userId Filter by user ID
     * @returns NotificationListResponse Notifications retrieved successfully
     * @throws ApiError
     */
    public static getNotifications(data: GetNotificationsData = {}): CancelablePromise<GetNotificationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/notifications',
            query: {
                page: data.page,
                limit: data.limit,
                type: data.type,
                read: data.read,
                userId: data.userId
            },
            errors: {
                401: 'Unauthorized',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Create notification
     * @param data The data for the request.
     * @param data.requestBody
     * @returns NotificationResponse Notification created successfully
     * @throws ApiError
     */
    public static postNotifications(data: PostNotificationsData): CancelablePromise<PostNotificationsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/notifications',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Get single notification
     * @param data The data for the request.
     * @param data.id Notification ID
     * @returns NotificationResponse Notification retrieved successfully
     * @throws ApiError
     */
    public static getNotificationsById(data: GetNotificationsByIdData): CancelablePromise<GetNotificationsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/notifications/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Delete notification
     * @param data The data for the request.
     * @param data.id Notification ID
     * @returns MessageResponse Notification deleted successfully
     * @throws ApiError
     */
    public static deleteNotificationsById(data: DeleteNotificationsByIdData): CancelablePromise<DeleteNotificationsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/notifications/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Mark notification as read
     * @param data The data for the request.
     * @param data.id Notification ID
     * @returns NotificationResponse Notification marked as read successfully
     * @throws ApiError
     */
    public static putNotificationsByIdRead(data: PutNotificationsByIdReadData): CancelablePromise<PutNotificationsByIdReadResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/notifications/{id}/read',
            path: {
                id: data.id
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Mark all notifications as read
     * @param data The data for the request.
     * @param data.userId Optional user ID to mark notifications for specific user
     * @returns BulkUpdateResponse All notifications marked as read successfully
     * @throws ApiError
     */
    public static putNotificationsReadAll(data: PutNotificationsReadAllData = {}): CancelablePromise<PutNotificationsReadAllResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/notifications/read-all',
            query: {
                userId: data.userId
            },
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
}