// This file is auto-generated by @hey-api/openapi-ts

export const $TelegramUpdate = {
    type: 'object',
    description: 'Telegram bot update object',
    properties: {
        update_id: {
            type: 'integer'
        },
        message: {
            type: 'object',
            properties: {
                message_id: {
                    type: 'integer'
                },
                from: {
                    type: 'object',
                    properties: {
                        id: {
                            type: 'integer'
                        },
                        first_name: {
                            type: 'string'
                        },
                        username: {
                            type: 'string'
                        }
                    }
                },
                chat: {
                    type: 'object',
                    properties: {
                        id: {
                            type: 'integer'
                        },
                        type: {
                            type: 'string'
                        }
                    }
                },
                text: {
                    type: 'string'
                },
                date: {
                    type: 'integer'
                }
            }
        }
    }
} as const;

export const $SendTelegramMessageRequest = {
    type: 'object',
    required: ['chatId', 'text'],
    properties: {
        chatId: {
            type: 'string',
            description: 'Telegram chat ID'
        },
        text: {
            type: 'string',
            description: 'Message text'
        },
        parseMode: {
            type: 'string',
            enum: ['Markdown', 'HTML'],
            description: 'Text parsing mode'
        },
        replyMarkup: {
            type: 'object',
            description: 'Inline keyboard markup'
        }
    }
} as const;

export const $SendAlertRequest = {
    type: 'object',
    required: ['type', 'message', 'priority'],
    properties: {
        type: {
            '$ref': '#/components/schemas/AlertType'
        },
        message: {
            type: 'string'
        },
        priority: {
            '$ref': '#/components/schemas/AlertPriority'
        },
        details: {
            type: 'object',
            additionalProperties: true
        }
    }
} as const;

export const $SetupWebhookRequest = {
    type: 'object',
    required: ['url'],
    properties: {
        url: {
            type: 'string',
            format: 'uri',
            description: 'Webhook URL'
        },
        allowedUpdates: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Update types to receive'
        }
    }
} as const;

export const $TelegramStatus = {
    type: 'object',
    properties: {
        botUsername: {
            type: 'string'
        },
        webhookUrl: {
            type: 'string'
        },
        isActive: {
            type: 'boolean'
        },
        lastUpdate: {
            type: 'string',
            format: 'date-time'
        },
        pendingUpdates: {
            type: 'integer'
        }
    }
} as const;

export const $SendInvoiceEmailRequest = {
    type: 'object',
    required: ['to', 'invoiceId'],
    properties: {
        to: {
            type: 'string',
            format: 'email'
        },
        invoiceId: {
            type: 'string'
        },
        cc: {
            type: 'array',
            items: {
                type: 'string',
                format: 'email'
            }
        },
        bcc: {
            type: 'array',
            items: {
                type: 'string',
                format: 'email'
            }
        },
        language: {
            type: 'string',
            enum: ['en', 'es'],
            default: 'en'
        },
        attachPdf: {
            type: 'boolean',
            default: true
        }
    }
} as const;

export const $SendReminderRequest = {
    type: 'object',
    required: ['to', 'invoiceId', 'daysOverdue'],
    properties: {
        to: {
            type: 'string',
            format: 'email'
        },
        invoiceId: {
            type: 'string'
        },
        daysOverdue: {
            type: 'integer'
        },
        language: {
            type: 'string',
            enum: ['en', 'es'],
            default: 'en'
        }
    }
} as const;

export const $SendReceiptRequest = {
    type: 'object',
    required: ['to', 'paymentId', 'amount'],
    properties: {
        to: {
            type: 'string',
            format: 'email'
        },
        paymentId: {
            type: 'string'
        },
        amount: {
            type: 'number'
        },
        currency: {
            type: 'string',
            default: 'EUR'
        },
        language: {
            type: 'string',
            enum: ['en', 'es'],
            default: 'en'
        }
    }
} as const;

export const $EmailTemplate = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        subject: {
            type: 'string'
        },
        language: {
            type: 'string'
        },
        variables: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $EmailResult = {
    type: 'object',
    properties: {
        messageId: {
            type: 'string'
        },
        accepted: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        rejected: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $SendWebSocketMessageRequest = {
    type: 'object',
    required: ['userId', 'event', 'data'],
    properties: {
        userId: {
            type: 'string'
        },
        event: {
            type: 'string'
        },
        data: {
            type: 'object',
            additionalProperties: true
        }
    }
} as const;

export const $BroadcastWebSocketRequest = {
    type: 'object',
    required: ['event', 'data'],
    properties: {
        event: {
            type: 'string'
        },
        data: {
            type: 'object',
            additionalProperties: true
        },
        userIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Optional list of user IDs to broadcast to'
        }
    }
} as const;

export const $ConnectedUser = {
    type: 'object',
    properties: {
        userId: {
            type: 'string'
        },
        socketId: {
            type: 'string'
        },
        connectedAt: {
            type: 'string',
            format: 'date-time'
        },
        rooms: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $AlertType = {
    type: 'string',
    enum: ['transaction', 'sync_error', 'unusual_spending', 'system_error', 'security', 'performance']
} as const;

export const $NotificationType = {
    type: 'string',
    enum: ['alert', 'reminder', 'system', 'payment', 'invoice', 'general']
} as const;

export const $AlertPriority = {
    type: 'string',
    enum: ['critical', 'high', 'medium', 'low']
} as const;

export const $Alert = {
    type: 'object',
    required: ['id', 'type', 'message', 'priority', 'createdAt'],
    properties: {
        id: {
            type: 'string'
        },
        type: {
            '$ref': '#/components/schemas/AlertType'
        },
        message: {
            type: 'string'
        },
        priority: {
            '$ref': '#/components/schemas/AlertPriority'
        },
        details: {
            type: 'object',
            additionalProperties: true
        },
        acknowledged: {
            type: 'boolean'
        },
        acknowledgedBy: {
            type: 'string'
        },
        acknowledgedAt: {
            type: 'string',
            format: 'date-time'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $CreateAlertRequest = {
    type: 'object',
    required: ['type', 'message', 'priority'],
    properties: {
        type: {
            '$ref': '#/components/schemas/AlertType'
        },
        message: {
            type: 'string'
        },
        priority: {
            '$ref': '#/components/schemas/AlertPriority'
        },
        details: {
            type: 'object',
            additionalProperties: true
        },
        channels: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['telegram', 'email', 'websocket']
            },
            description: 'Notification channels'
        }
    }
} as const;

export const $UpdateAlertRequest = {
    type: 'object',
    properties: {
        type: {
            '$ref': '#/components/schemas/AlertType'
        },
        message: {
            type: 'string'
        },
        priority: {
            '$ref': '#/components/schemas/AlertPriority'
        },
        details: {
            type: 'object',
            additionalProperties: true
        }
    }
} as const;

export const $BulkDeleteAlertsRequest = {
    type: 'object',
    required: ['ids'],
    properties: {
        ids: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Array of alert IDs to delete'
        }
    }
} as const;

export const $Notification = {
    type: 'object',
    required: ['id', 'type', 'title', 'message', 'userId', 'read', 'createdAt'],
    properties: {
        id: {
            type: 'string'
        },
        type: {
            '$ref': '#/components/schemas/NotificationType'
        },
        title: {
            type: 'string'
        },
        message: {
            type: 'string'
        },
        userId: {
            type: 'string'
        },
        read: {
            type: 'boolean'
        },
        readAt: {
            type: 'string',
            format: 'date-time'
        },
        data: {
            type: 'object',
            additionalProperties: true,
            description: 'Additional notification data'
        },
        expiresAt: {
            type: 'string',
            format: 'date-time',
            description: 'Optional expiration date'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $CreateNotificationRequest = {
    type: 'object',
    required: ['type', 'title', 'message', 'userId'],
    properties: {
        type: {
            '$ref': '#/components/schemas/NotificationType'
        },
        title: {
            type: 'string'
        },
        message: {
            type: 'string'
        },
        userId: {
            type: 'string'
        },
        data: {
            type: 'object',
            additionalProperties: true,
            description: 'Additional notification data'
        },
        expiresAt: {
            type: 'string',
            format: 'date-time',
            description: 'Optional expiration date'
        },
        channels: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['websocket', 'email', 'telegram']
            },
            description: 'Delivery channels'
        }
    }
} as const;

export const $TelegramMessageResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            properties: {
                messageId: {
                    type: 'integer'
                },
                chatId: {
                    type: 'string'
                }
            }
        }
    }
} as const;

export const $TelegramStatusResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/TelegramStatus'
        }
    }
} as const;

export const $EmailResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/EmailResult'
        }
    }
} as const;

export const $EmailTemplateListResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EmailTemplate'
            }
        }
    }
} as const;

export const $BroadcastResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            properties: {
                delivered: {
                    type: 'integer'
                },
                failed: {
                    type: 'integer'
                }
            }
        }
    }
} as const;

export const $ConnectedUsersResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ConnectedUser'
            }
        }
    }
} as const;

export const $UserConnectionStatusResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            properties: {
                isConnected: {
                    type: 'boolean'
                },
                lastSeen: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        }
    }
} as const;

export const $AlertResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/Alert'
        }
    }
} as const;

export const $AlertListResponse = {
    type: 'object',
    required: ['success', 'data', 'pagination'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Alert'
            }
        },
        pagination: {
            '$ref': '#/components/schemas/PaginationMeta'
        }
    }
} as const;

export const $NotificationResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/Notification'
        }
    }
} as const;

export const $NotificationListResponse = {
    type: 'object',
    required: ['success', 'data', 'pagination'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Notification'
            }
        },
        pagination: {
            '$ref': '#/components/schemas/PaginationMeta'
        }
    }
} as const;

export const $BulkDeleteResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            required: ['deleted'],
            properties: {
                deleted: {
                    type: 'integer',
                    description: 'Number of items deleted'
                }
            }
        }
    }
} as const;

export const $BulkUpdateResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            required: ['updated'],
            properties: {
                updated: {
                    type: 'integer',
                    description: 'Number of items updated'
                }
            }
        }
    }
} as const;

export const $MessageResponse = {
    type: 'object',
    required: ['success', 'message'],
    properties: {
        success: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        }
    }
} as const;

export const $PaginationMeta = {
    type: 'object',
    required: ['page', 'limit', 'total', 'totalPages'],
    properties: {
        page: {
            type: 'integer'
        },
        limit: {
            type: 'integer'
        },
        total: {
            type: 'integer'
        },
        totalPages: {
            type: 'integer'
        }
    }
} as const;

export const $ErrorResponse = {
    type: 'object',
    required: ['success', 'error'],
    properties: {
        success: {
            type: 'boolean',
            default: false
        },
        error: {
            type: 'object',
            required: ['code', 'message'],
            properties: {
                code: {
                    type: 'string'
                },
                message: {
                    type: 'string'
                },
                details: {
                    type: 'object',
                    additionalProperties: true
                }
            }
        }
    }
} as const;