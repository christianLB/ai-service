// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  ListTagsData,
  ListTagsResponse,
  CreateTagData,
  CreateTagResponse,
  SearchTagsData,
  SearchTagsResponse,
  GetTagData,
  GetTagResponse,
  UpdateTagData,
  UpdateTagResponse,
  DeleteTagData,
  DeleteTagResponse,
  GetEntityTagsData,
  GetEntityTagsResponse,
  TagEntityData,
  TagEntityResponse,
  UpdateEntityTagData,
  UpdateEntityTagResponse,
  RemoveEntityTagData,
  RemoveEntityTagResponse,
  FindEntitiesByTagData,
  FindEntitiesByTagResponse,
  BatchTagEntitiesData,
  BatchTagEntitiesResponse,
  ReTagEntitiesData,
  ReTagEntitiesResponse,
  ProvideTaggingFeedbackData,
  ProvideTaggingFeedbackResponse,
  GetTaggingLearningStatsResponse,
  SendTelegramMessageData,
  SendTelegramMessageResponse,
  SetTelegramWebhookData,
  SetTelegramWebhookResponse,
  GetTelegramChatInfoData,
  GetTelegramChatInfoResponse,
  SetIntegrationConfigData,
  SetIntegrationConfigResponse,
  ListConfigsByTypeData,
  ListConfigsByTypeResponse,
  GetIntegrationConfigData,
  GetIntegrationConfigResponse,
  DeleteIntegrationConfigData,
  DeleteIntegrationConfigResponse,
  AnalyzeDocumentAiData,
  AnalyzeDocumentAiResponse,
  CategorizeTextAiData,
  CategorizeTextAiResponse,
  ExtractEntitiesAiData,
  ExtractEntitiesAiResponse,
} from './types.gen';

export class TagsService {
  /**
   * List tags with filtering and pagination
   * @param data The data for the request.
   * @param data.page Page number
   * @param data.limit Items per page
   * @param data.entityType Filter by entity type
   * @param data.search Search in tag name, code, or description
   * @param data.parentId Filter by parent tag ID
   * @param data.isActive Filter by active status
   * @param data.sortBy Sort field
   * @param data.sortOrder Sort order
   * @returns TagListResponse Tags retrieved successfully
   * @throws ApiError
   */
  public static listTags(data: ListTagsData = {}): CancelablePromise<ListTagsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/tags',
      query: {
        page: data.page,
        limit: data.limit,
        entityType: data.entityType,
        search: data.search,
        parentId: data.parentId,
        isActive: data.isActive,
        sortBy: data.sortBy,
        sortOrder: data.sortOrder,
      },
      errors: {
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Create new tag
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TagResponse Tag created successfully
   * @throws ApiError
   */
  public static createTag(data: CreateTagData): CancelablePromise<CreateTagResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/tags',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Search tags by query
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TagListResponse Tag search completed successfully
   * @throws ApiError
   */
  public static searchTags(data: SearchTagsData): CancelablePromise<SearchTagsResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/tags/search',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Get tag by ID
   * @param data The data for the request.
   * @param data.tagId Tag identifier
   * @returns TagResponse Tag retrieved successfully
   * @throws ApiError
   */
  public static getTag(data: GetTagData): CancelablePromise<GetTagResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/tags/{tagId}',
      path: {
        tagId: data.tagId,
      },
      errors: {
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }

  /**
   * Update tag
   * @param data The data for the request.
   * @param data.tagId Tag identifier
   * @param data.requestBody
   * @returns TagResponse Tag updated successfully
   * @throws ApiError
   */
  public static updateTag(data: UpdateTagData): CancelablePromise<UpdateTagResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/tags/{tagId}',
      path: {
        tagId: data.tagId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }

  /**
   * Delete tag
   * @param data The data for the request.
   * @param data.tagId Tag identifier
   * @param data.requestBody
   * @returns MessageResponse Tag deleted successfully
   * @throws ApiError
   */
  public static deleteTag(data: DeleteTagData): CancelablePromise<DeleteTagResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/tags/{tagId}',
      path: {
        tagId: data.tagId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }
}

export class EntityTaggingService {
  /**
   * Get entity tags
   * @param data The data for the request.
   * @param data.entityType Entity type
   * @param data.entityId Entity identifier
   * @returns EntityTagListResponse Entity tags retrieved successfully
   * @throws ApiError
   */
  public static getEntityTags(data: GetEntityTagsData): CancelablePromise<GetEntityTagsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/entities/{entityType}/{entityId}/tags',
      path: {
        entityType: data.entityType,
        entityId: data.entityId,
      },
      errors: {
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }

  /**
   * Tag entity with AI support
   * @param data The data for the request.
   * @param data.entityType Entity type
   * @param data.entityId Entity identifier
   * @param data.requestBody
   * @returns EntityTagResultResponse Entity tagged successfully
   * @throws ApiError
   */
  public static tagEntity(data: TagEntityData): CancelablePromise<TagEntityResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/entities/{entityType}/{entityId}/tags',
      path: {
        entityType: data.entityType,
        entityId: data.entityId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }

  /**
   * Update entity tag
   * @param data The data for the request.
   * @param data.entityType Entity type
   * @param data.entityId Entity identifier
   * @param data.tagId Tag identifier
   * @param data.requestBody
   * @returns EntityTagResponse Entity tag updated successfully
   * @throws ApiError
   */
  public static updateEntityTag(
    data: UpdateEntityTagData
  ): CancelablePromise<UpdateEntityTagResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/entities/{entityType}/{entityId}/tags/{tagId}',
      path: {
        entityType: data.entityType,
        entityId: data.entityId,
        tagId: data.tagId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }

  /**
   * Remove entity tag
   * @param data The data for the request.
   * @param data.entityType Entity type
   * @param data.entityId Entity identifier
   * @param data.tagId Tag identifier
   * @returns MessageResponse Entity tag removed successfully
   * @throws ApiError
   */
  public static removeEntityTag(
    data: RemoveEntityTagData
  ): CancelablePromise<RemoveEntityTagResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/entities/{entityType}/{entityId}/tags/{tagId}',
      path: {
        entityType: data.entityType,
        entityId: data.entityId,
        tagId: data.tagId,
      },
      errors: {
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }

  /**
   * Find entities by tag
   * @param data The data for the request.
   * @param data.tagId Tag identifier
   * @param data.page Page number
   * @param data.limit Items per page
   * @param data.entityType Filter by entity type
   * @param data.minConfidence Minimum confidence threshold
   * @returns EntityListResponse Entities retrieved successfully
   * @throws ApiError
   */
  public static findEntitiesByTag(
    data: FindEntitiesByTagData
  ): CancelablePromise<FindEntitiesByTagResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/entities/by-tag/{tagId}',
      path: {
        tagId: data.tagId,
      },
      query: {
        page: data.page,
        limit: data.limit,
        entityType: data.entityType,
        minConfidence: data.minConfidence,
      },
      errors: {
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }

  /**
   * Batch tag entities
   * @param data The data for the request.
   * @param data.requestBody
   * @returns BatchTagResultResponse Batch tagging completed
   * @throws ApiError
   */
  public static batchTagEntities(
    data: BatchTagEntitiesData
  ): CancelablePromise<BatchTagEntitiesResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/entities/batch/tag',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Re-tag entities with updated AI models
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ReTagResultResponse Re-tagging process started
   * @throws ApiError
   */
  public static reTagEntities(data: ReTagEntitiesData): CancelablePromise<ReTagEntitiesResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/entities/re-tag',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Provide tagging feedback for AI learning
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MessageResponse Feedback recorded successfully
   * @throws ApiError
   */
  public static provideTaggingFeedback(
    data: ProvideTaggingFeedbackData
  ): CancelablePromise<ProvideTaggingFeedbackResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/entities/feedback',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Get tagging learning statistics
   * @returns TaggingLearningStatsResponse Learning statistics retrieved successfully
   * @throws ApiError
   */
  public static getTaggingLearningStats(): CancelablePromise<GetTaggingLearningStatsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/tags/learning/stats',
      errors: {
        401: 'Unauthorized',
      },
    });
  }
}

export class TelegramService {
  /**
   * Send Telegram message
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TelegramMessageResponse Message sent successfully
   * @throws ApiError
   */
  public static sendTelegramMessage(
    data: SendTelegramMessageData
  ): CancelablePromise<SendTelegramMessageResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/telegram/send',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Configure Telegram webhook
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MessageResponse Webhook configured successfully
   * @throws ApiError
   */
  public static setTelegramWebhook(
    data: SetTelegramWebhookData
  ): CancelablePromise<SetTelegramWebhookResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/telegram/webhook',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Get Telegram chat information
   * @param data The data for the request.
   * @param data.chatId Telegram chat ID
   * @returns TelegramChatResponse Chat information retrieved successfully
   * @throws ApiError
   */
  public static getTelegramChatInfo(
    data: GetTelegramChatInfoData
  ): CancelablePromise<GetTelegramChatInfoResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/telegram/chat/{chatId}',
      path: {
        chatId: data.chatId,
      },
      errors: {
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }
}

export class IntegrationConfigService {
  /**
   * Set integration configuration
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MessageResponse Configuration set successfully
   * @throws ApiError
   */
  public static setIntegrationConfig(
    data: SetIntegrationConfigData
  ): CancelablePromise<SetIntegrationConfigResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/integrations/config',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * List configurations by type
   * @param data The data for the request.
   * @param data.type Configuration type
   * @returns ConfigListResponse Configurations retrieved successfully
   * @throws ApiError
   */
  public static listConfigsByType(
    data: ListConfigsByTypeData
  ): CancelablePromise<ListConfigsByTypeResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/integrations/config/{type}',
      path: {
        type: data.type,
      },
      errors: {
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Get specific configuration
   * @param data The data for the request.
   * @param data.type Configuration type
   * @param data.key Configuration key
   * @returns ConfigResponse Configuration retrieved successfully
   * @throws ApiError
   */
  public static getIntegrationConfig(
    data: GetIntegrationConfigData
  ): CancelablePromise<GetIntegrationConfigResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/integrations/config/{type}/{key}',
      path: {
        type: data.type,
        key: data.key,
      },
      errors: {
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }

  /**
   * Delete configuration
   * @param data The data for the request.
   * @param data.type Configuration type
   * @param data.key Configuration key
   * @returns MessageResponse Configuration deleted successfully
   * @throws ApiError
   */
  public static deleteIntegrationConfig(
    data: DeleteIntegrationConfigData
  ): CancelablePromise<DeleteIntegrationConfigResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/integrations/config/{type}/{key}',
      path: {
        type: data.type,
        key: data.key,
      },
      errors: {
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }
}

export class AiOperationsService {
  /**
   * Analyze document with AI
   * @param data The data for the request.
   * @param data.requestBody
   * @returns DocumentAnalysisResponse Document analysis completed
   * @throws ApiError
   */
  public static analyzeDocumentAi(
    data: AnalyzeDocumentAiData
  ): CancelablePromise<AnalyzeDocumentAiResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/ai/analyze/document',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Categorize text with AI
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CategorizationResponse Text categorization completed
   * @throws ApiError
   */
  public static categorizeTextAi(
    data: CategorizeTextAiData
  ): CancelablePromise<CategorizeTextAiResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/ai/categorize/text',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Extract entities from text
   * @param data The data for the request.
   * @param data.requestBody
   * @returns EntityExtractionResponse Entity extraction completed
   * @throws ApiError
   */
  public static extractEntitiesAi(
    data: ExtractEntitiesAiData
  ): CancelablePromise<ExtractEntitiesAiResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/ai/extract/entities',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }
}
