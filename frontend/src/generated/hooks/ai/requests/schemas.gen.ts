// This file is auto-generated by @hey-api/openapi-ts

export const $EntityType = {
    type: 'string',
    enum: ['transaction', 'document', 'client', 'invoice'],
    description: 'Supported entity types'
} as const;

export const $TagMethod = {
    type: 'string',
    enum: ['AI', 'PATTERN', 'MANUAL', 'AUTO'],
    description: 'Tagging method'
} as const;

export const $TagConfidenceLevel = {
    type: 'string',
    enum: ['HIGH', 'MEDIUM', 'LOW'],
    description: 'Tag confidence level'
} as const;

export const $AIProvider = {
    type: 'string',
    enum: ['claude', 'openai'],
    description: 'AI provider for tagging'
} as const;

export const $Tag = {
    type: 'object',
    required: ['id', 'code', 'name', 'entityTypes', 'confidence', 'path', 'level', 'isActive', 'isSystem', 'usageCount', 'successRate', 'createdAt', 'updatedAt'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            type: 'string',
            pattern: '^[A-Z][A-Z0-9_]*$',
            description: 'Uppercase tag code with underscores'
        },
        name: {
            type: 'string',
            minLength: 1
        },
        description: {
            type: 'string',
            nullable: true
        },
        entityTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EntityType'
            },
            minItems: 1
        },
        patterns: {
            '$ref': '#/components/schemas/TagPatterns'
        },
        rules: {
            type: 'object',
            additionalProperties: true,
            nullable: true
        },
        confidence: {
            type: 'number',
            minimum: 0,
            maximum: 1,
            default: 0.5
        },
        embeddingModel: {
            type: 'string',
            maxLength: 50,
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        path: {
            type: 'string',
            description: 'Hierarchical path'
        },
        level: {
            type: 'integer',
            minimum: 0,
            default: 0
        },
        color: {
            type: 'string',
            maxLength: 7,
            nullable: true,
            description: 'Hex color code'
        },
        icon: {
            type: 'string',
            maxLength: 50,
            nullable: true
        },
        isActive: {
            type: 'boolean',
            default: true
        },
        isSystem: {
            type: 'boolean',
            default: false
        },
        metadata: {
            type: 'object',
            additionalProperties: true,
            nullable: true
        },
        usageCount: {
            type: 'integer',
            minimum: 0,
            default: 0
        },
        successRate: {
            type: 'number',
            minimum: 0,
            maximum: 1,
            default: 0
        },
        lastUsed: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $TagPatterns = {
    type: 'object',
    properties: {
        keywords: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        merchants: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        categories: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        regex: {
            type: 'string'
        },
        customRules: {
            type: 'object',
            additionalProperties: true
        }
    },
    nullable: true
} as const;

export const $CreateTagRequest = {
    type: 'object',
    required: ['code', 'name', 'entityTypes'],
    properties: {
        code: {
            type: 'string',
            pattern: '^[A-Z][A-Z0-9_]*$',
            description: 'Uppercase tag code with underscores'
        },
        name: {
            type: 'string',
            minLength: 1
        },
        description: {
            type: 'string'
        },
        entityTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EntityType'
            },
            minItems: 1
        },
        patterns: {
            '$ref': '#/components/schemas/TagPatterns'
        },
        rules: {
            type: 'object',
            additionalProperties: true
        },
        confidence: {
            type: 'number',
            minimum: 0,
            maximum: 1,
            default: 0.5
        },
        embeddingModel: {
            type: 'string',
            maxLength: 50
        },
        parentId: {
            type: 'string',
            format: 'uuid'
        },
        color: {
            type: 'string',
            maxLength: 7
        },
        icon: {
            type: 'string',
            maxLength: 50
        },
        isActive: {
            type: 'boolean',
            default: true
        },
        isSystem: {
            type: 'boolean',
            default: false
        },
        metadata: {
            type: 'object',
            additionalProperties: true
        }
    }
} as const;

export const $UpdateTagRequest = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            minLength: 1
        },
        description: {
            type: 'string'
        },
        entityTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EntityType'
            },
            minItems: 1
        },
        patterns: {
            '$ref': '#/components/schemas/TagPatterns'
        },
        rules: {
            type: 'object',
            additionalProperties: true
        },
        confidence: {
            type: 'number',
            minimum: 0,
            maximum: 1
        },
        embeddingModel: {
            type: 'string',
            maxLength: 50
        },
        parentId: {
            type: 'string',
            format: 'uuid'
        },
        color: {
            type: 'string',
            maxLength: 7
        },
        icon: {
            type: 'string',
            maxLength: 50
        },
        isActive: {
            type: 'boolean'
        },
        metadata: {
            type: 'object',
            additionalProperties: true
        }
    }
} as const;

export const $DeleteTagRequest = {
    type: 'object',
    properties: {
        reassignTo: {
            type: 'string',
            format: 'uuid',
            description: 'Tag ID to reassign existing entity tags to'
        }
    }
} as const;

export const $TagSearchRequest = {
    type: 'object',
    required: ['q'],
    properties: {
        q: {
            type: 'string',
            minLength: 1,
            description: 'Search query'
        },
        entityType: {
            '$ref': '#/components/schemas/EntityType'
        },
        limit: {
            type: 'integer',
            minimum: 1,
            maximum: 50,
            default: 10
        }
    }
} as const;

export const $EntityTag = {
    type: 'object',
    required: ['id', 'entityType', 'entityId', 'tagId', 'confidence', 'method', 'appliedAt', 'isVerified'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        entityType: {
            '$ref': '#/components/schemas/EntityType'
        },
        entityId: {
            type: 'string'
        },
        tagId: {
            type: 'string',
            format: 'uuid'
        },
        confidence: {
            type: 'number',
            minimum: 0,
            maximum: 1
        },
        method: {
            '$ref': '#/components/schemas/TagMethod'
        },
        appliedAt: {
            type: 'string',
            format: 'date-time'
        },
        appliedBy: {
            type: 'string'
        },
        isVerified: {
            type: 'boolean',
            default: false
        },
        verifiedBy: {
            type: 'string',
            nullable: true
        },
        verifiedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        metadata: {
            type: 'object',
            additionalProperties: true,
            nullable: true
        },
        tag: {
            '$ref': '#/components/schemas/Tag'
        }
    }
} as const;

export const $TagEntityRequest = {
    type: 'object',
    properties: {
        method: {
            type: 'string',
            enum: ['auto', 'ai', 'pattern', 'manual'],
            default: 'auto'
        },
        options: {
            type: 'object',
            properties: {
                aiProvider: {
                    '$ref': '#/components/schemas/AIProvider'
                },
                confidenceThreshold: {
                    type: 'number',
                    minimum: 0,
                    maximum: 1,
                    default: 0.7
                },
                maxTags: {
                    type: 'integer',
                    minimum: 1,
                    maximum: 10,
                    default: 5
                },
                includeRelated: {
                    type: 'boolean',
                    default: false
                },
                forceReTag: {
                    type: 'boolean',
                    default: false
                }
            }
        }
    }
} as const;

export const $UpdateEntityTagRequest = {
    type: 'object',
    properties: {
        confidence: {
            type: 'number',
            minimum: 0,
            maximum: 1
        },
        isVerified: {
            type: 'boolean'
        }
    }
} as const;

export const $BatchTagRequest = {
    type: 'object',
    required: ['entities'],
    properties: {
        entities: {
            type: 'array',
            items: {
                type: 'object',
                required: ['type', 'id'],
                properties: {
                    type: {
                        '$ref': '#/components/schemas/EntityType'
                    },
                    id: {
                        type: 'string'
                    },
                    content: {
                        type: 'string'
                    },
                    metadata: {
                        type: 'object',
                        additionalProperties: true
                    }
                }
            },
            minItems: 1,
            maxItems: 100
        },
        options: {
            type: 'object',
            properties: {
                aiProvider: {
                    '$ref': '#/components/schemas/AIProvider'
                },
                confidenceThreshold: {
                    type: 'number',
                    minimum: 0,
                    maximum: 1,
                    default: 0.7
                },
                maxTags: {
                    type: 'integer',
                    minimum: 1,
                    maximum: 10,
                    default: 5
                },
                includeRelated: {
                    type: 'boolean',
                    default: false
                },
                forceReTag: {
                    type: 'boolean',
                    default: false
                }
            }
        }
    }
} as const;

export const $ReTagRequest = {
    type: 'object',
    required: ['filter'],
    properties: {
        filter: {
            type: 'object',
            properties: {
                entityType: {
                    '$ref': '#/components/schemas/EntityType'
                },
                dateRange: {
                    type: 'object',
                    required: ['start', 'end'],
                    properties: {
                        start: {
                            type: 'string',
                            format: 'date-time'
                        },
                        end: {
                            type: 'string',
                            format: 'date-time'
                        }
                    }
                },
                tags: {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                hasNoTags: {
                    type: 'boolean'
                }
            }
        },
        options: {
            type: 'object',
            properties: {
                method: {
                    type: 'string',
                    enum: ['ai', 'pattern'],
                    default: 'ai'
                },
                batchSize: {
                    type: 'integer',
                    minimum: 1,
                    maximum: 1000,
                    default: 100
                },
                dryRun: {
                    type: 'boolean',
                    default: false
                }
            }
        }
    }
} as const;

export const $TagFeedbackRequest = {
    type: 'object',
    required: ['entityType', 'entityId', 'entityTagId', 'feedback'],
    properties: {
        entityType: {
            '$ref': '#/components/schemas/EntityType'
        },
        entityId: {
            type: 'string'
        },
        entityTagId: {
            type: 'string',
            format: 'uuid'
        },
        feedback: {
            type: 'object',
            required: ['isCorrect'],
            properties: {
                isCorrect: {
                    type: 'boolean'
                },
                suggestedTagId: {
                    type: 'string',
                    format: 'uuid'
                },
                reason: {
                    type: 'string'
                },
                confidence: {
                    type: 'number',
                    minimum: 0,
                    maximum: 1
                }
            }
        }
    }
} as const;

export const $TelegramMessageRequest = {
    type: 'object',
    required: ['chatId', 'text'],
    properties: {
        chatId: {
            type: 'string',
            description: 'Telegram chat ID'
        },
        text: {
            type: 'string',
            description: 'Message text'
        },
        parseMode: {
            type: 'string',
            enum: ['HTML', 'Markdown', 'MarkdownV2']
        },
        disableWebPagePreview: {
            type: 'boolean',
            default: false
        },
        disableNotification: {
            type: 'boolean',
            default: false
        }
    }
} as const;

export const $TelegramWebhookRequest = {
    type: 'object',
    required: ['url'],
    properties: {
        url: {
            type: 'string',
            format: 'uri',
            description: 'Webhook URL'
        },
        certificate: {
            type: 'string',
            description: 'Public key certificate'
        },
        secretToken: {
            type: 'string',
            description: 'Secret token for webhook security'
        }
    }
} as const;

export const $TelegramChat = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['private', 'group', 'supergroup', 'channel']
        },
        title: {
            type: 'string'
        },
        username: {
            type: 'string'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        }
    }
} as const;

export const $SetConfigRequest = {
    type: 'object',
    required: ['type', 'key', 'value'],
    properties: {
        type: {
            type: 'string',
            enum: ['ai', 'telegram', 'notification', 'integration']
        },
        key: {
            type: 'string'
        },
        value: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'number'
                },
                {
                    type: 'boolean'
                },
                {
                    type: 'object',
                    additionalProperties: true
                }
            ]
        },
        encrypted: {
            type: 'boolean',
            default: false
        }
    }
} as const;

export const $ConfigValue = {
    type: 'object',
    required: ['type', 'key', 'value', 'createdAt', 'updatedAt'],
    properties: {
        type: {
            type: 'string'
        },
        key: {
            type: 'string'
        },
        value: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'number'
                },
                {
                    type: 'boolean'
                },
                {
                    type: 'object',
                    additionalProperties: true
                }
            ]
        },
        encrypted: {
            type: 'boolean'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $DocumentAnalysisRequest = {
    type: 'object',
    required: ['content'],
    properties: {
        content: {
            type: 'string',
            description: 'Document content to analyze'
        },
        documentId: {
            type: 'string',
            description: 'Document identifier'
        },
        options: {
            type: 'object',
            properties: {
                extractEntities: {
                    type: 'boolean',
                    default: true
                },
                detectTopics: {
                    type: 'boolean',
                    default: true
                },
                analyzeSentiment: {
                    type: 'boolean',
                    default: true
                },
                generateSummary: {
                    type: 'boolean',
                    default: true
                }
            }
        }
    }
} as const;

export const $TextCategorizationRequest = {
    type: 'object',
    required: ['text'],
    properties: {
        text: {
            type: 'string',
            description: 'Text to categorize'
        },
        categories: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Predefined categories to choose from'
        },
        maxCategories: {
            type: 'integer',
            minimum: 1,
            maximum: 10,
            default: 3
        }
    }
} as const;

export const $EntityExtractionRequest = {
    type: 'object',
    required: ['text'],
    properties: {
        text: {
            type: 'string',
            description: 'Text to extract entities from'
        },
        entityTypes: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['person', 'organization', 'location', 'date', 'money', 'other']
            },
            description: 'Entity types to extract'
        }
    }
} as const;

export const $EntityTagResult = {
    type: 'object',
    properties: {
        entityTags: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EntityTag'
            }
        },
        statistics: {
            type: 'object',
            properties: {
                totalTags: {
                    type: 'integer'
                },
                averageConfidence: {
                    type: 'number'
                },
                methodUsed: {
                    '$ref': '#/components/schemas/TagMethod'
                },
                aiProvider: {
                    '$ref': '#/components/schemas/AIProvider'
                },
                processingTime: {
                    type: 'number',
                    description: 'Processing time in milliseconds'
                }
            }
        }
    }
} as const;

export const $BatchTagResult = {
    type: 'object',
    properties: {
        processedEntities: {
            type: 'integer'
        },
        successfullyTagged: {
            type: 'integer'
        },
        failed: {
            type: 'integer'
        },
        results: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    entityId: {
                        type: 'string'
                    },
                    entityType: {
                        '$ref': '#/components/schemas/EntityType'
                    },
                    success: {
                        type: 'boolean'
                    },
                    tags: {
                        type: 'array',
                        items: {
                            '$ref': '#/components/schemas/EntityTag'
                        }
                    },
                    error: {
                        type: 'string'
                    }
                }
            }
        }
    }
} as const;

export const $ReTagResult = {
    type: 'object',
    properties: {
        jobId: {
            type: 'string',
            description: 'Job identifier for tracking progress'
        },
        estimatedEntities: {
            type: 'integer'
        },
        batchSize: {
            type: 'integer'
        },
        dryRun: {
            type: 'boolean'
        },
        started: {
            type: 'boolean'
        }
    }
} as const;

export const $TaggingLearningStats = {
    type: 'object',
    properties: {
        totalEntitiesTagged: {
            type: 'integer'
        },
        totalFeedbackReceived: {
            type: 'integer'
        },
        accuracyRate: {
            type: 'number',
            description: 'Overall accuracy based on feedback'
        },
        topTags: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    tag: {
                        '$ref': '#/components/schemas/Tag'
                    },
                    usageCount: {
                        type: 'integer'
                    },
                    successRate: {
                        type: 'number'
                    }
                }
            }
        },
        aiProviderStats: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    totalRequests: {
                        type: 'integer'
                    },
                    averageConfidence: {
                        type: 'number'
                    },
                    successRate: {
                        type: 'number'
                    }
                }
            }
        }
    }
} as const;

export const $CategorizationResult = {
    type: 'object',
    properties: {
        categories: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    category: {
                        type: 'string'
                    },
                    confidence: {
                        type: 'number'
                    },
                    reasoning: {
                        type: 'string'
                    }
                }
            }
        }
    }
} as const;

export const $EntityExtractionResult = {
    type: 'object',
    properties: {
        entities: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    text: {
                        type: 'string'
                    },
                    type: {
                        type: 'string'
                    },
                    confidence: {
                        type: 'number'
                    },
                    startPosition: {
                        type: 'integer'
                    },
                    endPosition: {
                        type: 'integer'
                    }
                }
            }
        }
    }
} as const;

export const $TagResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/Tag'
        }
    }
} as const;

export const $TagListResponse = {
    type: 'object',
    required: ['success', 'data', 'pagination'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Tag'
            }
        },
        pagination: {
            '$ref': '#/components/schemas/PaginationMeta'
        }
    }
} as const;

export const $EntityTagResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/EntityTag'
        }
    }
} as const;

export const $EntityTagListResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EntityTag'
            }
        }
    }
} as const;

export const $EntityTagResultResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/EntityTagResult'
        }
    }
} as const;

export const $EntityListResponse = {
    type: 'object',
    required: ['success', 'data', 'pagination'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    entityType: {
                        '$ref': '#/components/schemas/EntityType'
                    },
                    entityId: {
                        type: 'string'
                    },
                    entityData: {
                        type: 'object',
                        additionalProperties: true
                    },
                    tags: {
                        type: 'array',
                        items: {
                            '$ref': '#/components/schemas/EntityTag'
                        }
                    }
                }
            }
        },
        pagination: {
            '$ref': '#/components/schemas/PaginationMeta'
        }
    }
} as const;

export const $BatchTagResultResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/BatchTagResult'
        }
    }
} as const;

export const $ReTagResultResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/ReTagResult'
        }
    }
} as const;

export const $TaggingLearningStatsResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/TaggingLearningStats'
        }
    }
} as const;

export const $TelegramMessageResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            properties: {
                messageId: {
                    type: 'integer'
                },
                sent: {
                    type: 'boolean'
                }
            }
        }
    }
} as const;

export const $TelegramChatResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/TelegramChat'
        }
    }
} as const;

export const $ConfigResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/ConfigValue'
        }
    }
} as const;

export const $ConfigListResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ConfigValue'
            }
        }
    }
} as const;

export const $DocumentAnalysisResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'object',
            properties: {
                summary: {
                    type: 'string'
                },
                entities: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            text: {
                                type: 'string'
                            },
                            type: {
                                type: 'string'
                            },
                            confidence: {
                                type: 'number'
                            }
                        }
                    }
                },
                topics: {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                sentiment: {
                    type: 'object',
                    properties: {
                        score: {
                            type: 'number'
                        },
                        label: {
                            type: 'string'
                        }
                    }
                }
            }
        }
    }
} as const;

export const $CategorizationResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/CategorizationResult'
        }
    }
} as const;

export const $EntityExtractionResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            '$ref': '#/components/schemas/EntityExtractionResult'
        }
    }
} as const;

export const $MessageResponse = {
    type: 'object',
    required: ['success', 'message'],
    properties: {
        success: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        }
    }
} as const;

export const $PaginationMeta = {
    type: 'object',
    required: ['page', 'limit', 'total', 'totalPages'],
    properties: {
        page: {
            type: 'integer'
        },
        limit: {
            type: 'integer'
        },
        total: {
            type: 'integer'
        },
        totalPages: {
            type: 'integer'
        }
    }
} as const;

export const $ErrorResponse = {
    type: 'object',
    required: ['success', 'error'],
    properties: {
        success: {
            type: 'boolean',
            default: false
        },
        error: {
            type: 'object',
            required: ['code', 'message'],
            properties: {
                code: {
                    type: 'string'
                },
                message: {
                    type: 'string'
                },
                details: {
                    type: 'object',
                    additionalProperties: true
                }
            }
        }
    }
} as const;