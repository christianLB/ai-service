// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  GetApiFinancialAccountsData,
  GetApiFinancialAccountsResponse,
  GetApiFinancialAccountsByIdData,
  GetApiFinancialAccountsByIdResponse,
  GetApiFinancialClientsData,
  GetApiFinancialClientsResponse,
  GetApiFinancialClientsByIdData,
  GetApiFinancialClientsByIdResponse,
  GetApiFinancialInvoicesData,
  GetApiFinancialInvoicesResponse,
  GetApiFinancialInvoicesByIdData,
  GetApiFinancialInvoicesByIdResponse,
  GetApiFinancialTransactionsData,
  GetApiFinancialTransactionsResponse,
  GetApiFinancialTransactionsByIdData,
  GetApiFinancialTransactionsByIdResponse,
  GetApiFinancialTransactionsExportData,
  GetApiFinancialTransactionsExportResponse,
  GetApiFinancialAttachmentsData,
  GetApiFinancialAttachmentsResponse,
  GetApiFinancialAttachmentsByIdData,
  GetApiFinancialAttachmentsByIdResponse,
} from './types.gen';

export class DefaultService {
  /**
   * List bank accounts
   * @param data The data for the request.
   * @param data.page Page number (1-based)
   * @param data.limit Items per page
   * @returns AccountListResponse List of accounts
   * @throws ApiError
   */
  public static getApiFinancialAccounts(
    data: GetApiFinancialAccountsData = {}
  ): CancelablePromise<GetApiFinancialAccountsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/financial/accounts',
      query: {
        page: data.page,
        limit: data.limit,
      },
      errors: {
        400: 'Invalid parameters',
      },
    });
  }

  /**
   * Get account by ID
   * @param data The data for the request.
   * @param data.id
   * @returns Account Account details
   * @throws ApiError
   */
  public static getApiFinancialAccountsById(
    data: GetApiFinancialAccountsByIdData
  ): CancelablePromise<GetApiFinancialAccountsByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/financial/accounts/{id}',
      path: {
        id: data.id,
      },
      errors: {
        404: 'Account not found',
      },
    });
  }

  /**
   * List clients
   * @param data The data for the request.
   * @param data.page
   * @param data.limit
   * @param data.email
   * @param data.name
   * @returns ClientListResponse List of clients
   * @throws ApiError
   */
  public static getApiFinancialClients(
    data: GetApiFinancialClientsData = {}
  ): CancelablePromise<GetApiFinancialClientsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/financial/clients',
      query: {
        page: data.page,
        limit: data.limit,
        email: data.email,
        name: data.name,
      },
      errors: {
        400: 'Invalid parameters',
      },
    });
  }

  /**
   * Get client by ID
   * @param data The data for the request.
   * @param data.id
   * @returns Client Client details
   * @throws ApiError
   */
  public static getApiFinancialClientsById(
    data: GetApiFinancialClientsByIdData
  ): CancelablePromise<GetApiFinancialClientsByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/financial/clients/{id}',
      path: {
        id: data.id,
      },
      errors: {
        404: 'Client not found',
      },
    });
  }

  /**
   * List invoices
   * @param data The data for the request.
   * @param data.page
   * @param data.limit
   * @param data.clientId
   * @param data.status
   * @returns InvoiceListResponse List of invoices
   * @throws ApiError
   */
  public static getApiFinancialInvoices(
    data: GetApiFinancialInvoicesData = {}
  ): CancelablePromise<GetApiFinancialInvoicesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/financial/invoices',
      query: {
        page: data.page,
        limit: data.limit,
        clientId: data.clientId,
        status: data.status,
      },
      errors: {
        400: 'Invalid parameters',
      },
    });
  }

  /**
   * Get invoice by ID
   * @param data The data for the request.
   * @param data.id
   * @returns Invoice Invoice details
   * @throws ApiError
   */
  public static getApiFinancialInvoicesById(
    data: GetApiFinancialInvoicesByIdData
  ): CancelablePromise<GetApiFinancialInvoicesByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/financial/invoices/{id}',
      path: {
        id: data.id,
      },
      errors: {
        404: 'Invoice not found',
      },
    });
  }

  /**
   * List transactions
   * @param data The data for the request.
   * @param data.page
   * @param data.limit
   * @param data.accountId
   * @param data.type
   * @param data.status
   * @param data.dateFrom
   * @param data.dateTo
   * @param data.minAmount
   * @param data.maxAmount
   * @param data.search
   * @returns TransactionListResponse List of transactions
   * @throws ApiError
   */
  public static getApiFinancialTransactions(
    data: GetApiFinancialTransactionsData = {}
  ): CancelablePromise<GetApiFinancialTransactionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/financial/transactions',
      query: {
        page: data.page,
        limit: data.limit,
        accountId: data.accountId,
        type: data.type,
        status: data.status,
        dateFrom: data.dateFrom,
        dateTo: data.dateTo,
        minAmount: data.minAmount,
        maxAmount: data.maxAmount,
        search: data.search,
      },
      errors: {
        400: 'Invalid parameters',
      },
    });
  }

  /**
   * Get transaction by ID
   * @param data The data for the request.
   * @param data.id
   * @returns Transaction Transaction details
   * @throws ApiError
   */
  public static getApiFinancialTransactionsById(
    data: GetApiFinancialTransactionsByIdData
  ): CancelablePromise<GetApiFinancialTransactionsByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/financial/transactions/{id}',
      path: {
        id: data.id,
      },
      errors: {
        404: 'Transaction not found',
      },
    });
  }

  /**
   * Export transactions
   * @param data The data for the request.
   * @param data.format
   * @param data.accountId
   * @param data.dateFrom
   * @param data.dateTo
   * @returns Transaction Exported transactions
   * @throws ApiError
   */
  public static getApiFinancialTransactionsExport(
    data: GetApiFinancialTransactionsExportData = {}
  ): CancelablePromise<GetApiFinancialTransactionsExportResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/financial/transactions/export',
      query: {
        format: data.format,
        accountId: data.accountId,
        dateFrom: data.dateFrom,
        dateTo: data.dateTo,
      },
      errors: {
        400: 'Invalid parameters',
      },
    });
  }

  /**
   * List attachments
   * @param data The data for the request.
   * @param data.page
   * @param data.limit
   * @param data.invoiceId
   * @param data.fileType
   * @returns AttachmentListResponse List of attachments
   * @throws ApiError
   */
  public static getApiFinancialAttachments(
    data: GetApiFinancialAttachmentsData = {}
  ): CancelablePromise<GetApiFinancialAttachmentsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/financial/attachments',
      query: {
        page: data.page,
        limit: data.limit,
        invoiceId: data.invoiceId,
        fileType: data.fileType,
      },
      errors: {
        400: 'Invalid parameters',
      },
    });
  }

  /**
   * Get attachment by ID
   * @param data The data for the request.
   * @param data.id
   * @returns Attachment Attachment details
   * @throws ApiError
   */
  public static getApiFinancialAttachmentsById(
    data: GetApiFinancialAttachmentsByIdData
  ): CancelablePromise<GetApiFinancialAttachmentsByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/financial/attachments/{id}',
      path: {
        id: data.id,
      },
      errors: {
        404: 'Attachment not found',
      },
    });
  }
}
