// This file is auto-generated by @hey-api/openapi-ts

export const $Error = {
  type: 'object',
  required: ['message', 'code'],
  properties: {
    message: {
      type: 'string',
      description: 'Error message',
    },
    code: {
      type: 'string',
      description: 'Error code (BAD_REQUEST, NOT_FOUND, etc.)',
    },
  },
} as const;

export const $PaginationInfo = {
  type: 'object',
  required: ['page', 'limit', 'total'],
  properties: {
    page: {
      type: 'integer',
      minimum: 1,
    },
    limit: {
      type: 'integer',
      minimum: 1,
      maximum: 100,
    },
    total: {
      type: 'integer',
      minimum: 0,
    },
  },
} as const;

export const $Account = {
  type: 'object',
  required: ['id', 'account_id', 'name', 'type'],
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    account_id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    type: {
      type: 'string',
    },
    institution: {
      type: 'string',
    },
    institution_id: {
      type: 'string',
    },
    iban: {
      type: 'string',
    },
    currency: {
      type: 'string',
    },
    balance: {
      type: 'number',
    },
    available_balance: {
      type: 'number',
    },
    is_active: {
      type: 'boolean',
    },
    last_sync: {
      type: 'string',
      format: 'date-time',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
    },
  },
} as const;

export const $AccountListResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/PaginationInfo',
    },
    {
      type: 'object',
      required: ['accounts'],
      properties: {
        accounts: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/Account',
          },
        },
      },
    },
  ],
} as const;

export const $Client = {
  type: 'object',
  required: ['id', 'name', 'email', 'status'],
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    name: {
      type: 'string',
    },
    email: {
      type: 'string',
      format: 'email',
    },
    taxId: {
      type: 'string',
    },
    phone: {
      type: 'string',
    },
    address: {
      type: 'string',
    },
    city: {
      type: 'string',
    },
    postalCode: {
      type: 'string',
    },
    country: {
      type: 'string',
    },
    status: {
      type: 'string',
      enum: ['active', 'inactive'],
    },
    notes: {
      type: 'string',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
  },
} as const;

export const $ClientListResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/PaginationInfo',
    },
    {
      type: 'object',
      required: ['clients'],
      properties: {
        clients: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/Client',
          },
        },
      },
    },
  ],
} as const;

export const $Invoice = {
  type: 'object',
  required: ['id', 'invoiceNumber', 'clientId', 'status', 'total', 'issueDate', 'dueDate'],
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    invoiceNumber: {
      type: 'string',
    },
    clientId: {
      type: 'string',
      format: 'uuid',
    },
    clientName: {
      type: 'string',
    },
    clientTaxId: {
      type: 'string',
    },
    status: {
      type: 'string',
      enum: ['draft', 'sent', 'paid', 'overdue', 'cancelled'],
    },
    total: {
      type: 'number',
    },
    subtotal: {
      type: 'number',
    },
    tax: {
      type: 'number',
    },
    issueDate: {
      type: 'string',
      format: 'date',
    },
    dueDate: {
      type: 'string',
      format: 'date',
    },
    paidDate: {
      type: 'string',
      format: 'date',
    },
    notes: {
      type: 'string',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/InvoiceItem',
      },
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
  },
} as const;

export const $InvoiceItem = {
  type: 'object',
  required: ['description', 'quantity', 'unitPrice', 'total'],
  properties: {
    description: {
      type: 'string',
    },
    quantity: {
      type: 'number',
    },
    unitPrice: {
      type: 'number',
    },
    total: {
      type: 'number',
    },
  },
} as const;

export const $InvoiceListResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/PaginationInfo',
    },
    {
      type: 'object',
      required: ['invoices'],
      properties: {
        invoices: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/Invoice',
          },
        },
      },
    },
  ],
} as const;

export const $Transaction = {
  type: 'object',
  required: ['id', 'transaction_id', 'account_id', 'amount', 'type', 'date'],
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    transaction_id: {
      type: 'string',
    },
    account_id: {
      type: 'string',
    },
    amount: {
      type: 'number',
    },
    currency: {
      type: 'string',
    },
    type: {
      type: 'string',
      enum: ['debit', 'credit', 'transfer'],
    },
    status: {
      type: 'string',
      enum: ['pending', 'confirmed', 'failed', 'cancelled'],
    },
    description: {
      type: 'string',
    },
    reference: {
      type: 'string',
    },
    counterparty_name: {
      type: 'string',
    },
    counterparty_account: {
      type: 'string',
    },
    date: {
      type: 'string',
      format: 'date',
    },
    tags: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    fee_amount: {
      type: 'number',
    },
    fee_currency: {
      type: 'string',
    },
    metadata: {
      type: 'object',
    },
    gocardless_data: {
      type: 'object',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
    },
    updated_at: {
      type: 'string',
      format: 'date-time',
    },
  },
} as const;

export const $TransactionListResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/PaginationInfo',
    },
    {
      type: 'object',
      required: ['transactions'],
      properties: {
        transactions: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/Transaction',
          },
        },
        stats: {
          type: 'object',
          properties: {
            totalIncome: {
              type: 'number',
            },
            totalExpenses: {
              type: 'number',
            },
          },
        },
      },
    },
  ],
} as const;

export const $Attachment = {
  type: 'object',
  required: ['id', 'invoiceId', 'fileName', 'filePath', 'fileSize', 'fileType', 'uploadedAt'],
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
    },
    invoiceId: {
      type: 'string',
      format: 'uuid',
    },
    fileName: {
      type: 'string',
    },
    filePath: {
      type: 'string',
    },
    fileSize: {
      type: 'integer',
    },
    fileType: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    uploadedBy: {
      type: 'string',
    },
    uploadedAt: {
      type: 'string',
      format: 'date-time',
    },
    isDeleted: {
      type: 'boolean',
    },
    deletedAt: {
      type: 'string',
      format: 'date-time',
    },
    deletedBy: {
      type: 'string',
    },
  },
} as const;

export const $AttachmentListResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/PaginationInfo',
    },
    {
      type: 'object',
      required: ['attachments'],
      properties: {
        attachments: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/Attachment',
          },
        },
      },
    },
  ],
} as const;
