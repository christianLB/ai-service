// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetTradingStrategiesData, GetTradingStrategiesResponse, PostTradingStrategiesData, PostTradingStrategiesResponse, GetTradingStrategiesByStrategyIdData, GetTradingStrategiesByStrategyIdResponse, PutTradingStrategiesByStrategyIdData, PutTradingStrategiesByStrategyIdResponse, DeleteTradingStrategiesByStrategyIdData, DeleteTradingStrategiesByStrategyIdResponse, PostTradingStrategiesByStrategyIdActivateData, PostTradingStrategiesByStrategyIdActivateResponse, PostTradingStrategiesByStrategyIdDeactivateData, PostTradingStrategiesByStrategyIdDeactivateResponse, GetTradesData, GetTradesResponse, PostTradesData, PostTradesResponse, GetTradesByTradeIdData, GetTradesByTradeIdResponse, PutTradesByTradeIdData, PutTradesByTradeIdResponse, DeleteTradesByTradeIdData, DeleteTradesByTradeIdResponse, GetTradesSearchData, GetTradesSearchResponse, GetTradingPositionsData, GetTradingPositionsResponse, PostTradingPositionsData, PostTradingPositionsResponse, GetTradingPositionsByPositionIdData, GetTradingPositionsByPositionIdResponse, PutTradingPositionsByPositionIdData, PutTradingPositionsByPositionIdResponse, DeleteTradingPositionsByPositionIdData, DeleteTradingPositionsByPositionIdResponse, PostTradingExecuteData, PostTradingExecuteResponse, GetTradingBalanceData, GetTradingBalanceResponse, GetTradingMarketDataData, GetTradingMarketDataResponse, PostArbitrageDeployData, PostArbitrageDeployResponse, GetArbitrageStatusResponse, PostArbitrageStopResponse, PostTradingBacktestData, PostTradingBacktestResponse } from './types.gen';

export class StrategiesService {
    /**
     * List trading strategies
     * @param data The data for the request.
     * @param data.page Page number
     * @param data.limit Items per page
     * @param data.active Filter by active status
     * @returns StrategyListResponse Strategies retrieved successfully
     * @throws ApiError
     */
    public static getTradingStrategies(data: GetTradingStrategiesData = {}): CancelablePromise<GetTradingStrategiesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/trading/strategies',
            query: {
                page: data.page,
                limit: data.limit,
                active: data.active
            },
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Create trading strategy
     * @param data The data for the request.
     * @param data.requestBody
     * @returns StrategyResponse Strategy created successfully
     * @throws ApiError
     */
    public static postTradingStrategies(data: PostTradingStrategiesData): CancelablePromise<PostTradingStrategiesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/trading/strategies',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get strategy details
     * @param data The data for the request.
     * @param data.strategyId Strategy identifier
     * @returns StrategyResponse Strategy retrieved successfully
     * @throws ApiError
     */
    public static getTradingStrategiesByStrategyId(data: GetTradingStrategiesByStrategyIdData): CancelablePromise<GetTradingStrategiesByStrategyIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/trading/strategies/{strategyId}',
            path: {
                strategyId: data.strategyId
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Update strategy
     * @param data The data for the request.
     * @param data.strategyId Strategy identifier
     * @param data.requestBody
     * @returns StrategyResponse Strategy updated successfully
     * @throws ApiError
     */
    public static putTradingStrategiesByStrategyId(data: PutTradingStrategiesByStrategyIdData): CancelablePromise<PutTradingStrategiesByStrategyIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/trading/strategies/{strategyId}',
            path: {
                strategyId: data.strategyId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Delete strategy
     * @param data The data for the request.
     * @param data.strategyId Strategy identifier
     * @returns MessageResponse Strategy deleted successfully
     * @throws ApiError
     */
    public static deleteTradingStrategiesByStrategyId(data: DeleteTradingStrategiesByStrategyIdData): CancelablePromise<DeleteTradingStrategiesByStrategyIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/trading/strategies/{strategyId}',
            path: {
                strategyId: data.strategyId
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Activate strategy
     * @param data The data for the request.
     * @param data.strategyId Strategy identifier
     * @returns StrategyResponse Strategy activated successfully
     * @throws ApiError
     */
    public static postTradingStrategiesByStrategyIdActivate(data: PostTradingStrategiesByStrategyIdActivateData): CancelablePromise<PostTradingStrategiesByStrategyIdActivateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/trading/strategies/{strategyId}/activate',
            path: {
                strategyId: data.strategyId
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Deactivate strategy
     * @param data The data for the request.
     * @param data.strategyId Strategy identifier
     * @returns StrategyResponse Strategy deactivated successfully
     * @throws ApiError
     */
    public static postTradingStrategiesByStrategyIdDeactivate(data: PostTradingStrategiesByStrategyIdDeactivateData): CancelablePromise<PostTradingStrategiesByStrategyIdDeactivateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/trading/strategies/{strategyId}/deactivate',
            path: {
                strategyId: data.strategyId
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
}

export class TradingService {
    /**
     * List all trades
     * @param data The data for the request.
     * @param data.page Page number
     * @param data.limit Items per page
     * @param data.symbol Filter by trading symbol
     * @param data.exchange Filter by exchange
     * @param data.side Filter by trade side
     * @param data.startDate Start date for trade range
     * @param data.endDate End date for trade range
     * @returns TradeListResponse Trades retrieved successfully
     * @throws ApiError
     */
    public static getTrades(data: GetTradesData = {}): CancelablePromise<GetTradesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/trades',
            query: {
                page: data.page,
                limit: data.limit,
                symbol: data.symbol,
                exchange: data.exchange,
                side: data.side,
                startDate: data.startDate,
                endDate: data.endDate
            },
            errors: {
                401: 'Unauthorized',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Create new trade
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TradeResponse Trade created successfully
     * @throws ApiError
     */
    public static postTrades(data: PostTradesData): CancelablePromise<PostTradesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/trades',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get trade details
     * @param data The data for the request.
     * @param data.tradeId Trade identifier
     * @returns TradeResponse Trade retrieved successfully
     * @throws ApiError
     */
    public static getTradesByTradeId(data: GetTradesByTradeIdData): CancelablePromise<GetTradesByTradeIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/trades/{tradeId}',
            path: {
                tradeId: data.tradeId
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Update trade
     * @param data The data for the request.
     * @param data.tradeId Trade identifier
     * @param data.requestBody
     * @returns TradeResponse Trade updated successfully
     * @throws ApiError
     */
    public static putTradesByTradeId(data: PutTradesByTradeIdData): CancelablePromise<PutTradesByTradeIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/trades/{tradeId}',
            path: {
                tradeId: data.tradeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Delete trade
     * @param data The data for the request.
     * @param data.tradeId Trade identifier
     * @returns MessageResponse Trade deleted successfully
     * @throws ApiError
     */
    public static deleteTradesByTradeId(data: DeleteTradesByTradeIdData): CancelablePromise<DeleteTradesByTradeIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/trades/{tradeId}',
            path: {
                tradeId: data.tradeId
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Search trades
     * @param data The data for the request.
     * @param data.query Search query (symbol, exchange, etc.)
     * @param data.page Page number
     * @param data.limit Items per page
     * @param data.minAmount Minimum trade amount
     * @param data.maxAmount Maximum trade amount
     * @returns TradeListResponse Search results retrieved successfully
     * @throws ApiError
     */
    public static getTradesSearch(data: GetTradesSearchData): CancelablePromise<GetTradesSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/trades/search',
            query: {
                page: data.page,
                limit: data.limit,
                query: data.query,
                minAmount: data.minAmount,
                maxAmount: data.maxAmount
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get active positions
     * @param data The data for the request.
     * @param data.page Page number
     * @param data.limit Items per page
     * @param data.exchange Filter by exchange
     * @param data.symbol Filter by trading symbol
     * @param data.side Filter by position side
     * @returns PositionListResponse Positions retrieved successfully
     * @throws ApiError
     */
    public static getTradingPositions(data: GetTradingPositionsData = {}): CancelablePromise<GetTradingPositionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/trading/positions',
            query: {
                page: data.page,
                limit: data.limit,
                exchange: data.exchange,
                symbol: data.symbol,
                side: data.side
            },
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Create new position
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PositionResponse Position created successfully
     * @throws ApiError
     */
    public static postTradingPositions(data: PostTradingPositionsData): CancelablePromise<PostTradingPositionsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/trading/positions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get position details
     * @param data The data for the request.
     * @param data.positionId Position identifier
     * @returns PositionResponse Position retrieved successfully
     * @throws ApiError
     */
    public static getTradingPositionsByPositionId(data: GetTradingPositionsByPositionIdData): CancelablePromise<GetTradingPositionsByPositionIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/trading/positions/{positionId}',
            path: {
                positionId: data.positionId
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Update position
     * @param data The data for the request.
     * @param data.positionId Position identifier
     * @param data.requestBody
     * @returns PositionResponse Position updated successfully
     * @throws ApiError
     */
    public static putTradingPositionsByPositionId(data: PutTradingPositionsByPositionIdData): CancelablePromise<PutTradingPositionsByPositionIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/trading/positions/{positionId}',
            path: {
                positionId: data.positionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Delete position
     * @param data The data for the request.
     * @param data.positionId Position identifier
     * @returns MessageResponse Position deleted successfully
     * @throws ApiError
     */
    public static deleteTradingPositionsByPositionId(data: DeleteTradingPositionsByPositionIdData): CancelablePromise<DeleteTradingPositionsByPositionIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/trading/positions/{positionId}',
            path: {
                positionId: data.positionId
            },
            errors: {
                401: 'Unauthorized',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Execute trade
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TradeResponse Trade executed successfully
     * @throws ApiError
     */
    public static postTradingExecute(data: PostTradingExecuteData): CancelablePromise<PostTradingExecuteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/trading/execute',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get account balance
     * @param data The data for the request.
     * @param data.exchange Exchange to get balance from
     * @returns BalanceResponse Balance retrieved successfully
     * @throws ApiError
     */
    public static getTradingBalance(data: GetTradingBalanceData = {}): CancelablePromise<GetTradingBalanceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/trading/balance',
            query: {
                exchange: data.exchange
            },
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
}

export class MarketDataService {
    /**
     * Get market data
     * @param data The data for the request.
     * @param data.symbol Trading symbol (e.g., BTC/USDT)
     * @param data.exchange
     * @returns MarketDataResponse Market data retrieved successfully
     * @throws ApiError
     */
    public static getTradingMarketData(data: GetTradingMarketDataData): CancelablePromise<GetTradingMarketDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/trading/market-data',
            query: {
                symbol: data.symbol,
                exchange: data.exchange
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
}

export class ArbitrageService {
    /**
     * Deploy arbitrage bot
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ArbitrageStatusResponse Arbitrage bot deployed successfully
     * @throws ApiError
     */
    public static postArbitrageDeploy(data: PostArbitrageDeployData): CancelablePromise<PostArbitrageDeployResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/arbitrage/deploy',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Get arbitrage bot status
     * @returns ArbitrageStatusResponse Status retrieved successfully
     * @throws ApiError
     */
    public static getArbitrageStatus(): CancelablePromise<GetArbitrageStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/arbitrage/status',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Stop arbitrage bot
     * @returns MessageResponse Arbitrage bot stopped successfully
     * @throws ApiError
     */
    public static postArbitrageStop(): CancelablePromise<PostArbitrageStopResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/arbitrage/stop',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
}

export class BacktestingService {
    /**
     * Run strategy backtest
     * @param data The data for the request.
     * @param data.requestBody
     * @returns BacktestResponse Backtest completed successfully
     * @throws ApiError
     */
    public static postTradingBacktest(data: PostTradingBacktestData): CancelablePromise<PostTradingBacktestResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/trading/backtest',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized'
            }
        });
    }
    
}