// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  ListStrategiesData,
  ListStrategiesResponse,
  CreateStrategyData,
  CreateStrategyResponse,
  GetStrategyData,
  GetStrategyResponse,
  UpdateStrategyData,
  UpdateStrategyResponse,
  DeleteStrategyData,
  DeleteStrategyResponse,
  ActivateStrategyData,
  ActivateStrategyResponse,
  DeactivateStrategyData,
  DeactivateStrategyResponse,
  GetPositionsData,
  GetPositionsResponse,
  ExecuteTradeData,
  ExecuteTradeResponse,
  GetBalanceData,
  GetBalanceResponse,
  GetMarketDataData,
  GetMarketDataResponse,
  DeployArbitrageData,
  DeployArbitrageResponse,
  GetArbitrageStatusResponse,
  StopArbitrageResponse,
  RunBacktestData,
  RunBacktestResponse,
} from './types.gen';

export class StrategiesService {
  /**
   * List trading strategies
   * @param data The data for the request.
   * @param data.page Page number
   * @param data.limit Items per page
   * @param data.active Filter by active status
   * @returns StrategyListResponse Strategies retrieved successfully
   * @throws ApiError
   */
  public static listStrategies(
    data: ListStrategiesData = {}
  ): CancelablePromise<ListStrategiesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/trading/strategies',
      query: {
        page: data.page,
        limit: data.limit,
        active: data.active,
      },
      errors: {
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Create trading strategy
   * @param data The data for the request.
   * @param data.requestBody
   * @returns StrategyResponse Strategy created successfully
   * @throws ApiError
   */
  public static createStrategy(
    data: CreateStrategyData
  ): CancelablePromise<CreateStrategyResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/trading/strategies',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Get strategy details
   * @param data The data for the request.
   * @param data.strategyId Strategy identifier
   * @returns StrategyResponse Strategy retrieved successfully
   * @throws ApiError
   */
  public static getStrategy(data: GetStrategyData): CancelablePromise<GetStrategyResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/trading/strategies/{strategyId}',
      path: {
        strategyId: data.strategyId,
      },
      errors: {
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }

  /**
   * Update strategy
   * @param data The data for the request.
   * @param data.strategyId Strategy identifier
   * @param data.requestBody
   * @returns StrategyResponse Strategy updated successfully
   * @throws ApiError
   */
  public static updateStrategy(
    data: UpdateStrategyData
  ): CancelablePromise<UpdateStrategyResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/trading/strategies/{strategyId}',
      path: {
        strategyId: data.strategyId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }

  /**
   * Delete strategy
   * @param data The data for the request.
   * @param data.strategyId Strategy identifier
   * @returns MessageResponse Strategy deleted successfully
   * @throws ApiError
   */
  public static deleteStrategy(
    data: DeleteStrategyData
  ): CancelablePromise<DeleteStrategyResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/trading/strategies/{strategyId}',
      path: {
        strategyId: data.strategyId,
      },
      errors: {
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }

  /**
   * Activate strategy
   * @param data The data for the request.
   * @param data.strategyId Strategy identifier
   * @returns StrategyResponse Strategy activated successfully
   * @throws ApiError
   */
  public static activateStrategy(
    data: ActivateStrategyData
  ): CancelablePromise<ActivateStrategyResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/trading/strategies/{strategyId}/activate',
      path: {
        strategyId: data.strategyId,
      },
      errors: {
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }

  /**
   * Deactivate strategy
   * @param data The data for the request.
   * @param data.strategyId Strategy identifier
   * @returns StrategyResponse Strategy deactivated successfully
   * @throws ApiError
   */
  public static deactivateStrategy(
    data: DeactivateStrategyData
  ): CancelablePromise<DeactivateStrategyResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/trading/strategies/{strategyId}/deactivate',
      path: {
        strategyId: data.strategyId,
      },
      errors: {
        401: 'Unauthorized',
        404: 'Not found',
      },
    });
  }
}

export class TradingService {
  /**
   * Get active positions
   * @param data The data for the request.
   * @param data.exchange Filter by exchange
   * @returns PositionListResponse Positions retrieved successfully
   * @throws ApiError
   */
  public static getPositions(data: GetPositionsData = {}): CancelablePromise<GetPositionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/trading/positions',
      query: {
        exchange: data.exchange,
      },
      errors: {
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Execute trade
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TradeResponse Trade executed successfully
   * @throws ApiError
   */
  public static executeTrade(data: ExecuteTradeData): CancelablePromise<ExecuteTradeResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/trading/execute',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Get account balance
   * @param data The data for the request.
   * @param data.exchange Exchange to get balance from
   * @returns BalanceResponse Balance retrieved successfully
   * @throws ApiError
   */
  public static getBalance(data: GetBalanceData = {}): CancelablePromise<GetBalanceResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/trading/balance',
      query: {
        exchange: data.exchange,
      },
      errors: {
        401: 'Unauthorized',
      },
    });
  }
}

export class MarketDataService {
  /**
   * Get market data
   * @param data The data for the request.
   * @param data.symbol Trading symbol (e.g., BTC/USDT)
   * @param data.exchange
   * @returns MarketDataResponse Market data retrieved successfully
   * @throws ApiError
   */
  public static getMarketData(data: GetMarketDataData): CancelablePromise<GetMarketDataResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/trading/market-data',
      query: {
        symbol: data.symbol,
        exchange: data.exchange,
      },
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }
}

export class ArbitrageService {
  /**
   * Deploy arbitrage bot
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ArbitrageStatusResponse Arbitrage bot deployed successfully
   * @throws ApiError
   */
  public static deployArbitrage(
    data: DeployArbitrageData
  ): CancelablePromise<DeployArbitrageResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/arbitrage/deploy',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Get arbitrage bot status
   * @returns ArbitrageStatusResponse Status retrieved successfully
   * @throws ApiError
   */
  public static getArbitrageStatus(): CancelablePromise<GetArbitrageStatusResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/arbitrage/status',
      errors: {
        401: 'Unauthorized',
      },
    });
  }

  /**
   * Stop arbitrage bot
   * @returns MessageResponse Arbitrage bot stopped successfully
   * @throws ApiError
   */
  public static stopArbitrage(): CancelablePromise<StopArbitrageResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/arbitrage/stop',
      errors: {
        401: 'Unauthorized',
      },
    });
  }
}

export class BacktestingService {
  /**
   * Run strategy backtest
   * @param data The data for the request.
   * @param data.requestBody
   * @returns BacktestResponse Backtest completed successfully
   * @throws ApiError
   */
  public static runBacktest(data: RunBacktestData): CancelablePromise<RunBacktestResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/trading/backtest',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request',
        401: 'Unauthorized',
      },
    });
  }
}
