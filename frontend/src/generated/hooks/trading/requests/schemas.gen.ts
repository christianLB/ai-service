// This file is auto-generated by @hey-api/openapi-ts

export const $TradingStrategy = {
  type: 'object',
  required: ['id', 'name', 'type', 'isActive', 'createdAt'],
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    type: {
      type: 'string',
      enum: ['scalping', 'swing', 'arbitrage', 'dca', 'grid'],
    },
    parameters: {
      type: 'object',
      additionalProperties: true,
    },
    isActive: {
      type: 'boolean',
    },
    performance: {
      $ref: '#/components/schemas/StrategyPerformance',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
    },
  },
} as const;

export const $StrategyPerformance = {
  type: 'object',
  properties: {
    totalTrades: {
      type: 'integer',
    },
    winRate: {
      type: 'number',
    },
    profitLoss: {
      type: 'number',
    },
    sharpeRatio: {
      type: 'number',
    },
  },
} as const;

export const $CreateStrategyRequest = {
  type: 'object',
  required: ['name', 'type', 'parameters'],
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    type: {
      type: 'string',
      enum: ['scalping', 'swing', 'arbitrage', 'dca', 'grid'],
    },
    parameters: {
      type: 'object',
      additionalProperties: true,
    },
  },
} as const;

export const $UpdateStrategyRequest = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    parameters: {
      type: 'object',
      additionalProperties: true,
    },
  },
} as const;

export const $Position = {
  type: 'object',
  required: ['id', 'symbol', 'side', 'quantity', 'entryPrice'],
  properties: {
    id: {
      type: 'string',
    },
    symbol: {
      type: 'string',
    },
    side: {
      type: 'string',
      enum: ['long', 'short'],
    },
    quantity: {
      type: 'number',
    },
    entryPrice: {
      type: 'number',
    },
    currentPrice: {
      type: 'number',
    },
    unrealizedPnl: {
      type: 'number',
    },
    exchange: {
      type: 'string',
    },
  },
} as const;

export const $ExecuteTradeRequest = {
  type: 'object',
  required: ['symbol', 'side', 'quantity', 'type'],
  properties: {
    symbol: {
      type: 'string',
    },
    side: {
      type: 'string',
      enum: ['buy', 'sell'],
    },
    quantity: {
      type: 'number',
    },
    type: {
      type: 'string',
      enum: ['market', 'limit'],
    },
    price: {
      type: 'number',
      description: 'Required for limit orders',
    },
    exchange: {
      type: 'string',
      enum: ['binance', 'coinbase', 'alpaca'],
    },
  },
} as const;

export const $Trade = {
  type: 'object',
  required: ['id', 'symbol', 'side', 'quantity', 'price', 'timestamp'],
  properties: {
    id: {
      type: 'string',
    },
    symbol: {
      type: 'string',
    },
    side: {
      type: 'string',
      enum: ['buy', 'sell'],
    },
    quantity: {
      type: 'number',
    },
    price: {
      type: 'number',
    },
    fee: {
      type: 'number',
    },
    exchange: {
      type: 'string',
    },
    timestamp: {
      type: 'string',
      format: 'date-time',
    },
  },
} as const;

export const $MarketData = {
  type: 'object',
  properties: {
    symbol: {
      type: 'string',
    },
    bid: {
      type: 'number',
    },
    ask: {
      type: 'number',
    },
    last: {
      type: 'number',
    },
    volume24h: {
      type: 'number',
    },
    change24h: {
      type: 'number',
    },
    timestamp: {
      type: 'string',
      format: 'date-time',
    },
  },
} as const;

export const $Balance = {
  type: 'object',
  properties: {
    currency: {
      type: 'string',
    },
    available: {
      type: 'number',
    },
    locked: {
      type: 'number',
    },
    total: {
      type: 'number',
    },
  },
} as const;

export const $DeployArbitrageRequest = {
  type: 'object',
  properties: {
    minSpread: {
      type: 'number',
      default: 0.005,
    },
    maxPositionSize: {
      type: 'number',
      default: 1000,
    },
    exchanges: {
      type: 'array',
      items: {
        type: 'string',
        enum: ['binance', 'coinbase'],
      },
    },
  },
} as const;

export const $ArbitrageStatus = {
  type: 'object',
  properties: {
    isRunning: {
      type: 'boolean',
    },
    startedAt: {
      type: 'string',
      format: 'date-time',
    },
    totalTrades: {
      type: 'integer',
    },
    totalProfit: {
      type: 'number',
    },
    currentOpportunities: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ArbitrageOpportunity',
      },
    },
  },
} as const;

export const $ArbitrageOpportunity = {
  type: 'object',
  properties: {
    symbol: {
      type: 'string',
    },
    buyExchange: {
      type: 'string',
    },
    sellExchange: {
      type: 'string',
    },
    spread: {
      type: 'number',
    },
    estimatedProfit: {
      type: 'number',
    },
  },
} as const;

export const $BacktestRequest = {
  type: 'object',
  required: ['strategyId', 'startDate', 'endDate'],
  properties: {
    strategyId: {
      type: 'string',
    },
    startDate: {
      type: 'string',
      format: 'date',
    },
    endDate: {
      type: 'string',
      format: 'date',
    },
    initialCapital: {
      type: 'number',
      default: 10000,
    },
  },
} as const;

export const $BacktestResult = {
  type: 'object',
  properties: {
    totalReturn: {
      type: 'number',
    },
    sharpeRatio: {
      type: 'number',
    },
    maxDrawdown: {
      type: 'number',
    },
    winRate: {
      type: 'number',
    },
    totalTrades: {
      type: 'integer',
    },
    trades: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Trade',
      },
    },
  },
} as const;

export const $StrategyResponse = {
  type: 'object',
  required: ['success', 'data'],
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/TradingStrategy',
    },
  },
} as const;

export const $StrategyListResponse = {
  type: 'object',
  required: ['success', 'data', 'pagination'],
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TradingStrategy',
      },
    },
    pagination: {
      $ref: '#/components/schemas/PaginationMeta',
    },
  },
} as const;

export const $PositionListResponse = {
  type: 'object',
  required: ['success', 'data'],
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Position',
      },
    },
  },
} as const;

export const $TradeResponse = {
  type: 'object',
  required: ['success', 'data'],
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/Trade',
    },
  },
} as const;

export const $BalanceResponse = {
  type: 'object',
  required: ['success', 'data'],
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Balance',
      },
    },
  },
} as const;

export const $MarketDataResponse = {
  type: 'object',
  required: ['success', 'data'],
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/MarketData',
    },
  },
} as const;

export const $ArbitrageStatusResponse = {
  type: 'object',
  required: ['success', 'data'],
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/ArbitrageStatus',
    },
  },
} as const;

export const $BacktestResponse = {
  type: 'object',
  required: ['success', 'data'],
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/BacktestResult',
    },
  },
} as const;

export const $MessageResponse = {
  type: 'object',
  required: ['success', 'message'],
  properties: {
    success: {
      type: 'boolean',
    },
    message: {
      type: 'string',
    },
  },
} as const;

export const $PaginationMeta = {
  type: 'object',
  required: ['page', 'limit', 'total', 'totalPages'],
  properties: {
    page: {
      type: 'integer',
    },
    limit: {
      type: 'integer',
    },
    total: {
      type: 'integer',
    },
    totalPages: {
      type: 'integer',
    },
  },
} as const;

export const $ErrorResponse = {
  type: 'object',
  required: ['success', 'error'],
  properties: {
    success: {
      type: 'boolean',
      default: false,
    },
    error: {
      type: 'object',
      required: ['code', 'message'],
      properties: {
        code: {
          type: 'string',
        },
        message: {
          type: 'string',
        },
        details: {
          type: 'object',
          additionalProperties: true,
        },
      },
    },
  },
} as const;
