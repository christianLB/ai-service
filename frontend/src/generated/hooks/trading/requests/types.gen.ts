// This file is auto-generated by @hey-api/openapi-ts

export type TradingStrategy = {
    id: string;
    name: string;
    description?: string;
    type: 'scalping' | 'swing' | 'arbitrage' | 'dca' | 'grid';
    parameters?: {
        [key: string]: unknown;
    };
    isActive: boolean;
    performance?: StrategyPerformance;
    createdAt: string;
    updatedAt?: string;
};

export type type = 'scalping' | 'swing' | 'arbitrage' | 'dca' | 'grid';

export type StrategyPerformance = {
    totalTrades?: number;
    winRate?: number;
    profitLoss?: number;
    sharpeRatio?: number;
};

export type CreateStrategyRequest = {
    name: string;
    description?: string;
    type: 'scalping' | 'swing' | 'arbitrage' | 'dca' | 'grid';
    parameters: {
        [key: string]: unknown;
    };
};

export type UpdateStrategyRequest = {
    name?: string;
    description?: string;
    parameters?: {
        [key: string]: unknown;
    };
};

export type Position = {
    id: string;
    symbol: string;
    side: 'long' | 'short';
    quantity: number;
    entryPrice: number;
    currentPrice?: number;
    unrealizedPnl?: number;
    exchange?: string;
};

export type side = 'long' | 'short';

export type ExecuteTradeRequest = {
    symbol: string;
    side: 'buy' | 'sell';
    quantity: number;
    type: 'market' | 'limit';
    /**
     * Required for limit orders
     */
    price?: number;
    exchange?: 'binance' | 'coinbase' | 'alpaca';
};

export type side2 = 'buy' | 'sell';

export type type2 = 'market' | 'limit';

export type exchange = 'binance' | 'coinbase' | 'alpaca';

export type Trade = {
    id: string;
    symbol: string;
    side: 'buy' | 'sell';
    quantity: number;
    price: number;
    fee?: number;
    exchange?: string;
    timestamp: string;
};

export type CreateTradeRequest = {
    /**
     * Trading symbol (e.g., BTC/USDT)
     */
    symbol: string;
    /**
     * Trade side
     */
    side: 'buy' | 'sell';
    /**
     * Trade quantity
     */
    quantity: number;
    /**
     * Trade price
     */
    price: number;
    /**
     * Trading fee
     */
    fee?: number;
    /**
     * Exchange where trade was executed
     */
    exchange?: 'binance' | 'coinbase' | 'alpaca';
    /**
     * Associated trading strategy
     */
    strategyId?: string;
    /**
     * Additional notes about the trade
     */
    notes?: string;
};

export type UpdateTradeRequest = {
    /**
     * Updated trade quantity
     */
    quantity?: number;
    /**
     * Updated trade price
     */
    price?: number;
    /**
     * Updated trading fee
     */
    fee?: number;
    /**
     * Updated notes about the trade
     */
    notes?: string;
};

export type CreatePositionRequest = {
    /**
     * Trading symbol (e.g., BTC/USDT)
     */
    symbol: string;
    /**
     * Position side
     */
    side: 'long' | 'short';
    /**
     * Position size
     */
    quantity: number;
    /**
     * Entry price for the position
     */
    entryPrice: number;
    /**
     * Exchange where position is held
     */
    exchange?: 'binance' | 'coinbase' | 'alpaca';
    /**
     * Associated trading strategy
     */
    strategyId?: string;
    /**
     * Stop loss price
     */
    stopLoss?: number;
    /**
     * Take profit price
     */
    takeProfit?: number;
};

export type UpdatePositionRequest = {
    /**
     * Updated position size
     */
    quantity?: number;
    /**
     * Updated stop loss price
     */
    stopLoss?: number;
    /**
     * Updated take profit price
     */
    takeProfit?: number;
};

export type MarketData = {
    symbol?: string;
    bid?: number;
    ask?: number;
    last?: number;
    volume24h?: number;
    change24h?: number;
    timestamp?: string;
};

export type Balance = {
    currency?: string;
    available?: number;
    locked?: number;
    total?: number;
};

export type DeployArbitrageRequest = {
    minSpread?: number;
    maxPositionSize?: number;
    exchanges?: Array<('binance' | 'coinbase')>;
};

export type ArbitrageStatus = {
    isRunning?: boolean;
    startedAt?: string;
    totalTrades?: number;
    totalProfit?: number;
    currentOpportunities?: Array<ArbitrageOpportunity>;
};

export type ArbitrageOpportunity = {
    symbol?: string;
    buyExchange?: string;
    sellExchange?: string;
    spread?: number;
    estimatedProfit?: number;
};

export type BacktestRequest = {
    strategyId: string;
    startDate: string;
    endDate: string;
    initialCapital?: number;
};

export type BacktestResult = {
    totalReturn?: number;
    sharpeRatio?: number;
    maxDrawdown?: number;
    winRate?: number;
    totalTrades?: number;
    trades?: Array<Trade>;
};

export type StrategyResponse = {
    success: boolean;
    data: TradingStrategy;
};

export type StrategyListResponse = {
    success: boolean;
    data: Array<TradingStrategy>;
    pagination: PaginationMeta;
};

export type PositionListResponse = {
    success: boolean;
    data: Array<Position>;
};

export type TradeResponse = {
    success: boolean;
    data: Trade;
};

export type TradeListResponse = {
    success: boolean;
    data: Array<Trade>;
    pagination: PaginationMeta;
};

export type PositionResponse = {
    success: boolean;
    data: Position;
};

export type BalanceResponse = {
    success: boolean;
    data: Array<Balance>;
};

export type MarketDataResponse = {
    success: boolean;
    data: MarketData;
};

export type ArbitrageStatusResponse = {
    success: boolean;
    data: ArbitrageStatus;
};

export type BacktestResponse = {
    success: boolean;
    data: BacktestResult;
};

export type MessageResponse = {
    success: boolean;
    message: string;
};

export type PaginationMeta = {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
};

export type ErrorResponse = {
    success: boolean;
    error: {
        code: string;
        message: string;
        details?: {
            [key: string]: unknown;
        };
    };
};

/**
 * Page number
 */
export type ParameterPageParam = number;

/**
 * Items per page
 */
export type ParameterLimitParam = number;

/**
 * Strategy identifier
 */
export type ParameterStrategyIdParam = string;

/**
 * Trade identifier
 */
export type ParameterTradeIdParam = string;

/**
 * Position identifier
 */
export type ParameterPositionIdParam = string;

export type GetTradingStrategiesData = {
    /**
     * Filter by active status
     */
    active?: boolean;
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Page number
     */
    page?: number;
};

export type GetTradingStrategiesResponse = StrategyListResponse;

export type PostTradingStrategiesData = {
    requestBody: CreateStrategyRequest;
};

export type PostTradingStrategiesResponse = StrategyResponse;

export type GetTradingStrategiesByStrategyIdData = {
    /**
     * Strategy identifier
     */
    strategyId: string;
};

export type GetTradingStrategiesByStrategyIdResponse = StrategyResponse;

export type PutTradingStrategiesByStrategyIdData = {
    requestBody: UpdateStrategyRequest;
    /**
     * Strategy identifier
     */
    strategyId: string;
};

export type PutTradingStrategiesByStrategyIdResponse = StrategyResponse;

export type DeleteTradingStrategiesByStrategyIdData = {
    /**
     * Strategy identifier
     */
    strategyId: string;
};

export type DeleteTradingStrategiesByStrategyIdResponse = MessageResponse;

export type PostTradingStrategiesByStrategyIdActivateData = {
    /**
     * Strategy identifier
     */
    strategyId: string;
};

export type PostTradingStrategiesByStrategyIdActivateResponse = StrategyResponse;

export type PostTradingStrategiesByStrategyIdDeactivateData = {
    /**
     * Strategy identifier
     */
    strategyId: string;
};

export type PostTradingStrategiesByStrategyIdDeactivateResponse = StrategyResponse;

export type GetTradesData = {
    /**
     * End date for trade range
     */
    endDate?: string;
    /**
     * Filter by exchange
     */
    exchange?: 'binance' | 'coinbase' | 'alpaca';
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Filter by trade side
     */
    side?: 'buy' | 'sell';
    /**
     * Start date for trade range
     */
    startDate?: string;
    /**
     * Filter by trading symbol
     */
    symbol?: string;
};

export type GetTradesResponse = TradeListResponse;

export type PostTradesData = {
    requestBody: CreateTradeRequest;
};

export type PostTradesResponse = TradeResponse;

export type GetTradesByTradeIdData = {
    /**
     * Trade identifier
     */
    tradeId: string;
};

export type GetTradesByTradeIdResponse = TradeResponse;

export type PutTradesByTradeIdData = {
    requestBody: UpdateTradeRequest;
    /**
     * Trade identifier
     */
    tradeId: string;
};

export type PutTradesByTradeIdResponse = TradeResponse;

export type DeleteTradesByTradeIdData = {
    /**
     * Trade identifier
     */
    tradeId: string;
};

export type DeleteTradesByTradeIdResponse = MessageResponse;

export type GetTradesSearchData = {
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Maximum trade amount
     */
    maxAmount?: number;
    /**
     * Minimum trade amount
     */
    minAmount?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Search query (symbol, exchange, etc.)
     */
    query: string;
};

export type GetTradesSearchResponse = TradeListResponse;

export type GetTradingPositionsData = {
    /**
     * Filter by exchange
     */
    exchange?: 'binance' | 'coinbase' | 'alpaca';
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Filter by position side
     */
    side?: 'long' | 'short';
    /**
     * Filter by trading symbol
     */
    symbol?: string;
};

export type GetTradingPositionsResponse = PositionListResponse;

export type PostTradingPositionsData = {
    requestBody: CreatePositionRequest;
};

export type PostTradingPositionsResponse = PositionResponse;

export type GetTradingPositionsByPositionIdData = {
    /**
     * Position identifier
     */
    positionId: string;
};

export type GetTradingPositionsByPositionIdResponse = PositionResponse;

export type PutTradingPositionsByPositionIdData = {
    /**
     * Position identifier
     */
    positionId: string;
    requestBody: UpdatePositionRequest;
};

export type PutTradingPositionsByPositionIdResponse = PositionResponse;

export type DeleteTradingPositionsByPositionIdData = {
    /**
     * Position identifier
     */
    positionId: string;
};

export type DeleteTradingPositionsByPositionIdResponse = MessageResponse;

export type PostTradingExecuteData = {
    requestBody: ExecuteTradeRequest;
};

export type PostTradingExecuteResponse = TradeResponse;

export type GetTradingBalanceData = {
    /**
     * Exchange to get balance from
     */
    exchange?: 'binance' | 'coinbase' | 'alpaca';
};

export type GetTradingBalanceResponse = BalanceResponse;

export type GetTradingMarketDataData = {
    exchange?: 'binance' | 'coinbase' | 'alpaca';
    /**
     * Trading symbol (e.g., BTC/USDT)
     */
    symbol: string;
};

export type GetTradingMarketDataResponse = MarketDataResponse;

export type PostArbitrageDeployData = {
    requestBody: DeployArbitrageRequest;
};

export type PostArbitrageDeployResponse = ArbitrageStatusResponse;

export type GetArbitrageStatusResponse = ArbitrageStatusResponse;

export type PostArbitrageStopResponse = MessageResponse;

export type PostTradingBacktestData = {
    requestBody: BacktestRequest;
};

export type PostTradingBacktestResponse = BacktestResponse;

export type $OpenApiTs = {
    '/trading/strategies': {
        get: {
            req: GetTradingStrategiesData;
            res: {
                /**
                 * Strategies retrieved successfully
                 */
                200: StrategyListResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
        post: {
            req: PostTradingStrategiesData;
            res: {
                /**
                 * Strategy created successfully
                 */
                201: StrategyResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/trading/strategies/{strategyId}': {
        get: {
            req: GetTradingStrategiesByStrategyIdData;
            res: {
                /**
                 * Strategy retrieved successfully
                 */
                200: StrategyResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
        put: {
            req: PutTradingStrategiesByStrategyIdData;
            res: {
                /**
                 * Strategy updated successfully
                 */
                200: StrategyResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
        delete: {
            req: DeleteTradingStrategiesByStrategyIdData;
            res: {
                /**
                 * Strategy deleted successfully
                 */
                200: MessageResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
    };
    '/trading/strategies/{strategyId}/activate': {
        post: {
            req: PostTradingStrategiesByStrategyIdActivateData;
            res: {
                /**
                 * Strategy activated successfully
                 */
                200: StrategyResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
    };
    '/trading/strategies/{strategyId}/deactivate': {
        post: {
            req: PostTradingStrategiesByStrategyIdDeactivateData;
            res: {
                /**
                 * Strategy deactivated successfully
                 */
                200: StrategyResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
    };
    '/trades': {
        get: {
            req: GetTradesData;
            res: {
                /**
                 * Trades retrieved successfully
                 */
                200: TradeListResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Internal server error
                 */
                500: ErrorResponse;
            };
        };
        post: {
            req: PostTradesData;
            res: {
                /**
                 * Trade created successfully
                 */
                201: TradeResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/trades/{tradeId}': {
        get: {
            req: GetTradesByTradeIdData;
            res: {
                /**
                 * Trade retrieved successfully
                 */
                200: TradeResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
        put: {
            req: PutTradesByTradeIdData;
            res: {
                /**
                 * Trade updated successfully
                 */
                200: TradeResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
        delete: {
            req: DeleteTradesByTradeIdData;
            res: {
                /**
                 * Trade deleted successfully
                 */
                200: MessageResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
    };
    '/trades/search': {
        get: {
            req: GetTradesSearchData;
            res: {
                /**
                 * Search results retrieved successfully
                 */
                200: TradeListResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/trading/positions': {
        get: {
            req: GetTradingPositionsData;
            res: {
                /**
                 * Positions retrieved successfully
                 */
                200: PositionListResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
        post: {
            req: PostTradingPositionsData;
            res: {
                /**
                 * Position created successfully
                 */
                201: PositionResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/trading/positions/{positionId}': {
        get: {
            req: GetTradingPositionsByPositionIdData;
            res: {
                /**
                 * Position retrieved successfully
                 */
                200: PositionResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
        put: {
            req: PutTradingPositionsByPositionIdData;
            res: {
                /**
                 * Position updated successfully
                 */
                200: PositionResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
        delete: {
            req: DeleteTradingPositionsByPositionIdData;
            res: {
                /**
                 * Position deleted successfully
                 */
                200: MessageResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
                /**
                 * Not found
                 */
                404: ErrorResponse;
            };
        };
    };
    '/trading/execute': {
        post: {
            req: PostTradingExecuteData;
            res: {
                /**
                 * Trade executed successfully
                 */
                200: TradeResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/trading/balance': {
        get: {
            req: GetTradingBalanceData;
            res: {
                /**
                 * Balance retrieved successfully
                 */
                200: BalanceResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/trading/market-data': {
        get: {
            req: GetTradingMarketDataData;
            res: {
                /**
                 * Market data retrieved successfully
                 */
                200: MarketDataResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/arbitrage/deploy': {
        post: {
            req: PostArbitrageDeployData;
            res: {
                /**
                 * Arbitrage bot deployed successfully
                 */
                200: ArbitrageStatusResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/arbitrage/status': {
        get: {
            res: {
                /**
                 * Status retrieved successfully
                 */
                200: ArbitrageStatusResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/arbitrage/stop': {
        post: {
            res: {
                /**
                 * Arbitrage bot stopped successfully
                 */
                200: MessageResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
    '/trading/backtest': {
        post: {
            req: PostTradingBacktestData;
            res: {
                /**
                 * Backtest completed successfully
                 */
                200: BacktestResponse;
                /**
                 * Bad request
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized
                 */
                401: ErrorResponse;
            };
        };
    };
};