// This file is auto-generated by @hey-api/openapi-ts

export type TradingStrategy = {
  id: string;
  name: string;
  description?: string;
  type: 'scalping' | 'swing' | 'arbitrage' | 'dca' | 'grid';
  parameters?: {
    [key: string]: unknown;
  };
  isActive: boolean;
  performance?: StrategyPerformance;
  createdAt: string;
  updatedAt?: string;
};

export type type = 'scalping' | 'swing' | 'arbitrage' | 'dca' | 'grid';

export type StrategyPerformance = {
  totalTrades?: number;
  winRate?: number;
  profitLoss?: number;
  sharpeRatio?: number;
};

export type CreateStrategyRequest = {
  name: string;
  description?: string;
  type: 'scalping' | 'swing' | 'arbitrage' | 'dca' | 'grid';
  parameters: {
    [key: string]: unknown;
  };
};

export type UpdateStrategyRequest = {
  name?: string;
  description?: string;
  parameters?: {
    [key: string]: unknown;
  };
};

export type Position = {
  id: string;
  symbol: string;
  side: 'long' | 'short';
  quantity: number;
  entryPrice: number;
  currentPrice?: number;
  unrealizedPnl?: number;
  exchange?: string;
};

export type side = 'long' | 'short';

export type ExecuteTradeRequest = {
  symbol: string;
  side: 'buy' | 'sell';
  quantity: number;
  type: 'market' | 'limit';
  /**
   * Required for limit orders
   */
  price?: number;
  exchange?: 'binance' | 'coinbase' | 'alpaca';
};

export type side2 = 'buy' | 'sell';

export type type2 = 'market' | 'limit';

export type exchange = 'binance' | 'coinbase' | 'alpaca';

export type Trade = {
  id: string;
  symbol: string;
  side: 'buy' | 'sell';
  quantity: number;
  price: number;
  fee?: number;
  exchange?: string;
  timestamp: string;
};

export type MarketData = {
  symbol?: string;
  bid?: number;
  ask?: number;
  last?: number;
  volume24h?: number;
  change24h?: number;
  timestamp?: string;
};

export type Balance = {
  currency?: string;
  available?: number;
  locked?: number;
  total?: number;
};

export type DeployArbitrageRequest = {
  minSpread?: number;
  maxPositionSize?: number;
  exchanges?: Array<'binance' | 'coinbase'>;
};

export type ArbitrageStatus = {
  isRunning?: boolean;
  startedAt?: string;
  totalTrades?: number;
  totalProfit?: number;
  currentOpportunities?: Array<ArbitrageOpportunity>;
};

export type ArbitrageOpportunity = {
  symbol?: string;
  buyExchange?: string;
  sellExchange?: string;
  spread?: number;
  estimatedProfit?: number;
};

export type BacktestRequest = {
  strategyId: string;
  startDate: string;
  endDate: string;
  initialCapital?: number;
};

export type BacktestResult = {
  totalReturn?: number;
  sharpeRatio?: number;
  maxDrawdown?: number;
  winRate?: number;
  totalTrades?: number;
  trades?: Array<Trade>;
};

export type StrategyResponse = {
  success: boolean;
  data: TradingStrategy;
};

export type StrategyListResponse = {
  success: boolean;
  data: Array<TradingStrategy>;
  pagination: PaginationMeta;
};

export type PositionListResponse = {
  success: boolean;
  data: Array<Position>;
};

export type TradeResponse = {
  success: boolean;
  data: Trade;
};

export type BalanceResponse = {
  success: boolean;
  data: Array<Balance>;
};

export type MarketDataResponse = {
  success: boolean;
  data: MarketData;
};

export type ArbitrageStatusResponse = {
  success: boolean;
  data: ArbitrageStatus;
};

export type BacktestResponse = {
  success: boolean;
  data: BacktestResult;
};

export type MessageResponse = {
  success: boolean;
  message: string;
};

export type PaginationMeta = {
  page: number;
  limit: number;
  total: number;
  totalPages: number;
};

export type ErrorResponse = {
  success: boolean;
  error: {
    code: string;
    message: string;
    details?: {
      [key: string]: unknown;
    };
  };
};

/**
 * Page number
 */
export type ParameterPageParam = number;

/**
 * Items per page
 */
export type ParameterLimitParam = number;

/**
 * Strategy identifier
 */
export type ParameterStrategyIdParam = string;

export type ListStrategiesData = {
  /**
   * Filter by active status
   */
  active?: boolean;
  /**
   * Items per page
   */
  limit?: number;
  /**
   * Page number
   */
  page?: number;
};

export type ListStrategiesResponse = StrategyListResponse;

export type CreateStrategyData = {
  requestBody: CreateStrategyRequest;
};

export type CreateStrategyResponse = StrategyResponse;

export type GetStrategyData = {
  /**
   * Strategy identifier
   */
  strategyId: string;
};

export type GetStrategyResponse = StrategyResponse;

export type UpdateStrategyData = {
  requestBody: UpdateStrategyRequest;
  /**
   * Strategy identifier
   */
  strategyId: string;
};

export type UpdateStrategyResponse = StrategyResponse;

export type DeleteStrategyData = {
  /**
   * Strategy identifier
   */
  strategyId: string;
};

export type DeleteStrategyResponse = MessageResponse;

export type ActivateStrategyData = {
  /**
   * Strategy identifier
   */
  strategyId: string;
};

export type ActivateStrategyResponse = StrategyResponse;

export type DeactivateStrategyData = {
  /**
   * Strategy identifier
   */
  strategyId: string;
};

export type DeactivateStrategyResponse = StrategyResponse;

export type GetPositionsData = {
  /**
   * Filter by exchange
   */
  exchange?: 'binance' | 'coinbase' | 'alpaca';
};

export type GetPositionsResponse = PositionListResponse;

export type ExecuteTradeData = {
  requestBody: ExecuteTradeRequest;
};

export type ExecuteTradeResponse = TradeResponse;

export type GetBalanceData = {
  /**
   * Exchange to get balance from
   */
  exchange?: 'binance' | 'coinbase' | 'alpaca';
};

export type GetBalanceResponse = BalanceResponse;

export type GetMarketDataData = {
  exchange?: 'binance' | 'coinbase' | 'alpaca';
  /**
   * Trading symbol (e.g., BTC/USDT)
   */
  symbol: string;
};

export type GetMarketDataResponse = MarketDataResponse;

export type DeployArbitrageData = {
  requestBody: DeployArbitrageRequest;
};

export type DeployArbitrageResponse = ArbitrageStatusResponse;

export type GetArbitrageStatusResponse = ArbitrageStatusResponse;

export type StopArbitrageResponse = MessageResponse;

export type RunBacktestData = {
  requestBody: BacktestRequest;
};

export type RunBacktestResponse = BacktestResponse;

export type $OpenApiTs = {
  '/trading/strategies': {
    get: {
      req: ListStrategiesData;
      res: {
        /**
         * Strategies retrieved successfully
         */
        200: StrategyListResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
    post: {
      req: CreateStrategyData;
      res: {
        /**
         * Strategy created successfully
         */
        201: StrategyResponse;
        /**
         * Bad request
         */
        400: ErrorResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  '/trading/strategies/{strategyId}': {
    get: {
      req: GetStrategyData;
      res: {
        /**
         * Strategy retrieved successfully
         */
        200: StrategyResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: ErrorResponse;
      };
    };
    put: {
      req: UpdateStrategyData;
      res: {
        /**
         * Strategy updated successfully
         */
        200: StrategyResponse;
        /**
         * Bad request
         */
        400: ErrorResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: ErrorResponse;
      };
    };
    delete: {
      req: DeleteStrategyData;
      res: {
        /**
         * Strategy deleted successfully
         */
        200: MessageResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: ErrorResponse;
      };
    };
  };
  '/trading/strategies/{strategyId}/activate': {
    post: {
      req: ActivateStrategyData;
      res: {
        /**
         * Strategy activated successfully
         */
        200: StrategyResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: ErrorResponse;
      };
    };
  };
  '/trading/strategies/{strategyId}/deactivate': {
    post: {
      req: DeactivateStrategyData;
      res: {
        /**
         * Strategy deactivated successfully
         */
        200: StrategyResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
        /**
         * Not found
         */
        404: ErrorResponse;
      };
    };
  };
  '/trading/positions': {
    get: {
      req: GetPositionsData;
      res: {
        /**
         * Positions retrieved successfully
         */
        200: PositionListResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  '/trading/execute': {
    post: {
      req: ExecuteTradeData;
      res: {
        /**
         * Trade executed successfully
         */
        200: TradeResponse;
        /**
         * Bad request
         */
        400: ErrorResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  '/trading/balance': {
    get: {
      req: GetBalanceData;
      res: {
        /**
         * Balance retrieved successfully
         */
        200: BalanceResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  '/trading/market-data': {
    get: {
      req: GetMarketDataData;
      res: {
        /**
         * Market data retrieved successfully
         */
        200: MarketDataResponse;
        /**
         * Bad request
         */
        400: ErrorResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  '/arbitrage/deploy': {
    post: {
      req: DeployArbitrageData;
      res: {
        /**
         * Arbitrage bot deployed successfully
         */
        200: ArbitrageStatusResponse;
        /**
         * Bad request
         */
        400: ErrorResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  '/arbitrage/status': {
    get: {
      res: {
        /**
         * Status retrieved successfully
         */
        200: ArbitrageStatusResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  '/arbitrage/stop': {
    post: {
      res: {
        /**
         * Arbitrage bot stopped successfully
         */
        200: MessageResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
  '/trading/backtest': {
    post: {
      req: RunBacktestData;
      res: {
        /**
         * Backtest completed successfully
         */
        200: BacktestResponse;
        /**
         * Bad request
         */
        400: ErrorResponse;
        /**
         * Unauthorized
         */
        401: ErrorResponse;
      };
    };
  };
};
