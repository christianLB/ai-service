// This file is auto-generated by @hey-api/openapi-ts

export const $ReportType = {
    type: 'string',
    enum: ['financial', 'trading', 'client', 'tax', 'custom'],
    description: 'Type of report to generate'
} as const;

export const $ReportFormat = {
    type: 'string',
    enum: ['PDF', 'EXCEL', 'CSV', 'JSON'],
    description: 'Output format for the report'
} as const;

export const $ReportStatus = {
    type: 'string',
    enum: ['pending', 'generating', 'completed', 'failed', 'expired'],
    description: 'Current status of the report'
} as const;

export const $DateRange = {
    type: 'object',
    required: ['startDate', 'endDate'],
    properties: {
        startDate: {
            type: 'string',
            format: 'date',
            description: 'Start date for report data (YYYY-MM-DD)'
        },
        endDate: {
            type: 'string',
            format: 'date',
            description: 'End date for report data (YYYY-MM-DD)'
        }
    }
} as const;

export const $ReportFilters = {
    type: 'object',
    additionalProperties: true,
    description: 'Additional filters specific to report type',
    properties: {
        clientIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Filter by specific client IDs (for client/financial reports)'
        },
        exchangeIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Filter by specific exchanges (for trading reports)'
        },
        categoryIds: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Filter by transaction categories (for financial reports)'
        },
        includeDetails: {
            type: 'boolean',
            default: false,
            description: 'Include detailed transaction/trade data'
        }
    }
} as const;

export const $GenerateReportRequest = {
    type: 'object',
    required: ['name', 'type', 'format', 'dateRange'],
    properties: {
        name: {
            type: 'string',
            minLength: 1,
            maxLength: 255,
            description: 'Human-readable name for the report'
        },
        description: {
            type: 'string',
            maxLength: 1000,
            description: 'Optional description of the report'
        },
        type: {
            '$ref': '#/components/schemas/ReportType'
        },
        format: {
            '$ref': '#/components/schemas/ReportFormat'
        },
        dateRange: {
            '$ref': '#/components/schemas/DateRange'
        },
        filters: {
            '$ref': '#/components/schemas/ReportFilters'
        },
        schedule: {
            type: 'object',
            description: 'Optional scheduling for recurring reports',
            properties: {
                frequency: {
                    type: 'string',
                    enum: ['daily', 'weekly', 'monthly', 'quarterly', 'yearly']
                },
                dayOfWeek: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 6,
                    description: 'Day of week for weekly reports (0=Sunday)'
                },
                dayOfMonth: {
                    type: 'integer',
                    minimum: 1,
                    maximum: 31,
                    description: 'Day of month for monthly reports'
                }
            }
        },
        emailRecipients: {
            type: 'array',
            items: {
                type: 'string',
                format: 'email'
            },
            description: 'Email addresses to send completed report to'
        }
    }
} as const;

export const $Report = {
    type: 'object',
    required: ['id', 'name', 'type', 'format', 'status', 'dateRange', 'createdAt', 'createdBy'],
    properties: {
        id: {
            type: 'string',
            description: 'Unique report identifier'
        },
        name: {
            type: 'string',
            description: 'Human-readable report name'
        },
        description: {
            type: 'string',
            description: 'Report description'
        },
        type: {
            '$ref': '#/components/schemas/ReportType'
        },
        format: {
            '$ref': '#/components/schemas/ReportFormat'
        },
        status: {
            '$ref': '#/components/schemas/ReportStatus'
        },
        dateRange: {
            '$ref': '#/components/schemas/DateRange'
        },
        filters: {
            '$ref': '#/components/schemas/ReportFilters'
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'Report creation timestamp'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'Last update timestamp'
        },
        completedAt: {
            type: 'string',
            format: 'date-time',
            description: 'Report completion timestamp'
        },
        createdBy: {
            type: 'string',
            description: 'User ID who created the report'
        },
        fileSize: {
            type: 'integer',
            description: 'Size of generated file in bytes'
        },
        downloadCount: {
            type: 'integer',
            default: 0,
            description: 'Number of times report has been downloaded'
        },
        expiresAt: {
            type: 'string',
            format: 'date-time',
            description: 'Report expiration timestamp'
        },
        errorMessage: {
            type: 'string',
            description: 'Error message if report generation failed'
        },
        metadata: {
            type: 'object',
            additionalProperties: true,
            description: 'Additional report metadata'
        }
    }
} as const;

export const $ReportResponse = {
    type: 'object',
    required: ['success', 'data'],
    properties: {
        success: {
            type: 'boolean',
            description: 'Operation success status'
        },
        data: {
            '$ref': '#/components/schemas/Report'
        }
    }
} as const;

export const $ReportListResponse = {
    type: 'object',
    required: ['success', 'data', 'pagination'],
    properties: {
        success: {
            type: 'boolean'
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Report'
            }
        },
        pagination: {
            '$ref': '#/components/schemas/PaginationMeta'
        }
    }
} as const;

export const $PaginationMeta = {
    type: 'object',
    required: ['page', 'limit', 'total', 'totalPages'],
    properties: {
        page: {
            type: 'integer',
            description: 'Current page number'
        },
        limit: {
            type: 'integer',
            description: 'Items per page'
        },
        total: {
            type: 'integer',
            description: 'Total number of items'
        },
        totalPages: {
            type: 'integer',
            description: 'Total number of pages'
        }
    }
} as const;

export const $MessageResponse = {
    type: 'object',
    required: ['success', 'message'],
    properties: {
        success: {
            type: 'boolean'
        },
        message: {
            type: 'string',
            description: 'Response message'
        }
    }
} as const;

export const $ErrorResponse = {
    type: 'object',
    required: ['success', 'error'],
    properties: {
        success: {
            type: 'boolean',
            default: false
        },
        error: {
            type: 'object',
            required: ['code', 'message'],
            properties: {
                code: {
                    type: 'string',
                    description: 'Error code'
                },
                message: {
                    type: 'string',
                    description: 'Error message'
                },
                details: {
                    type: 'object',
                    additionalProperties: true,
                    description: 'Additional error details'
                }
            }
        }
    }
} as const;