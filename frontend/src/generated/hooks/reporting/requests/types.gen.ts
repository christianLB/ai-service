// This file is auto-generated by @hey-api/openapi-ts

/**
 * Type of report to generate
 */
export type ReportType = 'financial' | 'trading' | 'client' | 'tax' | 'custom';

/**
 * Output format for the report
 */
export type ReportFormat = 'PDF' | 'EXCEL' | 'CSV' | 'JSON';

/**
 * Current status of the report
 */
export type ReportStatus = 'pending' | 'generating' | 'completed' | 'failed' | 'expired';

export type DateRange = {
    /**
     * Start date for report data (YYYY-MM-DD)
     */
    startDate: string;
    /**
     * End date for report data (YYYY-MM-DD)
     */
    endDate: string;
};

/**
 * Additional filters specific to report type
 */
export type ReportFilters = {
    /**
     * Filter by specific client IDs (for client/financial reports)
     */
    clientIds?: Array<(string)>;
    /**
     * Filter by specific exchanges (for trading reports)
     */
    exchangeIds?: Array<(string)>;
    /**
     * Filter by transaction categories (for financial reports)
     */
    categoryIds?: Array<(string)>;
    /**
     * Include detailed transaction/trade data
     */
    includeDetails?: boolean;
    [key: string]: unknown | string | boolean;
};

export type GenerateReportRequest = {
    /**
     * Human-readable name for the report
     */
    name: string;
    /**
     * Optional description of the report
     */
    description?: string;
    type: ReportType;
    format: ReportFormat;
    dateRange: DateRange;
    filters?: ReportFilters;
    /**
     * Optional scheduling for recurring reports
     */
    schedule?: {
        frequency?: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly';
        /**
         * Day of week for weekly reports (0=Sunday)
         */
        dayOfWeek?: number;
        /**
         * Day of month for monthly reports
         */
        dayOfMonth?: number;
    };
    /**
     * Email addresses to send completed report to
     */
    emailRecipients?: Array<(string)>;
};

export type frequency = 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly';

export type Report = {
    /**
     * Unique report identifier
     */
    id: string;
    /**
     * Human-readable report name
     */
    name: string;
    /**
     * Report description
     */
    description?: string;
    type: ReportType;
    format: ReportFormat;
    status: ReportStatus;
    dateRange: DateRange;
    filters?: ReportFilters;
    /**
     * Report creation timestamp
     */
    createdAt: string;
    /**
     * Last update timestamp
     */
    updatedAt?: string;
    /**
     * Report completion timestamp
     */
    completedAt?: string;
    /**
     * User ID who created the report
     */
    createdBy: string;
    /**
     * Size of generated file in bytes
     */
    fileSize?: number;
    /**
     * Number of times report has been downloaded
     */
    downloadCount?: number;
    /**
     * Report expiration timestamp
     */
    expiresAt?: string;
    /**
     * Error message if report generation failed
     */
    errorMessage?: string;
    /**
     * Additional report metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
};

export type ReportResponse = {
    /**
     * Operation success status
     */
    success: boolean;
    data: Report;
};

export type ReportListResponse = {
    success: boolean;
    data: Array<Report>;
    pagination: PaginationMeta;
};

export type PaginationMeta = {
    /**
     * Current page number
     */
    page: number;
    /**
     * Items per page
     */
    limit: number;
    /**
     * Total number of items
     */
    total: number;
    /**
     * Total number of pages
     */
    totalPages: number;
};

export type MessageResponse = {
    success: boolean;
    /**
     * Response message
     */
    message: string;
};

export type ErrorResponse = {
    success: boolean;
    error: {
        /**
         * Error code
         */
        code: string;
        /**
         * Error message
         */
        message: string;
        /**
         * Additional error details
         */
        details?: {
            [key: string]: unknown;
        };
    };
};

/**
 * Page number for pagination
 */
export type ParameterPageParam = number;

/**
 * Number of items per page
 */
export type ParameterLimitParam = number;

/**
 * Report unique identifier
 */
export type ParameterReportIdParam = string;

export type GetReportsData = {
    /**
     * Filter by user who created the report
     */
    createdBy?: string;
    /**
     * Filter reports created before this date
     */
    endDate?: string;
    /**
     * Filter by report format
     */
    format?: ReportFormat;
    /**
     * Number of items per page
     */
    limit?: number;
    /**
     * Page number for pagination
     */
    page?: number;
    /**
     * Filter reports created after this date
     */
    startDate?: string;
    /**
     * Filter by report status
     */
    status?: ReportStatus;
    /**
     * Filter by report type
     */
    type?: ReportType;
};

export type GetReportsResponse = ReportListResponse;

export type GetReportsByIdData = {
    /**
     * Report unique identifier
     */
    id: string;
};

export type GetReportsByIdResponse = ReportResponse;

export type DeleteReportsByIdData = {
    /**
     * Report unique identifier
     */
    id: string;
};

export type DeleteReportsByIdResponse = MessageResponse;

export type PostReportsGenerateData = {
    requestBody: GenerateReportRequest;
};

export type PostReportsGenerateResponse = ReportResponse;

export type GetReportsDownloadByIdData = {
    /**
     * Report unique identifier
     */
    id: string;
    /**
     * Whether to display inline or force download
     */
    inline?: boolean;
};

export type GetReportsDownloadByIdResponse = {
    [key: string]: unknown;
};

export type $OpenApiTs = {
    '/reports': {
        get: {
            req: GetReportsData;
            res: {
                /**
                 * Reports retrieved successfully
                 */
                200: ReportListResponse;
                /**
                 * Bad request - Invalid input data
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized - Invalid or missing authentication
                 */
                401: ErrorResponse;
            };
        };
    };
    '/reports/{id}': {
        get: {
            req: GetReportsByIdData;
            res: {
                /**
                 * Report retrieved successfully
                 */
                200: ReportResponse;
                /**
                 * Unauthorized - Invalid or missing authentication
                 */
                401: ErrorResponse;
                /**
                 * Not found - Resource does not exist
                 */
                404: ErrorResponse;
            };
        };
        delete: {
            req: DeleteReportsByIdData;
            res: {
                /**
                 * Report deleted successfully
                 */
                200: MessageResponse;
                /**
                 * Unauthorized - Invalid or missing authentication
                 */
                401: ErrorResponse;
                /**
                 * Forbidden - Cannot delete report (e.g., in use or shared)
                 */
                403: ErrorResponse;
                /**
                 * Not found - Resource does not exist
                 */
                404: ErrorResponse;
            };
        };
    };
    '/reports/generate': {
        post: {
            req: PostReportsGenerateData;
            res: {
                /**
                 * Report generation started successfully
                 */
                201: ReportResponse;
                /**
                 * Bad request - Invalid input data
                 */
                400: ErrorResponse;
                /**
                 * Unauthorized - Invalid or missing authentication
                 */
                401: ErrorResponse;
                /**
                 * Invalid report parameters
                 */
                422: ErrorResponse;
            };
        };
    };
    '/reports/download/{id}': {
        get: {
            req: GetReportsDownloadByIdData;
            res: {
                /**
                 * Report file download
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Unauthorized - Invalid or missing authentication
                 */
                401: ErrorResponse;
                /**
                 * Not found - Resource does not exist
                 */
                404: ErrorResponse;
                /**
                 * Report file no longer available
                 */
                410: ErrorResponse;
            };
        };
    };
};