// This file is auto-generated by @hey-api/openapi-ts

export const $RegisterRequest = {
  type: 'object',
  required: ['email', 'password'],
  properties: {
    email: {
      type: 'string',
      format: 'email',
      description: 'User email address',
    },
    password: {
      type: 'string',
      format: 'password',
      minLength: 8,
      description: 'User password (min 8 characters)',
    },
    firstName: {
      type: 'string',
      description: 'User first name',
    },
    lastName: {
      type: 'string',
      description: 'User last name',
    },
  },
} as const;

export const $LoginRequest = {
  type: 'object',
  required: ['email', 'password'],
  properties: {
    email: {
      type: 'string',
      format: 'email',
      description: 'User email address',
    },
    password: {
      type: 'string',
      format: 'password',
      description: 'User password',
    },
  },
} as const;

export const $RefreshTokenRequest = {
  type: 'object',
  required: ['refreshToken'],
  properties: {
    refreshToken: {
      type: 'string',
      description: 'JWT refresh token',
    },
  },
} as const;

export const $ForgotPasswordRequest = {
  type: 'object',
  required: ['email'],
  properties: {
    email: {
      type: 'string',
      format: 'email',
      description: 'User email address',
    },
  },
} as const;

export const $ResetPasswordRequest = {
  type: 'object',
  required: ['token', 'password'],
  properties: {
    token: {
      type: 'string',
      description: 'Password reset token',
    },
    password: {
      type: 'string',
      format: 'password',
      minLength: 8,
      description: 'New password (min 8 characters)',
    },
  },
} as const;

export const $UpdateProfileRequest = {
  type: 'object',
  properties: {
    firstName: {
      type: 'string',
      description: 'User first name',
    },
    lastName: {
      type: 'string',
      description: 'User last name',
    },
    email: {
      type: 'string',
      format: 'email',
      description: 'User email address',
    },
  },
} as const;

export const $AuthResponse = {
  type: 'object',
  required: ['success', 'data'],
  properties: {
    success: {
      type: 'boolean',
      description: 'Operation success status',
    },
    data: {
      type: 'object',
      required: ['user', 'accessToken', 'refreshToken'],
      properties: {
        user: {
          $ref: '#/components/schemas/UserProfile',
        },
        accessToken: {
          type: 'string',
          description: 'JWT access token',
        },
        refreshToken: {
          type: 'string',
          description: 'JWT refresh token',
        },
        expiresIn: {
          type: 'integer',
          description: 'Token expiration time in seconds',
        },
      },
    },
  },
} as const;

export const $UserProfile = {
  type: 'object',
  required: ['id', 'email', 'role', 'isActive', 'createdAt'],
  properties: {
    id: {
      type: 'string',
      description: 'User unique identifier',
    },
    email: {
      type: 'string',
      format: 'email',
      description: 'User email address',
    },
    firstName: {
      type: 'string',
      description: 'User first name',
    },
    lastName: {
      type: 'string',
      description: 'User last name',
    },
    role: {
      $ref: '#/components/schemas/UserRole',
    },
    isActive: {
      type: 'boolean',
      description: 'User active status',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      description: 'Account creation timestamp',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Last update timestamp',
    },
  },
} as const;

export const $UserRole = {
  type: 'string',
  enum: ['ADMIN', 'USER'],
  description: 'User role for authorization',
} as const;

export const $UserListResponse = {
  type: 'object',
  required: ['success', 'data', 'pagination'],
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UserProfile',
      },
    },
    pagination: {
      $ref: '#/components/schemas/PaginationMeta',
    },
  },
} as const;

export const $PaginationMeta = {
  type: 'object',
  required: ['page', 'limit', 'total', 'totalPages'],
  properties: {
    page: {
      type: 'integer',
      description: 'Current page number',
    },
    limit: {
      type: 'integer',
      description: 'Items per page',
    },
    total: {
      type: 'integer',
      description: 'Total number of items',
    },
    totalPages: {
      type: 'integer',
      description: 'Total number of pages',
    },
  },
} as const;

export const $MessageResponse = {
  type: 'object',
  required: ['success', 'message'],
  properties: {
    success: {
      type: 'boolean',
    },
    message: {
      type: 'string',
      description: 'Response message',
    },
  },
} as const;

export const $ErrorResponse = {
  type: 'object',
  required: ['success', 'error'],
  properties: {
    success: {
      type: 'boolean',
      default: false,
    },
    error: {
      type: 'object',
      required: ['code', 'message'],
      properties: {
        code: {
          type: 'string',
          description: 'Error code',
        },
        message: {
          type: 'string',
          description: 'Error message',
        },
        details: {
          type: 'object',
          additionalProperties: true,
          description: 'Additional error details',
        },
      },
    },
  },
} as const;
