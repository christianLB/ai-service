// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  RegisterData,
  RegisterResponse,
  LoginData,
  LoginResponse,
  RefreshTokenData,
  RefreshTokenResponse,
  LogoutResponse,
  ForgotPasswordData,
  ForgotPasswordResponse,
  ResetPasswordData,
  ResetPasswordResponse,
  GetProfileResponse,
  UpdateProfileData,
  UpdateProfileResponse,
  ListUsersData,
  ListUsersResponse,
  DeleteUserData,
  DeleteUserResponse,
} from './types.gen';

export class AuthenticationService {
  /**
   * Register a new user
   * Create a new user account with email and password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AuthResponse User registered successfully
   * @throws ApiError
   */
  public static register(data: RegisterData): CancelablePromise<RegisterResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/register',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request - Invalid input data',
        409: 'User already exists',
      },
    });
  }

  /**
   * Login user
   * Authenticate user with email and password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AuthResponse Login successful
   * @throws ApiError
   */
  public static login(data: LoginData): CancelablePromise<LoginResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/login',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request - Invalid input data',
        401: 'Unauthorized - Invalid or missing authentication',
        429: 'Too many requests - Rate limit exceeded',
      },
    });
  }

  /**
   * Refresh access token
   * Get a new access token using refresh token
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AuthResponse Token refreshed successfully
   * @throws ApiError
   */
  public static refreshToken(data: RefreshTokenData): CancelablePromise<RefreshTokenResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/refresh',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Unauthorized - Invalid or missing authentication',
      },
    });
  }

  /**
   * Logout user
   * Invalidate current access token
   * @returns MessageResponse Logout successful
   * @throws ApiError
   */
  public static logout(): CancelablePromise<LogoutResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/logout',
      errors: {
        401: 'Unauthorized - Invalid or missing authentication',
      },
    });
  }

  /**
   * Request password reset
   * Send password reset email to user
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MessageResponse Password reset email sent
   * @throws ApiError
   */
  public static forgotPassword(
    data: ForgotPasswordData
  ): CancelablePromise<ForgotPasswordResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/forgot-password',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request - Invalid input data',
        429: 'Too many requests - Rate limit exceeded',
      },
    });
  }

  /**
   * Reset password
   * Reset user password with token
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MessageResponse Password reset successful
   * @throws ApiError
   */
  public static resetPassword(data: ResetPasswordData): CancelablePromise<ResetPasswordResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth/reset-password',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request - Invalid input data',
        401: 'Invalid or expired token',
      },
    });
  }
}

export class ProfileService {
  /**
   * Get user profile
   * Get current user profile information
   * @returns UserProfile Profile retrieved successfully
   * @throws ApiError
   */
  public static getProfile(): CancelablePromise<GetProfileResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/auth/profile',
      errors: {
        401: 'Unauthorized - Invalid or missing authentication',
      },
    });
  }

  /**
   * Update user profile
   * Update current user profile information
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserProfile Profile updated successfully
   * @throws ApiError
   */
  public static updateProfile(data: UpdateProfileData): CancelablePromise<UpdateProfileResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/auth/profile',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        400: 'Bad request - Invalid input data',
        401: 'Unauthorized - Invalid or missing authentication',
      },
    });
  }
}

export class AdminService {
  /**
   * List all users
   * Get list of all users (admin only)
   * @param data The data for the request.
   * @param data.page Page number for pagination
   * @param data.limit Number of items per page
   * @param data.role Filter by user role
   * @param data.isActive Filter by active status
   * @returns UserListResponse Users retrieved successfully
   * @throws ApiError
   */
  public static listUsers(data: ListUsersData = {}): CancelablePromise<ListUsersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/auth/users',
      query: {
        page: data.page,
        limit: data.limit,
        role: data.role,
        isActive: data.isActive,
      },
      errors: {
        401: 'Unauthorized - Invalid or missing authentication',
        403: 'Forbidden - Insufficient permissions',
      },
    });
  }

  /**
   * Delete user
   * Delete a user account (admin only)
   * @param data The data for the request.
   * @param data.userId User ID to delete
   * @returns MessageResponse User deleted successfully
   * @throws ApiError
   */
  public static deleteUser(data: DeleteUserData): CancelablePromise<DeleteUserResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/auth/users/{userId}',
      path: {
        userId: data.userId,
      },
      errors: {
        401: 'Unauthorized - Invalid or missing authentication',
        403: 'Forbidden - Insufficient permissions',
        404: 'Not found - Resource does not exist',
      },
    });
  }
}
