// This file is auto-generated by @hey-api/openapi-ts

export type RegisterRequest = {
  /**
   * User email address
   */
  email: string;
  /**
   * User password (min 8 characters)
   */
  password: string;
  /**
   * User first name
   */
  firstName?: string;
  /**
   * User last name
   */
  lastName?: string;
};

export type LoginRequest = {
  /**
   * User email address
   */
  email: string;
  /**
   * User password
   */
  password: string;
};

export type RefreshTokenRequest = {
  /**
   * JWT refresh token
   */
  refreshToken: string;
};

export type ForgotPasswordRequest = {
  /**
   * User email address
   */
  email: string;
};

export type ResetPasswordRequest = {
  /**
   * Password reset token
   */
  token: string;
  /**
   * New password (min 8 characters)
   */
  password: string;
};

export type UpdateProfileRequest = {
  /**
   * User first name
   */
  firstName?: string;
  /**
   * User last name
   */
  lastName?: string;
  /**
   * User email address
   */
  email?: string;
};

export type AuthResponse = {
  /**
   * Operation success status
   */
  success: boolean;
  data: {
    user: UserProfile;
    /**
     * JWT access token
     */
    accessToken: string;
    /**
     * JWT refresh token
     */
    refreshToken: string;
    /**
     * Token expiration time in seconds
     */
    expiresIn?: number;
  };
};

export type UserProfile = {
  /**
   * User unique identifier
   */
  id: string;
  /**
   * User email address
   */
  email: string;
  /**
   * User first name
   */
  firstName?: string;
  /**
   * User last name
   */
  lastName?: string;
  role: UserRole;
  /**
   * User active status
   */
  isActive: boolean;
  /**
   * Account creation timestamp
   */
  createdAt: string;
  /**
   * Last update timestamp
   */
  updatedAt?: string;
};

/**
 * User role for authorization
 */
export type UserRole = 'ADMIN' | 'USER';

export type UserListResponse = {
  success: boolean;
  data: Array<UserProfile>;
  pagination: PaginationMeta;
};

export type PaginationMeta = {
  /**
   * Current page number
   */
  page: number;
  /**
   * Items per page
   */
  limit: number;
  /**
   * Total number of items
   */
  total: number;
  /**
   * Total number of pages
   */
  totalPages: number;
};

export type MessageResponse = {
  success: boolean;
  /**
   * Response message
   */
  message: string;
};

export type ErrorResponse = {
  success: boolean;
  error: {
    /**
     * Error code
     */
    code: string;
    /**
     * Error message
     */
    message: string;
    /**
     * Additional error details
     */
    details?: {
      [key: string]: unknown;
    };
  };
};

/**
 * Page number for pagination
 */
export type ParameterPageParam = number;

/**
 * Number of items per page
 */
export type ParameterLimitParam = number;

export type RegisterData = {
  requestBody: RegisterRequest;
};

export type RegisterResponse = AuthResponse;

export type LoginData = {
  requestBody: LoginRequest;
};

export type LoginResponse = AuthResponse;

export type RefreshTokenData = {
  requestBody: RefreshTokenRequest;
};

export type RefreshTokenResponse = AuthResponse;

export type LogoutResponse = MessageResponse;

export type ForgotPasswordData = {
  requestBody: ForgotPasswordRequest;
};

export type ForgotPasswordResponse = MessageResponse;

export type ResetPasswordData = {
  requestBody: ResetPasswordRequest;
};

export type ResetPasswordResponse = MessageResponse;

export type GetProfileResponse = UserProfile;

export type UpdateProfileData = {
  requestBody: UpdateProfileRequest;
};

export type UpdateProfileResponse = UserProfile;

export type ListUsersData = {
  /**
   * Filter by active status
   */
  isActive?: boolean;
  /**
   * Number of items per page
   */
  limit?: number;
  /**
   * Page number for pagination
   */
  page?: number;
  /**
   * Filter by user role
   */
  role?: UserRole;
};

export type ListUsersResponse = UserListResponse;

export type DeleteUserData = {
  /**
   * User ID to delete
   */
  userId: string;
};

export type DeleteUserResponse = MessageResponse;

export type $OpenApiTs = {
  '/auth/register': {
    post: {
      req: RegisterData;
      res: {
        /**
         * User registered successfully
         */
        201: AuthResponse;
        /**
         * Bad request - Invalid input data
         */
        400: ErrorResponse;
        /**
         * User already exists
         */
        409: ErrorResponse;
      };
    };
  };
  '/auth/login': {
    post: {
      req: LoginData;
      res: {
        /**
         * Login successful
         */
        200: AuthResponse;
        /**
         * Bad request - Invalid input data
         */
        400: ErrorResponse;
        /**
         * Unauthorized - Invalid or missing authentication
         */
        401: ErrorResponse;
        /**
         * Too many requests - Rate limit exceeded
         */
        429: ErrorResponse;
      };
    };
  };
  '/auth/refresh': {
    post: {
      req: RefreshTokenData;
      res: {
        /**
         * Token refreshed successfully
         */
        200: AuthResponse;
        /**
         * Unauthorized - Invalid or missing authentication
         */
        401: ErrorResponse;
      };
    };
  };
  '/auth/logout': {
    post: {
      res: {
        /**
         * Logout successful
         */
        200: MessageResponse;
        /**
         * Unauthorized - Invalid or missing authentication
         */
        401: ErrorResponse;
      };
    };
  };
  '/auth/forgot-password': {
    post: {
      req: ForgotPasswordData;
      res: {
        /**
         * Password reset email sent
         */
        200: MessageResponse;
        /**
         * Bad request - Invalid input data
         */
        400: ErrorResponse;
        /**
         * Too many requests - Rate limit exceeded
         */
        429: ErrorResponse;
      };
    };
  };
  '/auth/reset-password': {
    post: {
      req: ResetPasswordData;
      res: {
        /**
         * Password reset successful
         */
        200: MessageResponse;
        /**
         * Bad request - Invalid input data
         */
        400: ErrorResponse;
        /**
         * Invalid or expired token
         */
        401: ErrorResponse;
      };
    };
  };
  '/auth/profile': {
    get: {
      res: {
        /**
         * Profile retrieved successfully
         */
        200: UserProfile;
        /**
         * Unauthorized - Invalid or missing authentication
         */
        401: ErrorResponse;
      };
    };
    put: {
      req: UpdateProfileData;
      res: {
        /**
         * Profile updated successfully
         */
        200: UserProfile;
        /**
         * Bad request - Invalid input data
         */
        400: ErrorResponse;
        /**
         * Unauthorized - Invalid or missing authentication
         */
        401: ErrorResponse;
      };
    };
  };
  '/auth/users': {
    get: {
      req: ListUsersData;
      res: {
        /**
         * Users retrieved successfully
         */
        200: UserListResponse;
        /**
         * Unauthorized - Invalid or missing authentication
         */
        401: ErrorResponse;
        /**
         * Forbidden - Insufficient permissions
         */
        403: ErrorResponse;
      };
    };
  };
  '/auth/users/{userId}': {
    delete: {
      req: DeleteUserData;
      res: {
        /**
         * User deleted successfully
         */
        200: MessageResponse;
        /**
         * Unauthorized - Invalid or missing authentication
         */
        401: ErrorResponse;
        /**
         * Forbidden - Insufficient permissions
         */
        403: ErrorResponse;
        /**
         * Not found - Resource does not exist
         */
        404: ErrorResponse;
      };
    };
  };
};
