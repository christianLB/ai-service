import React, { useState, useEffect } from 'react';
import {
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  IconButton,
  Tooltip,
  Chip,
  CircularProgress,
  Alert,
  Button,
  TableFooter
} from '@mui/material';
import {
  FileDownload as FileDownloadIcon,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  AccountBalance as AccountBalanceIcon
} from '@mui/icons-material';
import { useAuth } from '../contexts/AuthContext';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';

interface YearlyReportData {
  year: number;
  currency: string;
  categories: {
    income: CategoryData[];
    expense: CategoryData[];
  };
  monthlyTotals: {
    income: Record<string, string>;
    expense: Record<string, string>;
    balance: Record<string, string>;
  };
  yearTotals: {
    income: string;
    expense: string;
    balance: string;
  };
}

interface CategoryData {
  categoryId: string;
  categoryName: string;
  categoryColor: string;
  monthlyData: Record<string, string>;
  total: string;
  percentage: number;
}

const YearlyFinancialReport: React.FC = () => {
  const { apiRequest } = useAuth();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [reportData, setReportData] = useState<YearlyReportData | null>(null);
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());
  const [selectedCurrency, setSelectedCurrency] = useState('EUR');

  const months = [
    'Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',
    'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'
  ];

  useEffect(() => {
    fetchYearlyReport();
  }, [selectedYear, selectedCurrency]);

  const fetchYearlyReport = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await apiRequest('/api/financial/dashboard/yearly-report', {
        method: 'GET',
        params: {
          year: selectedYear,
          currency: selectedCurrency
        }
      });

      if (response.success) {
        setReportData(response.data);
      } else {
        setError(response.error || 'Error al cargar el reporte');
      }
    } catch (err) {
      setError('Error de conexión al cargar el reporte');
      console.error('Error loading yearly report:', err);
    } finally {
      setLoading(false);
    }
  };

  const formatAmount = (amount: string | number): string => {
    const num = typeof amount === 'string' ? parseFloat(amount) : amount;
    return new Intl.NumberFormat('es-ES', {
      style: 'currency',
      currency: selectedCurrency,
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(num);
  };

  const getCellColor = (amount: string, type: 'income' | 'expense'): string => {
    const value = parseFloat(amount);
    if (value === 0) return 'transparent';
    
    const maxValue = type === 'income' 
      ? Math.max(...Object.values(reportData?.categories.income || []).map(c => 
          Math.max(...Object.values(c.monthlyData).map(v => parseFloat(v)))
        ))
      : Math.max(...Object.values(reportData?.categories.expense || []).map(c => 
          Math.max(...Object.values(c.monthlyData).map(v => parseFloat(v)))
        ));
    
    const intensity = value / maxValue;
    const baseColor = type === 'income' ? '76, 175, 80' : '244, 67, 54'; // green for income, red for expense
    
    return `rgba(${baseColor}, ${0.1 + intensity * 0.4})`;
  };

  const exportToCSV = () => {
    if (!reportData) return;

    const rows = [];
    
    // Headers
    rows.push(['Categoría', ...months, 'Total', '%']);
    
    // Income categories
    rows.push(['INGRESOS']);
    reportData.categories.income.forEach(category => {
      const monthlyValues = months.map((_, i) => category.monthlyData[(i + 1).toString()] || '0');
      rows.push([
        category.categoryName,
        ...monthlyValues,
        category.total,
        category.percentage.toFixed(2) + '%'
      ]);
    });
    
    // Income totals
    const incomeTotals = months.map((_, i) => 
      reportData.monthlyTotals.income[(i + 1).toString()] || '0'
    );
    rows.push(['Total Ingresos', ...incomeTotals, reportData.yearTotals.income, '100%']);
    
    // Separator
    rows.push([]);
    
    // Expense categories
    rows.push(['EGRESOS']);
    reportData.categories.expense.forEach(category => {
      const monthlyValues = months.map((_, i) => category.monthlyData[(i + 1).toString()] || '0');
      rows.push([
        category.categoryName,
        ...monthlyValues,
        category.total,
        category.percentage.toFixed(2) + '%'
      ]);
    });
    
    // Expense totals
    const expenseTotals = months.map((_, i) => 
      reportData.monthlyTotals.expense[(i + 1).toString()] || '0'
    );
    rows.push(['Total Egresos', ...expenseTotals, reportData.yearTotals.expense, '100%']);
    
    // Balance
    rows.push([]);
    const balanceValues = months.map((_, i) => 
      reportData.monthlyTotals.balance[(i + 1).toString()] || '0'
    );
    rows.push(['BALANCE', ...balanceValues, reportData.yearTotals.balance, '']);
    
    // Convert to CSV
    const csv = rows.map(row => row.join(',')).join('\n');
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `reporte_financiero_${selectedYear}.csv`;
    link.click();
  };

  const renderTable = () => {
    if (!reportData) return null;

    return (
      <TableContainer component={Paper} sx={{ mt: 2 }}>
        <Table size="small" stickyHeader>
          <TableHead>
            <TableRow>
              <TableCell sx={{ fontWeight: 'bold', minWidth: 200 }}>Categoría</TableCell>
              {months.map((month, index) => (
                <TableCell key={index} align="right" sx={{ fontWeight: 'bold', minWidth: 80 }}>
                  {month}
                </TableCell>
              ))}
              <TableCell align="right" sx={{ fontWeight: 'bold', minWidth: 100 }}>Total</TableCell>
              <TableCell align="right" sx={{ fontWeight: 'bold', minWidth: 60 }}>%</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {/* Income Section */}
            <TableRow>
              <TableCell colSpan={14} sx={{ bgcolor: 'success.light', fontWeight: 'bold' }}>
                <Box display="flex" alignItems="center" gap={1}>
                  <TrendingUpIcon color="success" />
                  INGRESOS
                </Box>
              </TableCell>
            </TableRow>
            {reportData.categories.income.map((category) => (
              <TableRow key={category.categoryId} hover>
                <TableCell>
                  <Box display="flex" alignItems="center" gap={1}>
                    <Box
                      sx={{
                        width: 12,
                        height: 12,
                        borderRadius: '50%',
                        bgcolor: category.categoryColor
                      }}
                    />
                    {category.categoryName}
                  </Box>
                </TableCell>
                {months.map((_, index) => {
                  const monthValue = category.monthlyData[(index + 1).toString()] || '0';
                  return (
                    <TableCell 
                      key={index} 
                      align="right"
                      sx={{ 
                        bgcolor: getCellColor(monthValue, 'income'),
                        fontWeight: parseFloat(monthValue) > 0 ? 'medium' : 'normal'
                      }}
                    >
                      {parseFloat(monthValue) > 0 ? formatAmount(monthValue) : '-'}
                    </TableCell>
                  );
                })}
                <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                  {formatAmount(category.total)}
                </TableCell>
                <TableCell align="right">
                  <Chip
                    label={`${category.percentage.toFixed(1)}%`}
                    size="small"
                    color="success"
                    variant="outlined"
                  />
                </TableCell>
              </TableRow>
            ))}
            
            {/* Income Total Row */}
            <TableRow sx={{ bgcolor: 'grey.100' }}>
              <TableCell sx={{ fontWeight: 'bold' }}>Total Ingresos</TableCell>
              {months.map((_, index) => (
                <TableCell key={index} align="right" sx={{ fontWeight: 'bold' }}>
                  {formatAmount(reportData.monthlyTotals.income[(index + 1).toString()] || '0')}
                </TableCell>
              ))}
              <TableCell align="right" sx={{ fontWeight: 'bold', bgcolor: 'success.light' }}>
                {formatAmount(reportData.yearTotals.income)}
              </TableCell>
              <TableCell align="right" sx={{ fontWeight: 'bold' }}>100%</TableCell>
            </TableRow>

            {/* Separator */}
            <TableRow>
              <TableCell colSpan={14} sx={{ p: 1 }} />
            </TableRow>

            {/* Expense Section */}
            <TableRow>
              <TableCell colSpan={14} sx={{ bgcolor: 'error.light', fontWeight: 'bold' }}>
                <Box display="flex" alignItems="center" gap={1}>
                  <TrendingDownIcon color="error" />
                  EGRESOS
                </Box>
              </TableCell>
            </TableRow>
            {reportData.categories.expense.map((category) => (
              <TableRow key={category.categoryId} hover>
                <TableCell>
                  <Box display="flex" alignItems="center" gap={1}>
                    <Box
                      sx={{
                        width: 12,
                        height: 12,
                        borderRadius: '50%',
                        bgcolor: category.categoryColor
                      }}
                    />
                    {category.categoryName}
                  </Box>
                </TableCell>
                {months.map((_, index) => {
                  const monthValue = category.monthlyData[(index + 1).toString()] || '0';
                  return (
                    <TableCell 
                      key={index} 
                      align="right"
                      sx={{ 
                        bgcolor: getCellColor(monthValue, 'expense'),
                        fontWeight: parseFloat(monthValue) > 0 ? 'medium' : 'normal'
                      }}
                    >
                      {parseFloat(monthValue) > 0 ? formatAmount(monthValue) : '-'}
                    </TableCell>
                  );
                })}
                <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                  {formatAmount(category.total)}
                </TableCell>
                <TableCell align="right">
                  <Chip
                    label={`${category.percentage.toFixed(1)}%`}
                    size="small"
                    color="error"
                    variant="outlined"
                  />
                </TableCell>
              </TableRow>
            ))}
            
            {/* Expense Total Row */}
            <TableRow sx={{ bgcolor: 'grey.100' }}>
              <TableCell sx={{ fontWeight: 'bold' }}>Total Egresos</TableCell>
              {months.map((_, index) => (
                <TableCell key={index} align="right" sx={{ fontWeight: 'bold' }}>
                  {formatAmount(reportData.monthlyTotals.expense[(index + 1).toString()] || '0')}
                </TableCell>
              ))}
              <TableCell align="right" sx={{ fontWeight: 'bold', bgcolor: 'error.light' }}>
                {formatAmount(reportData.yearTotals.expense)}
              </TableCell>
              <TableCell align="right" sx={{ fontWeight: 'bold' }}>100%</TableCell>
            </TableRow>
          </TableBody>
          <TableFooter>
            {/* Balance Row */}
            <TableRow sx={{ bgcolor: 'primary.light' }}>
              <TableCell sx={{ fontWeight: 'bold' }}>
                <Box display="flex" alignItems="center" gap={1}>
                  <AccountBalanceIcon color="primary" />
                  BALANCE
                </Box>
              </TableCell>
              {months.map((_, index) => {
                const balance = parseFloat(reportData.monthlyTotals.balance[(index + 1).toString()] || '0');
                return (
                  <TableCell 
                    key={index} 
                    align="right" 
                    sx={{ 
                      fontWeight: 'bold',
                      color: balance >= 0 ? 'success.main' : 'error.main'
                    }}
                  >
                    {formatAmount(balance)}
                  </TableCell>
                );
              })}
              <TableCell 
                align="right" 
                sx={{ 
                  fontWeight: 'bold',
                  bgcolor: parseFloat(reportData.yearTotals.balance) >= 0 ? 'success.light' : 'error.light',
                  color: parseFloat(reportData.yearTotals.balance) >= 0 ? 'success.dark' : 'error.dark'
                }}
              >
                {formatAmount(reportData.yearTotals.balance)}
              </TableCell>
              <TableCell />
            </TableRow>
          </TableFooter>
        </Table>
      </TableContainer>
    );
  };

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h6">Reporte Financiero Anual</Typography>
        
        <Box display="flex" gap={2} alignItems="center">
          <FormControl size="small">
            <InputLabel>Año</InputLabel>
            <Select
              value={selectedYear}
              onChange={(e) => setSelectedYear(Number(e.target.value))}
              label="Año"
              sx={{ minWidth: 120 }}
            >
              {[...Array(5)].map((_, i) => {
                const year = new Date().getFullYear() - i;
                return (
                  <MenuItem key={year} value={year}>
                    {year}
                  </MenuItem>
                );
              })}
            </Select>
          </FormControl>
          
          <FormControl size="small">
            <InputLabel>Moneda</InputLabel>
            <Select
              value={selectedCurrency}
              onChange={(e) => setSelectedCurrency(e.target.value)}
              label="Moneda"
              sx={{ minWidth: 100 }}
            >
              <MenuItem value="EUR">EUR</MenuItem>
              <MenuItem value="USD">USD</MenuItem>
              <MenuItem value="GBP">GBP</MenuItem>
            </Select>
          </FormControl>
          
          <Tooltip title="Exportar a CSV">
            <IconButton onClick={exportToCSV} disabled={!reportData}>
              <FileDownloadIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>

      {loading && (
        <Box display="flex" justifyContent="center" p={4}>
          <CircularProgress />
        </Box>
      )}

      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}

      {!loading && !error && reportData && renderTable()}
    </Box>
  );
};

export default YearlyFinancialReport;