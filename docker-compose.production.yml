version: "3.8"

services:
  # Backend API Service
  ai-service-api:
    image: ghcr.io/christianlb/ai-service-api:latest
    container_name: ai-service-api
    restart: unless-stopped
    mem_limit: 400m
    memswap_limit: 400m
    cpus: 1.5
    environment:
      - NODE_ENV=production
      - PORT=3001
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GOCARDLESS_SECRET_ID=${GOCARDLESS_SECRET_ID}
      - GOCARDLESS_SECRET_KEY=${GOCARDLESS_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - ai-service-network
    volumes:
      - /volume1/docker/ai-service/config/.env.production:/app/.env:ro
      - /volume1/docker/ai-service/documents:/app/documents
      - /volume1/docker/ai-service/logs:/app/logs
    depends_on:
      - postgres
      - redis
    ports:
      - "3000:3001"
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Frontend Service
  ai-service-frontend:
    image: ghcr.io/christianlb/ai-service-frontend:latest
    container_name: ai-service-frontend
    restart: unless-stopped
    mem_limit: 150m
    memswap_limit: 150m
    cpus: 0.5
    environment:
      - NODE_ENV=production
    networks:
      - ai-service-network
    depends_on:
      - ai-service-api
    ports:
      - "3003:80"
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-postgres
    restart: unless-stopped
    mem_limit: 300m
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - ai-service-network
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-redis
    restart: unless-stopped
    mem_limit: 150m
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - ai-service-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower
    container_name: ai-service-watchtower
    restart: unless-stopped
    mem_limit: 100m
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_HTTP_API_TOKEN}
      - WATCHTOWER_HTTP_API_UPDATE=true
      - WATCHTOWER_HTTP_API_PERIODIC_POLLS=true
      - TZ=America/Santiago
      # GitHub Container Registry Authentication
      - REPO_USER=${GITHUB_USERNAME}
      - REPO_PASS=${GHCR_TOKEN}
    networks:
      - ai-service-network
    ports:
      - "8085:8080"
    command: --interval 300 --cleanup --label-enable

networks:
  ai-service-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
