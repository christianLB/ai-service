version: "3.8"

networks:
  ai-service-network:
    driver: bridge

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-service-db
    environment:
      POSTGRES_DB: ai_service
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ultra_secure_password_2025
    volumes:
      - /volume1/docker/ai-service/postgres:/var/lib/postgresql/data
    networks:
      - ai-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache  
  redis:
    image: redis:7-alpine
    container_name: ai-service-redis
    command: redis-server --requirepass redis_secure_password_2025 --appendonly yes
    volumes:
      - /volume1/docker/ai-service/redis:/data
    networks:
      - ai-service-network
    restart: unless-stopped

  # Main Application - PUERTO 3003 FIJO
  ai-service:
    image: ghcr.io/christianlb/ai-service:latest
    container_name: ai-service-prod
    volumes:
      # Variables de entorno desde archivo montado
      - /volume1/docker/ai-service/config:/config:ro
      - /volume1/docker/ai-service/logs:/app/logs
      - /volume1/docker/ai-service/workflows:/app/data/workflows
      - /volume1/docker/ai-service/documents:/app/data/documents
      - /volume1/docker/ai-service/knowledge:/app/data/knowledge
    ports:
      - "3003:3000"  # PUERTO FIJO - NO CAMBIAR - El proxy reverso apunta a 3003
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - ai-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      # Labels for Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=ai-service"

  # Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: ai-service-watchtower
    environment:
      # Update settings
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_SCOPE=ai-service
      - WATCHTOWER_POLL_INTERVAL=300  # Check every 5 minutes
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_REVIVE_STOPPED=false
      
      # GHCR Authentication (from environment)
      - REPO_USER=${GITHUB_USER:-}
      - REPO_PASS=${GITHUB_TOKEN:-}
      
      # Telegram Notifications via internal API
      - WATCHTOWER_NOTIFICATIONS=gotify
      - WATCHTOWER_NOTIFICATION_GOTIFY_URL=http://ai-service:3000/api/watchtower/notify
      - WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN=watchtower-notify
      
      # Debugging
      - WATCHTOWER_DEBUG=true
      - WATCHTOWER_LOG_LEVEL=info
      
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.docker/config.json:/config.json:ro
    networks:
      - ai-service-network
    restart: unless-stopped
    depends_on:
      - ai-service
    command: --scope ai-service --cleanup --rolling-restart --interval 300