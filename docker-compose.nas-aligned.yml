version: '3.8'

services:
  # ============================================
  # Layer 1: Infrastructure (Start First)
  # ============================================
  postgres:
    image: postgres:16-alpine
    container_name: ai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_service}
      POSTGRES_USER: ${POSTGRES_USER:-ai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - ./config/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./config/fix-financial-schema.sql:/docker-entrypoint-initdb.d/02-fix-financial.sql:ro
      - ./config/init-auth.sql:/docker-entrypoint-initdb.d/03-init-auth.sql:ro
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ai_user} -d ${POSTGRES_DB:-ai_service}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ai-service-network

  redis:
    image: redis:7-alpine
    container_name: ai-redis
    restart: unless-stopped
    volumes:
      - ./redis:/data
    command: >
      redis-server
      --maxmemory 200mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - ai-service-network

  # ============================================
  # Layer 2: Core Services (DB-dependent)
  # ============================================
  financial-svc:
    image: ghcr.io/christianlb/ai-service-financial:latest
    container_name: ai-financial-svc
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    environment:
      NODE_ENV: production
      PORT: 3001
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATABASE_URL: postgresql://${POSTGRES_USER:-ai_user}:${POSTGRES_PASSWORD}@ai-postgres:5432/${POSTGRES_DB:-ai_service}
      POSTGRES_HOST: ai-postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-ai_service}
      POSTGRES_USER: ${POSTGRES_USER:-ai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: ai-redis
      REDIS_PORT: 6379
      REDIS_URL: redis://ai-redis:6379
      JWT_SECRET: ${JWT_SECRET:-ultra_secure_production_jwt_secret_2025_min_32_chars}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      GOCARDLESS_SECRET_ID: ${GOCARDLESS_SECRET_ID}
      GOCARDLESS_SECRET_KEY: ${GOCARDLESS_SECRET_KEY}
      GOCARDLESS_ENV: ${GOCARDLESS_ENV:-sandbox}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs/financial:/app/logs
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3001/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ai-service-network

  trading-svc:
    image: ghcr.io/christianlb/ai-service-trading:latest
    container_name: ai-trading-svc
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    environment:
      NODE_ENV: production
      PORT: 3002
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATABASE_URL: postgresql://${POSTGRES_USER:-ai_user}:${POSTGRES_PASSWORD}@ai-postgres:5432/${POSTGRES_DB:-ai_service}
      POSTGRES_HOST: ai-postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-ai_service}
      POSTGRES_USER: ${POSTGRES_USER:-ai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: ai-redis
      REDIS_PORT: 6379
      REDIS_URL: redis://ai-redis:6379
      JWT_SECRET: ${JWT_SECRET:-ultra_secure_production_jwt_secret_2025_min_32_chars}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
      COINBASE_API_KEY: ${COINBASE_API_KEY}
      COINBASE_API_SECRET: ${COINBASE_API_SECRET}
      ALPACA_KEY_ID: ${ALPACA_KEY_ID}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs/trading:/app/logs
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3002/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ai-service-network

  # ============================================
  # Layer 3: Independent Services (Redis-only)
  # ============================================
  ai-core:
    image: ghcr.io/christianlb/ai-service-ai-core:latest
    container_name: ai-core
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    environment:
      NODE_ENV: production
      PORT: 3004
      LOG_LEVEL: ${LOG_LEVEL:-info}
      REDIS_HOST: ai-redis
      REDIS_PORT: 6379
      REDIS_URL: redis://ai-redis:6379
      JWT_SECRET: ${JWT_SECRET:-ultra_secure_production_jwt_secret_2025_min_32_chars}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      NODE_OPTIONS: "--max-old-space-size=1024"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./documents:/app/data/documents
      - ./logs/ai-core:/app/logs
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3004/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    networks:
      - ai-service-network

  comm-svc:
    image: ghcr.io/christianlb/ai-service-comm:latest
    container_name: ai-comm-svc
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    environment:
      NODE_ENV: production
      PORT: 3003
      LOG_LEVEL: ${LOG_LEVEL:-info}
      REDIS_HOST: ai-redis
      REDIS_PORT: 6379
      REDIS_URL: redis://ai-redis:6379
      JWT_SECRET: ${JWT_SECRET:-ultra_secure_production_jwt_secret_2025_min_32_chars}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL}
      TELEGRAM_ALERTS_ENABLED: ${TELEGRAM_ALERTS_ENABLED:-true}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs/comm:/app/logs
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3003/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    networks:
      - ai-service-network

  # ============================================
  # Layer 4: Gateway & Workers (Service-dependent)
  # ============================================
  api-gateway:
    image: ghcr.io/christianlb/ai-service-gateway:latest
    container_name: ai-gateway
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    environment:
      NODE_ENV: production
      PORT: 3000
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATABASE_URL: postgresql://${POSTGRES_USER:-ai_user}:${POSTGRES_PASSWORD}@ai-postgres:5432/${POSTGRES_DB:-ai_service}
      POSTGRES_HOST: ai-postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-ai_service}
      POSTGRES_USER: ${POSTGRES_USER:-ai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: ai-redis
      REDIS_PORT: 6379
      REDIS_URL: redis://ai-redis:6379
      JWT_SECRET: ${JWT_SECRET:-ultra_secure_production_jwt_secret_2025_min_32_chars}
      ALLOW_REGISTRATION: ${ALLOW_REGISTRATION:-true}
      # Service URLs for gateway routing
      FINANCIAL_SVC_URL: http://ai-financial-svc:3001
      TRADING_SVC_URL: http://ai-trading-svc:3002
      COMM_SVC_URL: http://ai-comm-svc:3003
      AI_CORE_URL: http://ai-core:3004
      # Metrics
      ENABLE_METRICS: "true"
      METRICS_PORT: 9090
      NODE_OPTIONS: "--max-old-space-size=1024"
    ports:
      - "3001:3000"
      - "9090:9090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      financial-svc:
        condition: service_healthy
      trading-svc:
        condition: service_healthy
      ai-core:
        condition: service_healthy
      comm-svc:
        condition: service_healthy
    volumes:
      - ./logs/gateway:/app/logs
      - ./config:/app/config:ro
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3000/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - ai-service-network

  worker-financial:
    image: ghcr.io/christianlb/ai-service-worker-financial:latest
    container_name: ai-worker-financial
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    environment:
      NODE_ENV: production
      PORT: 3101
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATABASE_URL: postgresql://${POSTGRES_USER:-ai_user}:${POSTGRES_PASSWORD}@ai-postgres:5432/${POSTGRES_DB:-ai_service}
      POSTGRES_HOST: ai-postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-ai_service}
      POSTGRES_USER: ${POSTGRES_USER:-ai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: ai-redis
      REDIS_PORT: 6379
      REDIS_URL: redis://ai-redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      financial-svc:
        condition: service_healthy
    volumes:
      - ./logs/worker-financial:/app/logs
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3101/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ai-service-network

  worker-trading:
    image: ghcr.io/christianlb/ai-service-worker-trading:latest
    container_name: ai-worker-trading
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    environment:
      NODE_ENV: production
      PORT: 3102
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATABASE_URL: postgresql://${POSTGRES_USER:-ai_user}:${POSTGRES_PASSWORD}@ai-postgres:5432/${POSTGRES_DB:-ai_service}
      POSTGRES_HOST: ai-postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-ai_service}
      POSTGRES_USER: ${POSTGRES_USER:-ai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: ai-redis
      REDIS_PORT: 6379
      REDIS_URL: redis://ai-redis:6379
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
      COINBASE_API_KEY: ${COINBASE_API_KEY}
      COINBASE_API_SECRET: ${COINBASE_API_SECRET}
    depends_on:
      redis:
        condition: service_healthy
      trading-svc:
        condition: service_healthy
    volumes:
      - ./logs/worker-trading:/app/logs
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3102/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ai-service-network

  # Bull Board Dashboard for Queue Monitoring
  # ADDED FOR PARITY WITH DEV ENVIRONMENT
  bull-board:
    image: ghcr.io/christianlb/ai-service-bull-board:latest
    container_name: ai-bull-board
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    environment:
      NODE_ENV: production
      PORT: 3200
      LOG_LEVEL: ${LOG_LEVEL:-info}
      REDIS_HOST: ai-redis
      REDIS_PORT: 6379
      REDIS_URL: redis://ai-redis:6379
      BULL_BOARD_USERNAME: ${BULL_BOARD_USERNAME:-admin}
      BULL_BOARD_PASSWORD: ${BULL_BOARD_PASSWORD:-admin123}
    ports:
      - "3200:3200"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3200/health').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s
    networks:
      - ai-service-network

  # ============================================
  # Layer 5: Frontend
  # ============================================
  frontend:
    image: ghcr.io/christianlb/ai-service-frontend:latest
    container_name: ai-frontend
    restart: unless-stopped
    ports:
      - "3003:8080"
    environment:
      BACKEND_URL: http://ai-gateway:3000
    volumes:
      - ./nginx/frontend-prod.conf:/etc/nginx/conf.d/default.conf:ro
      - /dev/null:/etc/nginx/conf.d/frontend.conf:ro
    networks:
      - ai-service-network
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

networks:
  ai-service-network:
    name: ai-service-network
    driver: bridge
