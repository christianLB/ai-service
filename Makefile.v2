# Makefile for v2 Architecture (Separated Containers)
SHELL := /bin/bash
.PHONY: help

# Colors
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Check if .make.env exists
ifneq (,$(wildcard .make.env))
    include .make.env
    export
endif

help: ## Show this help message
	@echo -e "$(BLUE)AI Service v2 - Separated Containers$(NC)"
	@echo -e "$(YELLOW)Usage:$(NC) make [target]"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

# ============================================================================
# DEVELOPMENT
# ============================================================================

dev-build: ## Build development images locally
	@echo -e "$(BLUE)Building development images...$(NC)"
	docker build -f Dockerfile.api -t ai-service-api:dev .
	docker build -f Dockerfile.frontend -t ai-service-frontend:dev .

dev-up: ## Start development environment
	@echo -e "$(BLUE)Starting development environment...$(NC)"
	docker-compose -f docker-compose.dev.yml up -d
	@echo -e "$(GREEN)Frontend: http://localhost:3000$(NC)"
	@echo -e "$(GREEN)API: http://localhost:3001$(NC)"

dev-down: ## Stop development environment
	@echo -e "$(YELLOW)Stopping development environment...$(NC)"
	docker-compose -f docker-compose.dev.yml down

dev-logs-api: ## Show API logs
	docker-compose -f docker-compose.dev.yml logs -f ai-service-api

dev-logs-frontend: ## Show Frontend logs
	docker-compose -f docker-compose.dev.yml logs -f ai-service-frontend

dev-logs: ## Show all logs
	docker-compose -f docker-compose.dev.yml logs -f

# ============================================================================
# PRODUCTION
# ============================================================================

prod-deploy-v2: ## Deploy v2 architecture to production
	@echo -e "$(YELLOW)⚠️  WARNING: This will deploy the new v2 architecture$(NC)"
	@echo -e "$(YELLOW)Current setup will be replaced with separated containers$(NC)"
	@read -p "Are you sure? (y/N) " -n 1 -r; \
	echo ""; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		$(MAKE) prod-backup-current; \
		$(MAKE) prod-switch-to-v2; \
	else \
		echo -e "$(RED)Deployment cancelled$(NC)"; \
	fi

prod-backup-current: ## Backup current production setup
	@echo -e "$(BLUE)Backing up current production configuration...$(NC)"
	@sshpass -p '$(SSHPASS)' ssh $(SSH_OPTS) $(SSH_USER)@$(SSH_HOST) "\
		cd $(REMOTE_PATH) && \
		cp docker-compose.production.yml docker-compose.production.yml.backup-$$(date +%Y%m%d-%H%M%S) && \
		echo 'Backup created' \
	"

prod-switch-to-v2: check-ssh-config ## Switch to v2 architecture
	@echo -e "$(BLUE)Deploying v2 architecture...$(NC)"
	@echo -e "$(YELLOW)Copying v2 files to production...$(NC)"
	@sshpass -p '$(SSHPASS)' scp $(SSH_OPTS) \
		docker-compose.production.v2.yml \
		$(SSH_USER)@$(SSH_HOST):$(REMOTE_PATH)/docker-compose.production.yml
	@echo -e "$(YELLOW)Updating production containers...$(NC)"
	@sshpass -p '$(SSHPASS)' ssh $(SSH_OPTS) $(SSH_USER)@$(SSH_HOST) "\
		cd $(REMOTE_PATH) && \
		docker-compose pull && \
		docker-compose up -d --remove-orphans \
	"
	@echo -e "$(GREEN)✅ v2 architecture deployed!$(NC)"

prod-status-v2: check-ssh-config ## Check v2 containers status
	@echo -e "$(BLUE)v2 Container Status:$(NC)"
	@sshpass -p '$(SSHPASS)' ssh $(SSH_OPTS) $(SSH_USER)@$(SSH_HOST) "\
		docker ps --filter 'name=ai-service-api' --filter 'name=ai-service-frontend' --format 'table {{.Names}}\t{{.Status}}\t{{.Image}}' \
	"

prod-rollback-v2: check-ssh-config ## Rollback to previous architecture
	@echo -e "$(RED)Rolling back to previous architecture...$(NC)"
	@sshpass -p '$(SSHPASS)' ssh $(SSH_OPTS) $(SSH_USER)@$(SSH_HOST) "\
		cd $(REMOTE_PATH) && \
		if [ -f docker-compose.production.yml.backup-* ]; then \
			cp \$$(ls -t docker-compose.production.yml.backup-* | head -1) docker-compose.production.yml && \
			docker-compose down && \
			docker-compose up -d && \
			echo 'Rollback completed'; \
		else \
			echo 'No backup found!'; \
			exit 1; \
		fi \
	"

# ============================================================================
# TESTING
# ============================================================================

test-v2-local: ## Test v2 architecture locally
	@echo -e "$(BLUE)Testing v2 architecture locally...$(NC)"
	docker-compose -f docker-compose.production.v2.yml up -d
	@sleep 5
	@echo -e "$(YELLOW)Testing health endpoints...$(NC)"
	@curl -f http://localhost:3000/health && echo -e " $(GREEN)✓ Frontend healthy$(NC)" || echo -e " $(RED)✗ Frontend unhealthy$(NC)"
	@curl -f http://localhost:3001/health && echo -e " $(GREEN)✓ API healthy$(NC)" || echo -e " $(RED)✗ API unhealthy$(NC)"
	@echo -e "$(YELLOW)Testing API proxy...$(NC)"
	@curl -f http://localhost:3000/api/health && echo -e " $(GREEN)✓ API proxy working$(NC)" || echo -e " $(RED)✗ API proxy failed$(NC)"
	docker-compose -f docker-compose.production.v2.yml down

# ============================================================================
# MONITORING
# ============================================================================

monitor-v2: check-ssh-config ## Monitor v2 containers
	@echo -e "$(BLUE)Monitoring v2 containers...$(NC)"
	@sshpass -p '$(SSHPASS)' ssh $(SSH_OPTS) $(SSH_USER)@$(SSH_HOST) "\
		docker stats --no-stream ai-service-api ai-service-frontend \
	"

logs-api: check-ssh-config ## Show API container logs
	@sshpass -p '$(SSHPASS)' ssh $(SSH_OPTS) $(SSH_USER)@$(SSH_HOST) "\
		docker logs -f --tail 100 ai-service-api \
	"

logs-frontend: check-ssh-config ## Show Frontend container logs
	@sshpass -p '$(SSHPASS)' ssh $(SSH_OPTS) $(SSH_USER)@$(SSH_HOST) "\
		docker logs -f --tail 100 ai-service-frontend \
	"

# ============================================================================
# UTILITIES
# ============================================================================

check-ssh-config: ## Verify SSH configuration
	@if [ -z "$(SSHPASS)" ] || [ -z "$(SSH_USER)" ] || [ -z "$(SSH_HOST)" ]; then \
		echo -e "$(RED)Error: SSH configuration not found$(NC)"; \
		echo -e "$(YELLOW)Please create .make.env with:$(NC)"; \
		echo "export SSHPASS=your_password"; \
		echo "export SSH_USER=k2600x"; \
		echo "export SSH_HOST=192.168.1.11"; \
		echo "export REMOTE_PATH=/volume1/docker/ai-service"; \
		exit 1; \
	fi

v2-migration-guide: ## Show v2 migration guide
	@echo -e "$(BLUE)=== v2 Architecture Migration Guide ===$(NC)"
	@echo ""
	@echo -e "$(YELLOW)Benefits of v2:$(NC)"
	@echo "  • Independent frontend/backend deployments"
	@echo "  • Automatic updates via Watchtower"
	@echo "  • Better resource isolation"
	@echo "  • Faster deployments"
	@echo ""
	@echo -e "$(YELLOW)Migration Steps:$(NC)"
	@echo "  1. make test-v2-local     # Test locally"
	@echo "  2. make prod-deploy-v2    # Deploy to production"
	@echo "  3. make prod-status-v2    # Verify deployment"
	@echo ""
	@echo -e "$(YELLOW)Rollback if needed:$(NC)"
	@echo "  make prod-rollback-v2"
	@echo ""
	@echo -e "$(GREEN)Frontend updates are now automatic!$(NC)"

# SSH options
SSH_OPTS := -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null