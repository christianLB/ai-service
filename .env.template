# ============================================================================
# AI Service - Comprehensive Environment Variables Template
# ============================================================================
# 
# Instructions:
# 1. Copy this file to .env for development or .env.production for production
# 2. Fill in all required values (marked with REQUIRED)
# 3. Never commit .env or .env.production to version control
# 4. Use strong, unique values for secrets in production
#
# ============================================================================

# ===== CORE CONFIGURATION =====
# Environment: development, test, or production
NODE_ENV=development

# Service port (each service needs a unique port)
PORT=3000

# Service name (auto-set by each service, do not change)
SERVICE_NAME=

# Service version
SERVICE_VERSION=1.0.0

# Logging level: error, warn, info, debug, trace
LOG_LEVEL=info

# ===== DATABASE CONFIGURATION =====
# REQUIRED - PostgreSQL connection URL
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ai_service

# Legacy database variables (for backward compatibility)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=ai_service
DB_USER=postgres
DB_PASSWORD=postgres

# Database connection pool settings
DB_POOL_MIN=2
DB_POOL_MAX=10

# ===== REDIS CONFIGURATION =====
# REQUIRED - Redis connection URL
# Format: redis://[:password@]host[:port][/db-number]
REDIS_URL=redis://localhost:6379

# Optional Redis password
REDIS_PASSWORD=

# Redis database number (0-15)
REDIS_DB=0

# Redis key prefix for namespacing
REDIS_KEY_PREFIX=ai-service:

# ===== SECURITY CONFIGURATION =====
# REQUIRED - JWT secret for token signing (min 32 chars, 64+ for production)
# Generate with: openssl rand -base64 64
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# JWT algorithm: HS256, HS384, HS512, RS256
JWT_ALGORITHM=HS256

# JWT token expiry times
JWT_EXPIRY=24h
JWT_REFRESH_EXPIRY=7d

# REQUIRED in production - Encryption key for sensitive data (min 32 chars)
# Generate with: openssl rand -hex 32
ENCRYPTION_KEY=

# Password hashing rounds (10-20, higher = more secure but slower)
HASH_SALT_ROUNDS=12

# ===== API KEYS (Service-Specific) =====
# OpenAI API key (REQUIRED for ai-core in production)
OPENAI_API_KEY=sk-your-openai-api-key

# Anthropic API key (optional)
ANTHROPIC_API_KEY=sk-ant-your-anthropic-api-key

# GoCardless configuration (REQUIRED for financial-svc in production)
GOCARDLESS_ACCESS_TOKEN=your-gocardless-token
GOCARDLESS_ENVIRONMENT=sandbox

# ===== TELEGRAM CONFIGURATION =====
# Telegram bot token from @BotFather
TELEGRAM_BOT_TOKEN=your-telegram-bot-token

# Webhook URL for Telegram (optional, for production)
TELEGRAM_WEBHOOK_URL=https://your-domain.com/webhook/telegram

# Telegram chat IDs for notifications
TELEGRAM_CHAT_ID=
TELEGRAM_ADMIN_CHAT_IDS=

# Enable/disable Telegram alerts
TELEGRAM_ALERTS_ENABLED=false

# ===== TRADING API KEYS =====
# Binance API credentials
BINANCE_API_KEY=
BINANCE_API_SECRET=

# Coinbase API credentials
COINBASE_API_KEY=
COINBASE_API_SECRET=

# Alpaca API credentials
ALPACA_API_KEY=
ALPACA_API_SECRET=

# ===== SERVICE DISCOVERY (API Gateway) =====
# Internal service URLs (Docker service names in containers)
FINANCIAL_SVC_URL=http://financial-svc:3001
TRADING_SVC_URL=http://trading-svc:3002
COMM_SVC_URL=http://comm-svc:3003
AI_CORE_URL=http://ai-core:3004
WORKER_FINANCIAL_URL=http://worker-financial:3101
WORKER_TRADING_URL=http://worker-trading:3102

# ===== CORS CONFIGURATION =====
# Comma-separated list of allowed origins
CORS_ORIGINS=http://localhost:3000,http://localhost:3005

# Allow credentials in CORS requests
CORS_CREDENTIALS=true

# ===== RATE LIMITING =====
# Rate limit window in milliseconds (default: 15 minutes)
RATE_LIMIT_WINDOW_MS=900000

# Maximum requests per window
RATE_LIMIT_MAX_REQUESTS=100

# Skip successful requests in rate limit counting
RATE_LIMIT_SKIP_SUCCESSFUL=false

# ===== QUEUE CONFIGURATION (BullMQ) =====
# Queue name prefix
QUEUE_PREFIX=ai-service

# Automatically remove completed jobs
QUEUE_DEFAULT_REMOVE_ON_COMPLETE=true

# Automatically remove failed jobs
QUEUE_DEFAULT_REMOVE_ON_FAIL=false

# ===== MONITORING & OBSERVABILITY =====
# Enable metrics collection
METRICS_ENABLED=true

# Metrics port (optional, uses main port if not set)
METRICS_PORT=

# Enable distributed tracing
TRACING_ENABLED=false

# Tracing service name
TRACING_SERVICE_NAME=

# ===== FEATURE FLAGS =====
# Enable/disable major features
FEATURE_TRADING_ENABLED=true
FEATURE_AI_ENABLED=true
FEATURE_NOTIFICATIONS_ENABLED=true
FEATURE_DOCUMENT_PROCESSING_ENABLED=true

# ===== EMAIL CONFIGURATION (SMTP) =====
# SMTP server settings
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password
SMTP_FROM=noreply@your-domain.com

# ===== STORAGE CONFIGURATION =====
# Storage type: local, s3, or gcs
STORAGE_TYPE=local

# Local storage path
STORAGE_PATH=./storage

# S3 configuration (if STORAGE_TYPE=s3)
S3_BUCKET=
S3_REGION=us-east-1
S3_ACCESS_KEY=
S3_SECRET_KEY=

# ===== INFRASTRUCTURE =====
# Running in Docker environment
DOCKER_ENV=false

# Health check timeout in milliseconds
HEALTH_CHECK_TIMEOUT=5000

# Graceful shutdown timeout in milliseconds
SHUTDOWN_TIMEOUT=10000

# ===== DEVELOPMENT TOOLS =====
# Debug namespaces (e.g., "app:*,express:*")
DEBUG=

# Force color output (0=off, 1=on, 2=256 colors, 3=16m colors)
FORCE_COLOR=

# ============================================================================
# SERVICE-SPECIFIC REQUIREMENTS
# ============================================================================
#
# api-gateway:
#   - All service URLs must be configured
#   - JWT_SECRET required
#
# financial-svc:
#   - GOCARDLESS_ACCESS_TOKEN required in production
#   - Database access required
#
# trading-svc:
#   - Trading API keys optional but recommended
#   - Redis required for caching
#
# comm-svc:
#   - TELEGRAM_BOT_TOKEN or SMTP configuration recommended
#   - Redis required for queues
#
# ai-core:
#   - OPENAI_API_KEY required in production
#   - High memory requirements
#
# worker-financial:
#   - Redis required for job queue
#   - Database access required
#
# worker-trading:
#   - Redis required for job queue
#   - Trading API keys recommended
#
# ============================================================================