openapi: 3.0.3
info:
  title: Financial Service API
  version: 1.0.0
  description: API for financial domain operations including accounts, clients, invoices, transactions, and attachments

servers:
  - url: http://localhost:3001
    description: Local development server

security:
  - BearerAuth: []

paths:
  /api/financial/accounts:
    get:
      summary: List bank accounts
      operationId: listAccounts
      tags:
        - Accounts
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (1-based)
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountListResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/accounts/{id}:
    get:
      summary: Get account by ID
      operationId: getAccount
      tags:
        - Accounts
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Account details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/clients:
    get:
      summary: List clients
      operationId: listClients
      tags:
        - Clients
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: email
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientListResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create client
      operationId: createClient
      tags:
        - Clients
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClient'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/clients/search:
    post:
      summary: Search clients
      operationId: searchClients
      tags:
        - Clients
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchQuery'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientListResponse'
        '400':
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/clients/bulk:
    post:
      summary: Bulk operations on clients
      operationId: bulkClients
      tags:
        - Clients
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkOperationRequest'
      responses:
        '200':
          description: Bulk operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
        '400':
          description: Invalid bulk operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/clients/tax/{taxId}:
    get:
      summary: Get client by tax ID
      operationId: getClientByTaxId
      tags:
        - Clients
      security:
        - BearerAuth: []
      parameters:
        - name: taxId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Client details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/clients/{id}:
    get:
      summary: Get client by ID
      operationId: getClient
      tags:
        - Clients
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Client details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update client
      operationId: updateClient
      tags:
        - Clients
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClient'
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete client
      operationId: deleteClient
      tags:
        - Clients
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Client deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/clients/{id}/stats:
    get:
      summary: Get client statistics
      operationId: getClientStats
      tags:
        - Clients
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Client statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientStats'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/clients/{id}/transactions:
    get:
      summary: Get client transactions
      operationId: getClientTransactions
      tags:
        - Clients
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Client transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListResponse'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoices:
    get:
      summary: List invoices
      operationId: listInvoices
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, sent, paid, overdue, cancelled]
      responses:
        '200':
          description: List of invoices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceListResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create invoice
      operationId: createInvoice
      tags:
        - Invoices
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoice'
      responses:
        '201':
          description: Invoice created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoices/overdue:
    get:
      summary: Get overdue invoices
      operationId: getOverdueInvoices
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of overdue invoices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoices/number/{invoiceNumber}:
    get:
      summary: Get invoice by number
      operationId: getInvoiceByNumber
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: invoiceNumber
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invoice details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoices/{id}:
    get:
      summary: Get invoice by ID
      operationId: getInvoice
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Invoice details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update invoice
      operationId: updateInvoice
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInvoice'
      responses:
        '200':
          description: Invoice updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete invoice
      operationId: deleteInvoice
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Invoice deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoices/{id}/mark-paid:
    post:
      summary: Mark invoice as paid
      operationId: markInvoicePaid
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentDetails'
      responses:
        '200':
          description: Invoice marked as paid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '400':
          description: Invalid payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoices/{id}/send:
    post:
      summary: Send invoice
      operationId: sendInvoice
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendInvoiceRequest'
      responses:
        '200':
          description: Invoice sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '400':
          description: Invalid send request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoices/{id}/duplicate:
    post:
      summary: Duplicate invoice
      operationId: duplicateInvoice
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Invoice duplicated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoices/{id}/items:
    post:
      summary: Add item to invoice
      operationId: addInvoiceItem
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceItem'
      responses:
        '200':
          description: Item added to invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '400':
          description: Invalid item data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoices/{id}/generate-pdf:
    post:
      summary: Generate invoice PDF
      operationId: generateInvoicePdf
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: PDF generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  pdfUrl:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoices/{id}/download-pdf:
    get:
      summary: Download invoice PDF
      operationId: downloadInvoicePdf
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: PDF file
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invoice or PDF not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoices/{id}/send-email:
    post:
      summary: Send invoice by email
      operationId: sendInvoiceEmail
      tags:
        - Invoices
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      responses:
        '200':
          description: Email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '400':
          description: Invalid email request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/transactions:
    get:
      summary: List transactions
      operationId: listTransactions
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: accountId
          in: query
          schema:
            type: string
            description: Filter by account ID
        - name: type
          in: query
          schema:
            type: string
            enum: [debit, credit, transfer]
            description: Filter by transaction type
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, confirmed, failed, cancelled]
            description: Filter by transaction status
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date
            description: Start date for date range filter
        - name: dateTo
          in: query
          schema:
            type: string
            format: date
            description: End date for date range filter
        - name: minAmount
          in: query
          schema:
            type: number
            description: Minimum transaction amount
        - name: maxAmount
          in: query
          schema:
            type: number
            description: Maximum transaction amount
        - name: search
          in: query
          schema:
            type: string
            description: Search in description and counterparty name
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/transactions/import:
    post:
      summary: Import transactions
      operationId: importTransactions
      tags:
        - Transactions
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: JSON file containing transactions
                accountId:
                  type: string
                  format: uuid
                  description: Account ID to associate transactions with
              required:
                - file
                - accountId
      responses:
        '200':
          description: Import completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResult'
        '400':
          description: Invalid file or parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/transactions/{id}:
    get:
      summary: Get transaction by ID
      operationId: getTransaction
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete transaction
      operationId: deleteTransaction
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Transaction deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/transactions/{id}/categorize:
    post:
      summary: Categorize transaction
      operationId: categorizeTransaction
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategorizationRequest'
      responses:
        '200':
          description: Transaction categorized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '400':
          description: Invalid categorization request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/categorize/auto:
    post:
      summary: Auto-categorize transactions
      operationId: autoCategorizeTransactions
      tags:
        - Transactions
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transactionIds:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - transactionIds
      responses:
        '200':
          description: Auto-categorization completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  categorizedCount:
                    type: integer
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/transactions/export:
    get:
      summary: Export transactions
      operationId: exportTransactions
      tags:
        - Transactions
      security:
        - BearerAuth: []
      parameters:
        - name: format
          in: query
          schema:
            type: string
            enum: [csv, json]
            default: csv
        - name: accountId
          in: query
          schema:
            type: string
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Exported transactions
          content:
            text/csv:
              schema:
                type: string
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/account-status:
    get:
      summary: Get account status
      operationId: getAccountStatus
      tags:
        - Accounts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Account status information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStatusResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/gocardless/credentials:
    get:
      summary: Check GoCardless credentials
      operationId: checkGoCardlessCredentials
      tags:
        - GoCardless
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Credentials status
          content:
            application/json:
              schema:
                type: object
                properties:
                  configured:
                    type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Configure GoCardless credentials
      operationId: configureGoCardlessCredentials
      tags:
        - GoCardless
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoCardlessConfig'
      responses:
        '200':
          description: Credentials configured successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '400':
          description: Invalid configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete GoCardless credentials
      operationId: deleteGoCardlessCredentials
      tags:
        - GoCardless
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Credentials deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/gocardless/status:
    get:
      summary: Get GoCardless status
      operationId: getGoCardlessStatus
      tags:
        - GoCardless
      security:
        - BearerAuth: []
      responses:
        '200':
          description: GoCardless status information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoCardlessStatus'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/test-gocardless:
    post:
      summary: Test GoCardless connection
      operationId: testGoCardlessConnection
      tags:
        - GoCardless
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Connection test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '400':
          description: Connection test failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/diagnose-gocardless:
    post:
      summary: Diagnose GoCardless issues
      operationId: diagnoseGoCardlessIssues
      tags:
        - GoCardless
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Diagnosis report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagnosisReport'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/setup-bbva:
    post:
      summary: Setup BBVA connection
      operationId: setupBbvaConnection
      tags:
        - Setup
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Setup initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupResponse'
        '400':
          description: Setup failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/complete-setup:
    post:
      summary: Complete setup process
      operationId: completeSetup
      tags:
        - Setup
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requisitionId:
                  type: string
              required:
                - requisitionId
      responses:
        '200':
          description: Setup completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupResult'
        '400':
          description: Invalid requisition ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/sync:
    post:
      summary: Manual sync
      operationId: manualSync
      tags:
        - Sync
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sync completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResult'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/sync/accounts:
    post:
      summary: Sync accounts
      operationId: syncAccounts
      tags:
        - Sync
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Accounts synced
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResult'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/sync/balances:
    post:
      summary: Sync balances
      operationId: syncBalances
      tags:
        - Sync
      security:
        - BearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                forceRefresh:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Balances synced
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResult'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/sync/transactions:
    post:
      summary: Sync transactions
      operationId: syncTransactions
      tags:
        - Sync
      security:
        - BearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                days:
                  type: integer
                  description: Number of days to sync
                  default: 30
      responses:
        '200':
          description: Transactions synced
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResult'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/scheduler/start:
    post:
      summary: Start scheduler
      operationId: startScheduler
      tags:
        - Scheduler
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Scheduler started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/scheduler/stop:
    post:
      summary: Stop scheduler
      operationId: stopScheduler
      tags:
        - Scheduler
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Scheduler stopped
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/attachments:
    get:
      summary: List attachments
      operationId: listAttachments
      tags:
        - Attachments
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: invoiceId
          in: query
          schema:
            type: string
            format: uuid
            description: Filter by invoice ID
        - name: fileType
          in: query
          schema:
            type: string
            description: Filter by file type
      responses:
        '200':
          description: List of attachments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentListResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/attachments/{id}:
    get:
      summary: Get attachment by ID
      operationId: getAttachment
      tags:
        - Attachments
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Attachment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '404':
          description: Attachment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoice-templates:
    get:
      summary: List invoice templates
      operationId: listInvoiceTemplates
      tags:
        - Invoice Templates
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          schema:
            type: string
          description: Search in name or description
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [name, createdAt, updatedAt]
            default: createdAt
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of invoice templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceTemplateListResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create invoice template
      operationId: createInvoiceTemplate
      tags:
        - Invoice Templates
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoiceTemplate'
      responses:
        '201':
          description: Invoice template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceTemplateResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/invoice-templates/{id}:
    get:
      summary: Get invoice template by ID
      operationId: getInvoiceTemplate
      tags:
        - Invoice Templates
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Invoice template details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceTemplateResponse'
        '404':
          description: Invoice template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update invoice template
      operationId: updateInvoiceTemplate
      tags:
        - Invoice Templates
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInvoiceTemplate'
      responses:
        '200':
          description: Invoice template updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceTemplateResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invoice template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete invoice template
      operationId: deleteInvoiceTemplate
      tags:
        - Invoice Templates
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Invoice template deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invoice template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Dashboard endpoints
  /api/financial/dashboard/overview:
    get:
      summary: Get dashboard overview
      operationId: getDashboardOverview
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      parameters:
        - name: currency
          in: query
          schema:
            type: string
            default: EUR
          description: Currency for financial data
      responses:
        '200':
          description: Dashboard overview data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardOverviewResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/dashboard/quick-stats:
    get:
      summary: Get quick financial statistics
      operationId: getQuickStats
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      parameters:
        - name: currency
          in: query
          schema:
            type: string
            default: EUR
          description: Currency for financial data
        - name: period
          in: query
          schema:
            type: string
          description: Time period for statistics
      responses:
        '200':
          description: Quick financial statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuickStatsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/dashboard/revenue-metrics:
    get:
      summary: Get revenue metrics
      operationId: getRevenueMetrics
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [monthly, quarterly, yearly, custom]
          description: Period type for metrics
        - name: currency
          in: query
          schema:
            type: string
            default: EUR
          description: Currency for revenue data
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for custom period
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for custom period
      responses:
        '200':
          description: Revenue metrics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevenueMetricsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/dashboard/invoice-stats:
    get:
      summary: Get invoice statistics
      operationId: getInvoiceStats
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      parameters:
        - name: currency
          in: query
          schema:
            type: string
            default: EUR
          description: Currency for invoice data
        - name: includeAging
          in: query
          schema:
            type: boolean
            default: false
          description: Include aging analysis
      responses:
        '200':
          description: Invoice statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceStatsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/dashboard/client-metrics:
    get:
      summary: Get client metrics
      operationId: getClientMetrics
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      parameters:
        - name: currency
          in: query
          schema:
            type: string
            default: EUR
          description: Currency for client data
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
          description: Number of clients to include
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [total_revenue, outstanding_balance, risk_score, last_invoice_date]
            default: total_revenue
          description: Sort clients by field
        - name: includeInactive
          in: query
          schema:
            type: boolean
            default: false
          description: Include inactive clients
      responses:
        '200':
          description: Client metrics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientMetricsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/dashboard/cash-flow:
    get:
      summary: Get cash flow projections
      operationId: getCashFlowProjections
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      parameters:
        - name: currency
          in: query
          schema:
            type: string
            default: EUR
          description: Currency for cash flow data
        - name: daysAhead
          in: query
          schema:
            type: integer
            default: 90
          description: Number of days ahead to project
        - name: includeTransactions
          in: query
          schema:
            type: boolean
            default: true
          description: Include recent transactions in response
      responses:
        '200':
          description: Cash flow projections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashFlowProjectionsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/dashboard/yearly-report:
    get:
      summary: Get yearly financial report
      operationId: getYearlyReport
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      parameters:
        - name: year
          in: query
          required: true
          schema:
            type: integer
            minimum: 2020
            maximum: 2030
          description: Year for the report
        - name: currency
          in: query
          schema:
            type: string
            default: EUR
          description: Currency for report data
      responses:
        '200':
          description: Yearly financial report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YearlyReportResponse'
        '400':
          description: Invalid year parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/dashboard/health:
    get:
      summary: Get dashboard health status
      operationId: getDashboardHealth
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Dashboard health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardHealthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/metrics/realtime:
    get:
      summary: Get realtime financial metrics
      operationId: getRealtimeMetrics
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
          description: Period for metrics calculation
        - name: currency
          in: query
          schema:
            type: string
            default: EUR
          description: Currency for metrics
        - name: includeProjections
          in: query
          schema:
            type: boolean
            default: false
          description: Include projections in response
        - name: includeTrends
          in: query
          schema:
            type: boolean
            default: false
          description: Include trend analysis
      responses:
        '200':
          description: Realtime financial metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealtimeMetricsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/analytics/monthly-summary:
    get:
      summary: Get monthly analytics summary
      operationId: getMonthlyAnalytics
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Start date for analytics period
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: End date for analytics period
        - name: currency
          in: query
          schema:
            type: string
            default: EUR
          description: Currency for analytics data
      responses:
        '200':
          description: Monthly analytics summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonthlyAnalyticsResponse'
        '400':
          description: Invalid date parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/insights/accounts:
    get:
      summary: Get account insights
      operationId: getAccountInsights
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Account insights data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountInsightsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/categories:
    get:
      summary: Get financial categories
      operationId: getCategories
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [income, expense, transfer]
          description: Filter by category type
      responses:
        '200':
          description: List of financial categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/sync-status:
    get:
      summary: Get synchronization status
      operationId: getSyncStatus
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sync status information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncStatusResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/health:
    get:
      summary: Get system health status
      operationId: getHealthCheck
      tags:
        - Dashboard
      security:
        - BearerAuth: []
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatusResponse'
        '500':
          description: System health check failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/financial/reports/comprehensive:
    get:
      summary: Generate comprehensive financial report
      operationId: generateComprehensiveReport
      tags:
        - Reports
      security:
        - BearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for report period
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for report period
        - name: accountId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by specific account
        - name: includeForecasts
          in: query
          schema:
            type: boolean
            default: false
          description: Include financial forecasts
        - name: granularity
          in: query
          schema:
            type: string
            enum: [daily, weekly, monthly, yearly]
            default: monthly
          description: Report data granularity
      responses:
        '200':
          description: Financial report generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialReportResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
          description: Error message
        code:
          type: string
          description: Error code (BAD_REQUEST, NOT_FOUND, etc.)

    StandardResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        data:
          type: object
          description: Response data (varies by operation)
        message:
          type: string
          description: Success message
        error:
          type: string
          description: Error message (if success is false)

    # Client Schemas
    CreateClient:
      type: object
      required:
        - name
        - defaultCurrency
        - paymentTerms
        - isActive
      properties:
        name:
          type: string
          minLength: 1
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true
        taxId:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        postalCode:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
        defaultCurrency:
          type: string
          default: 'EUR'
        paymentTerms:
          type: integer
          minimum: 0
          default: 30
        notes:
          type: string
          nullable: true
        isActive:
          type: boolean
          default: true
        metadata:
          type: object
          nullable: true

    UpdateClient:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true
        taxId:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        postalCode:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
        defaultCurrency:
          type: string
        paymentTerms:
          type: integer
          minimum: 0
        notes:
          type: string
          nullable: true
        isActive:
          type: boolean
        metadata:
          type: object
          nullable: true

    SearchQuery:
      type: object
      properties:
        query:
          type: string
          description: Search term
        filters:
          type: object
          description: Additional filters
        page:
          type: integer
          minimum: 1
          default: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20

    BulkOperationRequest:
      type: object
      required:
        - operation
        - ids
      properties:
        operation:
          type: string
          enum: [delete, activate, deactivate, export]
        ids:
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
        options:
          type: object
          description: Operation-specific options

    BulkOperationResponse:
      type: object
      required:
        - success
        - processed
        - failed
      properties:
        success:
          type: boolean
        processed:
          type: integer
        failed:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              error:
                type: string

    ClientStats:
      type: object
      properties:
        totalRevenue:
          type: number
        totalInvoices:
          type: integer
        outstandingBalance:
          type: number
        averageInvoiceAmount:
          type: number
        lastInvoiceDate:
          type: string
          format: date
        paymentHistory:
          type: array
          items:
            type: object

    # Invoice Schemas
    CreateInvoice:
      type: object
      required:
        - clientId
        - status
        - total
        - subtotal
        - tax
        - issueDate
        - dueDate
        - items
      properties:
        clientId:
          type: string
          format: uuid
        invoiceNumber:
          type: string
          description: Auto-generated if not provided
        status:
          type: string
          enum: [draft, sent, paid, overdue, cancelled]
          default: draft
        total:
          type: number
        subtotal:
          type: number
        tax:
          type: number
        issueDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        notes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItem'
          minItems: 1

    UpdateInvoice:
      type: object
      properties:
        clientId:
          type: string
          format: uuid
        status:
          type: string
          enum: [draft, sent, paid, overdue, cancelled]
        total:
          type: number
        subtotal:
          type: number
        tax:
          type: number
        issueDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        paidDate:
          type: string
          format: date
        notes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItem'

    PaymentDetails:
      type: object
      required:
        - paidDate
      properties:
        paidDate:
          type: string
          format: date
        paymentMethod:
          type: string
        paymentReference:
          type: string

    SendInvoiceRequest:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          enum: [email, post, sms]
        email:
          type: string
          format: email
        message:
          type: string
        attachPdf:
          type: boolean
          default: true

    EmailRequest:
      type: object
      required:
        - to
        - subject
      properties:
        to:
          type: string
          format: email
        subject:
          type: string
        message:
          type: string
        attachPdf:
          type: boolean
          default: true

    # Transaction Schemas
    CategorizationRequest:
      type: object
      required:
        - categoryId
      properties:
        categoryId:
          type: string
          format: uuid
        confidence:
          type: number
          minimum: 0
          maximum: 1
        method:
          type: string
          enum: [manual, ai, pattern]
          default: manual

    ImportResult:
      type: object
      required:
        - success
        - imported
        - skipped
      properties:
        success:
          type: boolean
        imported:
          type: integer
        skipped:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              row:
                type: integer
              error:
                type: string
        duplicates:
          type: array
          items:
            type: object
            properties:
              row:
                type: integer
              transactionId:
                type: string

    # Account Schemas
    AccountStatusResponse:
      type: object
      properties:
        connected:
          type: boolean
        lastSync:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, inactive, error]
        accountsCount:
          type: integer
        balanceTotal:
          type: number

    # GoCardless Schemas
    GoCardlessConfig:
      type: object
      required:
        - secretId
        - secretKey
        - environment
      properties:
        secretId:
          type: string
        secretKey:
          type: string
        environment:
          type: string
          enum: [sandbox, live]
          default: sandbox

    GoCardlessStatus:
      type: object
      properties:
        configured:
          type: boolean
        connected:
          type: boolean
        lastSync:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, inactive, error]
        error:
          type: string

    DiagnosisReport:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, warning, error]
        issues:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              severity:
                type: string
                enum: [low, medium, high, critical]
              description:
                type: string
              solution:
                type: string
        lastChecked:
          type: string
          format: date-time

    # Setup & Sync Schemas
    SetupResponse:
      type: object
      properties:
        success:
          type: boolean
        requisitionId:
          type: string
        authUrl:
          type: string
        status:
          type: string

    SetupResult:
      type: object
      properties:
        success:
          type: boolean
        accountsFound:
          type: integer
        message:
          type: string

    SyncResult:
      type: object
      properties:
        success:
          type: boolean
        synchronized:
          type: integer
        failed:
          type: integer
        lastSync:
          type: string
          format: date-time
        message:
          type: string

    PaginationInfo:
      type: object
      required:
        - page
        - limit
        - total
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
        total:
          type: integer
          minimum: 0

    Account:
      type: object
      required:
        - id
        - account_id
        - name
        - type
      properties:
        id:
          type: string
          format: uuid
        account_id:
          type: string
        name:
          type: string
        type:
          type: string
        institution:
          type: string
        institution_id:
          type: string
        iban:
          type: string
        currency:
          type: string
        balance:
          type: number
        available_balance:
          type: number
        is_active:
          type: boolean
        last_sync:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    AccountListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationInfo'
        - type: object
          required:
            - accounts
          properties:
            accounts:
              type: array
              items:
                $ref: '#/components/schemas/Account'

    Client:
      type: object
      required:
        - id
        - name
        - email
        - status
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        taxId:
          type: string
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
        status:
          type: string
          enum: [active, inactive]
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ClientListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationInfo'
        - type: object
          required:
            - clients
          properties:
            clients:
              type: array
              items:
                $ref: '#/components/schemas/Client'

    Invoice:
      type: object
      required:
        - id
        - invoiceNumber
        - clientId
        - status
        - total
        - issueDate
        - dueDate
      properties:
        id:
          type: string
          format: uuid
        invoiceNumber:
          type: string
        clientId:
          type: string
          format: uuid
        clientName:
          type: string
        clientTaxId:
          type: string
        status:
          type: string
          enum: [draft, sent, paid, overdue, cancelled]
        total:
          type: number
        subtotal:
          type: number
        tax:
          type: number
        issueDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        paidDate:
          type: string
          format: date
        notes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItem'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    InvoiceItem:
      type: object
      required:
        - description
        - quantity
        - unitPrice
        - total
      properties:
        description:
          type: string
        quantity:
          type: number
        unitPrice:
          type: number
        total:
          type: number

    InvoiceListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationInfo'
        - type: object
          required:
            - invoices
          properties:
            invoices:
              type: array
              items:
                $ref: '#/components/schemas/Invoice'

    Transaction:
      type: object
      required:
        - id
        - transaction_id
        - account_id
        - amount
        - type
        - date
      properties:
        id:
          type: string
          format: uuid
        transaction_id:
          type: string
        account_id:
          type: string
        amount:
          type: number
        currency:
          type: string
        type:
          type: string
          enum: [debit, credit, transfer]
        status:
          type: string
          enum: [pending, confirmed, failed, cancelled]
        description:
          type: string
        reference:
          type: string
        counterparty_name:
          type: string
        counterparty_account:
          type: string
        date:
          type: string
          format: date
        tags:
          type: array
          items:
            type: string
        fee_amount:
          type: number
        fee_currency:
          type: string
        metadata:
          type: object
        gocardless_data:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TransactionListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationInfo'
        - type: object
          required:
            - transactions
          properties:
            transactions:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
            stats:
              type: object
              properties:
                totalIncome:
                  type: number
                totalExpenses:
                  type: number

    Attachment:
      type: object
      required:
        - id
        - invoiceId
        - fileName
        - filePath
        - fileSize
        - fileType
        - uploadedAt
      properties:
        id:
          type: string
          format: uuid
        invoiceId:
          type: string
          format: uuid
        fileName:
          type: string
        filePath:
          type: string
        fileSize:
          type: integer
        fileType:
          type: string
        description:
          type: string
        uploadedBy:
          type: string
        uploadedAt:
          type: string
          format: date-time
        isDeleted:
          type: boolean
        deletedAt:
          type: string
          format: date-time
        deletedBy:
          type: string

    AttachmentListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationInfo'
        - type: object
          required:
            - attachments
          properties:
            attachments:
              type: array
              items:
                $ref: '#/components/schemas/Attachment'

    # Invoice Template Schemas
    InvoiceTemplate:
      type: object
      required:
        - id
        - userId
        - name
        - templateType
        - htmlContent
        - variables
        - isDefault
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
        description:
          type: string
          nullable: true
        templateType:
          type: string
          default: invoice
        htmlContent:
          type: string
          description: HTML content of the template
        variables:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
                enum: [text, number, date, boolean]
              required:
                type: boolean
              defaultValue:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
          description: Template variable definitions
        isDefault:
          type: boolean
          default: false
        metadata:
          type: object
          additionalProperties: true
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateInvoiceTemplate:
      type: object
      required:
        - name
        - htmlContent
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        templateType:
          type: string
          default: invoice
        htmlContent:
          type: string
          description: HTML content of the template
        variables:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
                enum: [text, number, date, boolean]
              required:
                type: boolean
              defaultValue:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
        isDefault:
          type: boolean
          default: false
        metadata:
          type: object
          additionalProperties: true

    UpdateInvoiceTemplate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        templateType:
          type: string
        htmlContent:
          type: string
          description: HTML content of the template
        variables:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
                enum: [text, number, date, boolean]
              required:
                type: boolean
              defaultValue:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
        isDefault:
          type: boolean
        metadata:
          type: object
          additionalProperties: true

    InvoiceTemplateResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/InvoiceTemplate'
        message:
          type: string

    InvoiceTemplateListResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: object
          required:
            - items
            - total
            - page
            - limit
            - totalPages
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/InvoiceTemplate'
            total:
              type: integer
            page:
              type: integer
            limit:
              type: integer
            totalPages:
              type: integer

    # Financial Report Schemas
    FinancialReport:
      type: object
      properties:
        period:
          type: object
          properties:
            startDate:
              type: string
              format: date
            endDate:
              type: string
              format: date
            granularity:
              type: string
              enum: [daily, weekly, monthly, yearly]
        summary:
          type: object
          properties:
            totalIncome:
              type: number
            totalExpenses:
              type: number
            netIncome:
              type: number
            averageBalance:
              type: number
            transactionCount:
              type: integer
        accountBreakdown:
          type: array
          items:
            type: object
            properties:
              accountId:
                type: string
                format: uuid
              accountName:
                type: string
              balance:
                type: number
              income:
                type: number
              expenses:
                type: number
              transactionCount:
                type: integer
        categoryBreakdown:
          type: array
          items:
            type: object
            properties:
              category:
                type: string
              amount:
                type: number
              percentage:
                type: number
              transactionCount:
                type: integer
        timeSeriesData:
          type: array
          items:
            type: object
            properties:
              period:
                type: string
              income:
                type: number
              expenses:
                type: number
              balance:
                type: number
        forecasts:
          type: object
          nullable: true
          properties:
            nextMonth:
              type: object
              properties:
                expectedIncome:
                  type: number
                expectedExpenses:
                  type: number
                projectedBalance:
                  type: number
            quarterEnd:
              type: object
              properties:
                expectedIncome:
                  type: number
                expectedExpenses:
                  type: number
                projectedBalance:
                  type: number
        generatedAt:
          type: string
          format: date-time

    # Dashboard Response Schemas
    DashboardOverviewResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/DashboardMetrics'
        message:
          type: string

    QuickStatsResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: object
          required:
            - current
            - previous
            - changes
            - period
            - currency
            - generatedAt
          properties:
            current:
              type: object
              required:
                - income
                - expenses
                - net
                - transactions
              properties:
                income:
                  type: string
                expenses:
                  type: string
                net:
                  type: string
                transactions:
                  type: integer
            previous:
              type: object
              required:
                - income
                - expenses
                - net
                - transactions
              properties:
                income:
                  type: string
                expenses:
                  type: string
                net:
                  type: string
                transactions:
                  type: integer
            changes:
              type: object
              required:
                - income
                - expenses
                - net
              properties:
                income:
                  type: number
                expenses:
                  type: number
                net:
                  type: number
            period:
              type: object
              required:
                - current
                - previous
              properties:
                current:
                  type: object
                  required:
                    - start
                    - end
                  properties:
                    start:
                      type: string
                    end:
                      type: string
                previous:
                  type: object
                  required:
                    - start
                    - end
                  properties:
                    start:
                      type: string
                    end:
                      type: string
            currency:
              type: string
            generatedAt:
              type: string
        message:
          type: string

    RevenueMetricsResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/RevenueMetrics'
        message:
          type: string

    InvoiceStatsResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/InvoiceStatistics'
        message:
          type: string

    ClientMetricsResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/ClientMetrics'
        message:
          type: string

    CashFlowProjectionsResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/CashFlowProjections'
        message:
          type: string

    YearlyReportResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: object
          required:
            - year
            - currency
            - categories
            - monthlyTotals
            - yearTotals
          properties:
            year:
              type: integer
            currency:
              type: string
            categories:
              type: object
              required:
                - income
                - expense
              properties:
                income:
                  type: array
                  items:
                    type: object
                    required:
                      - categoryId
                      - categoryName
                      - categoryColor
                      - monthlyData
                      - total
                      - percentage
                    properties:
                      categoryId:
                        type: string
                      categoryName:
                        type: string
                      categoryColor:
                        type: string
                      monthlyData:
                        type: object
                        additionalProperties:
                          type: string
                      total:
                        type: string
                      percentage:
                        type: number
                expense:
                  type: array
                  items:
                    type: object
                    required:
                      - categoryId
                      - categoryName
                      - categoryColor
                      - monthlyData
                      - total
                      - percentage
                    properties:
                      categoryId:
                        type: string
                      categoryName:
                        type: string
                      categoryColor:
                        type: string
                      monthlyData:
                        type: object
                        additionalProperties:
                          type: string
                      total:
                        type: string
                      percentage:
                        type: number
            monthlyTotals:
              type: object
              required:
                - income
                - expense
                - balance
              properties:
                income:
                  type: object
                  additionalProperties:
                    type: string
                expense:
                  type: object
                  additionalProperties:
                    type: string
                balance:
                  type: object
                  additionalProperties:
                    type: string
            yearTotals:
              type: object
              required:
                - income
                - expense
                - balance
              properties:
                income:
                  type: string
                expense:
                  type: string
                balance:
                  type: string
        message:
          type: string

    DashboardHealthResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: object
          required:
            - status
            - services
            - timestamp
          properties:
            status:
              type: string
              enum: [healthy, degraded, unhealthy]
            services:
              type: object
              required:
                - database
                - endpoints
              properties:
                database:
                  type: string
                  enum: [healthy, unhealthy]
                endpoints:
                  type: array
                  items:
                    type: string
            timestamp:
              type: string
              format: date-time
        message:
          type: string

    RealtimeMetricsResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: object
          required:
            - income
            - expenses
            - net
            - transactions
            - accounts
          properties:
            income:
              type: string
            expenses:
              type: string
            net:
              type: string
            transactions:
              type: integer
            accounts:
              type: integer
            trends:
              type: object
              nullable: true
              required:
                - income
                - expenses
                - net
              properties:
                income:
                  type: number
                expenses:
                  type: number
                net:
                  type: number
            projections:
              type: object
              nullable: true
              required:
                - income
                - expenses
                - net
              properties:
                income:
                  type: string
                expenses:
                  type: string
                net:
                  type: string
        message:
          type: string

    MonthlyAnalyticsResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            type: object
            required:
              - month
              - income
              - expenses
              - net
              - transactions
              - categories
            properties:
              month:
                type: string
              income:
                type: string
              expenses:
                type: string
              net:
                type: string
              transactions:
                type: integer
              categories:
                type: array
                items:
                  type: object
                  required:
                    - name
                    - amount
                    - percentage
                  properties:
                    name:
                      type: string
                    amount:
                      type: string
                    percentage:
                      type: number
        message:
          type: string

    AccountInsightsResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            type: object
            required:
              - accountId
              - accountName
              - balance
              - currency
              - lastActivity
              - monthlyAverage
              - trend
            properties:
              accountId:
                type: string
              accountName:
                type: string
              balance:
                type: string
              currency:
                type: string
              lastActivity:
                type: string
                format: date-time
              monthlyAverage:
                type: string
              trend:
                type: string
                enum: [up, down, stable]
        message:
          type: string

    CategoriesResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            type: object
            required:
              - id
              - name
              - type
              - color
            properties:
              id:
                type: string
              name:
                type: string
              type:
                type: string
                enum: [income, expense, transfer]
              color:
                type: string
              icon:
                type: string
                nullable: true
        message:
          type: string

    SyncStatusResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: object
          required:
            - scheduler
            - stats
          properties:
            scheduler:
              type: object
              required:
                - isActive
                - nextSync
                - lastSync
              properties:
                isActive:
                  type: boolean
                nextSync:
                  type: string
                  format: date-time
                lastSync:
                  type: string
                  format: date-time
            stats:
              type: object
              required:
                - totalSyncs
                - successfulSyncs
                - failedSyncs
                - averageSyncTime
              properties:
                totalSyncs:
                  type: integer
                successfulSyncs:
                  type: integer
                failedSyncs:
                  type: integer
                averageSyncTime:
                  type: number
        message:
          type: string

    HealthStatusResponse:
      type: object
      required:
        - success
        - status
        - services
        - timestamp
      properties:
        success:
          type: boolean
        status:
          type: string
          enum: [healthy, unhealthy]
        services:
          type: object
          required:
            - database
            - gocardless
            - scheduler
          properties:
            database:
              type: string
              enum: [healthy, unhealthy]
            gocardless:
              type: string
              enum: [healthy, unhealthy, not_configured]
            scheduler:
              type: string
              enum: [active, inactive, error]
        timestamp:
          type: string
          format: date-time

    # Dashboard Data Schemas
    DashboardMetrics:
      type: object
      required:
        - currentMonth
        - trends
        - topExpenseCategories
        - accounts
        - recentTransactions
        - alerts
        - lastUpdated
      properties:
        currentMonth:
          type: object
          required:
            - income
            - expenses
            - balance
            - transactionCount
          properties:
            income:
              type: string
            expenses:
              type: string
            balance:
              type: string
            transactionCount:
              type: integer
        trends:
          type: object
          required:
            - incomeChange
            - expenseChange
            - balanceChange
          properties:
            incomeChange:
              type: number
            expenseChange:
              type: number
            balanceChange:
              type: number
        topExpenseCategories:
          type: array
          items:
            type: object
            required:
              - categoryName
              - amount
            properties:
              categoryName:
                type: string
              amount:
                type: string
        accounts:
          type: object
          required:
            - total
            - totalBalance
          properties:
            total:
              type: integer
            totalBalance:
              type: string
        recentTransactions:
          type: array
          items:
            type: object
            required:
              - id
              - counterpartyName
              - description
              - amount
              - date
            properties:
              id:
                type: string
              counterpartyName:
                type: string
              description:
                type: string
              amount:
                type: string
              date:
                type: string
                format: date
              categoryName:
                type: string
                nullable: true
        alerts:
          type: array
          items:
            type: object
            required:
              - id
              - type
              - severity
              - message
              - timestamp
            properties:
              id:
                type: string
              type:
                type: string
              severity:
                type: string
                enum: [info, warning, error]
              message:
                type: string
              timestamp:
                type: string
                format: date-time
        lastUpdated:
          type: string
          format: date-time

    RevenueMetrics:
      type: object
      required:
        - period
        - currentPeriod
        - previousPeriod
        - growth
        - trends
        - topClients
        - currency
        - generatedAt
      properties:
        period:
          type: object
          required:
            - type
            - current
            - previous
          properties:
            type:
              type: string
            current:
              type: object
              required:
                - start
                - end
              properties:
                start:
                  type: string
                  format: date
                end:
                  type: string
                  format: date
            previous:
              type: object
              required:
                - start
                - end
              properties:
                start:
                  type: string
                  format: date
                end:
                  type: string
                  format: date
        currentPeriod:
          $ref: '#/components/schemas/PeriodRevenue'
        previousPeriod:
          $ref: '#/components/schemas/PeriodRevenue'
        growth:
          type: object
          required:
            - revenueGrowth
            - invoiceGrowth
          properties:
            revenueGrowth:
              type: number
            invoiceGrowth:
              type: number
        trends:
          type: object
          required:
            - monthlyRevenue
          properties:
            monthlyRevenue:
              type: array
              items:
                type: object
                required:
                  - month
                  - revenue
                  - invoices
                properties:
                  month:
                    type: string
                  revenue:
                    type: string
                  invoices:
                    type: integer
        topClients:
          type: array
          items:
            type: object
            required:
              - id
              - name
              - businessName
              - totalRevenue
              - totalInvoices
              - avgInvoiceAmount
            properties:
              id:
                type: string
              name:
                type: string
              businessName:
                type: string
              totalRevenue:
                type: string
              totalInvoices:
                type: integer
              avgInvoiceAmount:
                type: string
        currency:
          type: string
        generatedAt:
          type: string
          format: date-time

    PeriodRevenue:
      type: object
      required:
        - totalRevenue
        - paidRevenue
        - pendingRevenue
        - overdueRevenue
        - totalInvoices
        - paidInvoices
        - averageInvoiceAmount
        - uniqueClients
      properties:
        totalRevenue:
          type: string
        paidRevenue:
          type: string
        pendingRevenue:
          type: string
        overdueRevenue:
          type: string
        totalInvoices:
          type: integer
        paidInvoices:
          type: integer
        averageInvoiceAmount:
          type: string
        uniqueClients:
          type: integer

    InvoiceStatistics:
      type: object
      required:
        - overview
        - paymentBehavior
        - trends
        - topOverdueInvoices
        - currency
        - generatedAt
      properties:
        overview:
          type: object
          required:
            - totalInvoices
            - draftInvoices
            - sentInvoices
            - viewedInvoices
            - paidInvoices
            - overdueInvoices
            - cancelledInvoices
            - totalAmount
            - paidAmount
            - pendingAmount
            - overdueAmount
            - averageInvoiceAmount
            - averagePaymentDays
          properties:
            totalInvoices:
              type: integer
            draftInvoices:
              type: integer
            sentInvoices:
              type: integer
            viewedInvoices:
              type: integer
            paidInvoices:
              type: integer
            overdueInvoices:
              type: integer
            cancelledInvoices:
              type: integer
            totalAmount:
              type: string
            paidAmount:
              type: string
            pendingAmount:
              type: string
            overdueAmount:
              type: string
            averageInvoiceAmount:
              type: string
            averagePaymentDays:
              type: string
        paymentBehavior:
          type: array
          items:
            type: object
            required:
              - category
              - count
              - amount
            properties:
              category:
                type: string
              count:
                type: integer
              amount:
                type: string
        agingAnalysis:
          type: array
          items:
            type: object
            required:
              - bucket
              - count
              - amount
            properties:
              bucket:
                type: string
              count:
                type: integer
              amount:
                type: string
          nullable: true
        trends:
          type: object
          required:
            - monthlyCreation
          properties:
            monthlyCreation:
              type: array
              items:
                type: object
                required:
                  - month
                  - invoicesCreated
                  - totalAmount
                properties:
                  month:
                    type: string
                  invoicesCreated:
                    type: integer
                  totalAmount:
                    type: string
        topOverdueInvoices:
          type: array
          items:
            type: object
            required:
              - id
              - invoiceNumber
              - clientName
              - total
              - dueDate
              - daysOverdue
            properties:
              id:
                type: string
              invoiceNumber:
                type: string
              clientName:
                type: string
              total:
                type: string
              dueDate:
                type: string
                format: date
              daysOverdue:
                type: integer
        currency:
          type: string
        generatedAt:
          type: string
          format: date-time

    ClientMetrics:
      type: object
      required:
        - summary
        - clients
        - riskDistribution
        - paymentBehavior
        - topRevenueClients
        - currency
        - generatedAt
      properties:
        summary:
          type: object
          required:
            - totalClients
            - activeClients
            - inactiveClients
            - suspendedClients
            - prospectClients
            - avgClientRevenue
            - avgOutstandingBalance
            - totalClientRevenue
            - totalOutstandingBalance
          properties:
            totalClients:
              type: integer
            activeClients:
              type: integer
            inactiveClients:
              type: integer
            suspendedClients:
              type: integer
            prospectClients:
              type: integer
            avgClientRevenue:
              type: string
            avgOutstandingBalance:
              type: string
            totalClientRevenue:
              type: string
            totalOutstandingBalance:
              type: string
        clients:
          type: array
          items:
            $ref: '#/components/schemas/ClientMetricsDetail'
        riskDistribution:
          type: array
          items:
            type: object
            required:
              - riskScore
              - count
              - totalRevenue
              - totalOutstanding
            properties:
              riskScore:
                type: string
              count:
                type: integer
              totalRevenue:
                type: string
              totalOutstanding:
                type: string
        paymentBehavior:
          type: array
          items:
            type: object
            required:
              - category
              - clientCount
              - avgRevenue
            properties:
              category:
                type: string
              clientCount:
                type: integer
              avgRevenue:
                type: string
        topRevenueClients:
          type: array
          items:
            type: object
            required:
              - id
              - name
              - businessName
              - totalRevenue
              - totalInvoices
              - status
              - revenuePercentage
            properties:
              id:
                type: string
              name:
                type: string
              businessName:
                type: string
              totalRevenue:
                type: string
              totalInvoices:
                type: integer
              status:
                type: string
              revenuePercentage:
                type: string
        currency:
          type: string
        generatedAt:
          type: string
          format: date-time

    ClientMetricsDetail:
      type: object
      required:
        - id
        - name
        - businessName
        - email
        - status
        - totalRevenue
        - totalInvoices
        - outstandingBalance
        - lastInvoiceDate
        - averageInvoiceAmount
        - paymentTerms
        - paidInvoices
        - pendingInvoices
        - overdueInvoices
        - averagePaymentDays
        - lastPaymentDate
        - riskScore
      properties:
        id:
          type: string
        name:
          type: string
        businessName:
          type: string
        email:
          type: string
        status:
          type: string
        totalRevenue:
          type: string
        totalInvoices:
          type: integer
        outstandingBalance:
          type: string
        lastInvoiceDate:
          type: string
          format: date
        averageInvoiceAmount:
          type: string
        paymentTerms:
          type: integer
        paidInvoices:
          type: integer
        pendingInvoices:
          type: integer
        overdueInvoices:
          type: integer
        averagePaymentDays:
          type: string
        lastPaymentDate:
          type: string
          format: date
        riskScore:
          type: string

    CashFlowProjections:
      type: object
      required:
        - currentPosition
        - projectionPeriod
        - weeklyProjections
        - outstandingInvoices
        - riskAnalysis
        - currency
        - generatedAt
      properties:
        currentPosition:
          type: object
          required:
            - currentCashBalance
            - totalOutstanding
            - expectedCollections
            - collectionRate
          properties:
            currentCashBalance:
              type: string
            totalOutstanding:
              type: string
            expectedCollections:
              type: string
            collectionRate:
              type: string
        projectionPeriod:
          type: object
          required:
            - daysAhead
            - startDate
            - endDate
          properties:
            daysAhead:
              type: integer
            startDate:
              type: string
              format: date
            endDate:
              type: string
              format: date
        weeklyProjections:
          type: array
          items:
            type: object
            required:
              - weekStart
              - weekEnd
              - expectedReceipts
              - projectedBalance
              - invoicesCount
            properties:
              weekStart:
                type: string
                format: date
              weekEnd:
                type: string
                format: date
              expectedReceipts:
                type: string
              projectedBalance:
                type: string
              invoicesCount:
                type: integer
        outstandingInvoices:
          type: array
          items:
            type: object
            required:
              - id
              - invoiceNumber
              - clientName
              - total
              - dueDate
              - status
              - estimatedPaymentDate
              - paymentProbability
              - riskScore
            properties:
              id:
                type: string
              invoiceNumber:
                type: string
              clientName:
                type: string
              total:
                type: string
              dueDate:
                type: string
                format: date
              status:
                type: string
              estimatedPaymentDate:
                type: string
                format: date
              paymentProbability:
                type: string
              riskScore:
                type: string
        riskAnalysis:
          type: object
          required:
            - highRisk
            - mediumRisk
            - lowRisk
          properties:
            highRisk:
              $ref: '#/components/schemas/RiskCategory'
            mediumRisk:
              $ref: '#/components/schemas/RiskCategory'
            lowRisk:
              $ref: '#/components/schemas/RiskCategory'
        recentTransactions:
          type: array
          items:
            type: object
            required:
              - amount
              - date
              - description
              - counterpartyName
              - type
            properties:
              amount:
                type: string
              date:
                type: string
                format: date
              description:
                type: string
              counterpartyName:
                type: string
              type:
                type: string
        currency:
          type: string
        generatedAt:
          type: string
          format: date-time

    RiskCategory:
      type: object
      required:
        - count
        - amount
      properties:
        count:
          type: integer
        amount:
          type: string

    FinancialReportResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/FinancialReport'