openapi: 3.0.3
info:
  title: AI Service Trading API
  description: Trading operations, strategies, and market data endpoints
  version: 1.0.0
  contact:
    name: AI Service Trading Team
    email: trading@ai-service.local

servers:
  - url: http://localhost:3001/api
    description: Local development server
  - url: https://api.ai-service.com/api
    description: Production server

security:
  - bearerAuth: []

tags:
  - name: Strategies
    description: Trading strategy management
  - name: Trading
    description: Trade execution and positions
  - name: Market Data
    description: Real-time market information
  - name: Arbitrage
    description: Arbitrage bot operations
  - name: Backtesting
    description: Strategy backtesting

paths:
  /trading/strategies:
    get:
      tags:
        - Strategies
      summary: List trading strategies
      operationId: listStrategies
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - in: query
          name: active
          schema:
            type: boolean
          description: Filter by active status
      responses:
        '200':
          description: Strategies retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StrategyListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Strategies
      summary: Create trading strategy
      operationId: createStrategy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStrategyRequest'
      responses:
        '201':
          description: Strategy created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StrategyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /trading/strategies/{strategyId}:
    get:
      tags:
        - Strategies
      summary: Get strategy details
      operationId: getStrategy
      parameters:
        - $ref: '#/components/parameters/StrategyIdParam'
      responses:
        '200':
          description: Strategy retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StrategyResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Strategies
      summary: Update strategy
      operationId: updateStrategy
      parameters:
        - $ref: '#/components/parameters/StrategyIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStrategyRequest'
      responses:
        '200':
          description: Strategy updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StrategyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Strategies
      summary: Delete strategy
      operationId: deleteStrategy
      parameters:
        - $ref: '#/components/parameters/StrategyIdParam'
      responses:
        '200':
          description: Strategy deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /trading/strategies/{strategyId}/activate:
    post:
      tags:
        - Strategies
      summary: Activate strategy
      operationId: activateStrategy
      parameters:
        - $ref: '#/components/parameters/StrategyIdParam'
      responses:
        '200':
          description: Strategy activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StrategyResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /trading/strategies/{strategyId}/deactivate:
    post:
      tags:
        - Strategies
      summary: Deactivate strategy
      operationId: deactivateStrategy
      parameters:
        - $ref: '#/components/parameters/StrategyIdParam'
      responses:
        '200':
          description: Strategy deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StrategyResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /trading/positions:
    get:
      tags:
        - Trading
      summary: Get active positions
      operationId: getPositions
      parameters:
        - in: query
          name: exchange
          schema:
            type: string
            enum: [binance, coinbase, alpaca]
          description: Filter by exchange
      responses:
        '200':
          description: Positions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /trading/execute:
    post:
      tags:
        - Trading
      summary: Execute trade
      operationId: executeTrade
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteTradeRequest'
      responses:
        '200':
          description: Trade executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /trading/balance:
    get:
      tags:
        - Trading
      summary: Get account balance
      operationId: getBalance
      parameters:
        - in: query
          name: exchange
          schema:
            type: string
            enum: [binance, coinbase, alpaca]
          description: Exchange to get balance from
      responses:
        '200':
          description: Balance retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /trading/market-data:
    get:
      tags:
        - Market Data
      summary: Get market data
      operationId: getMarketData
      parameters:
        - in: query
          name: symbol
          required: true
          schema:
            type: string
          description: Trading symbol (e.g., BTC/USDT)
        - in: query
          name: exchange
          schema:
            type: string
            enum: [binance, coinbase, alpaca]
      responses:
        '200':
          description: Market data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketDataResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /arbitrage/deploy:
    post:
      tags:
        - Arbitrage
      summary: Deploy arbitrage bot
      operationId: deployArbitrage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployArbitrageRequest'
      responses:
        '200':
          description: Arbitrage bot deployed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArbitrageStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /arbitrage/status:
    get:
      tags:
        - Arbitrage
      summary: Get arbitrage bot status
      operationId: getArbitrageStatus
      responses:
        '200':
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArbitrageStatusResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /arbitrage/stop:
    post:
      tags:
        - Arbitrage
      summary: Stop arbitrage bot
      operationId: stopArbitrage
      responses:
        '200':
          description: Arbitrage bot stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /trading/backtest:
    post:
      tags:
        - Backtesting
      summary: Run strategy backtest
      operationId: runBacktest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BacktestRequest'
      responses:
        '200':
          description: Backtest completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PageParam:
      in: query
      name: page
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number
    
    LimitParam:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Items per page
    
    StrategyIdParam:
      in: path
      name: strategyId
      required: true
      schema:
        type: string
      description: Strategy identifier

  schemas:
    TradingStrategy:
      type: object
      required:
        - id
        - name
        - type
        - isActive
        - createdAt
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [scalping, swing, arbitrage, dca, grid]
        parameters:
          type: object
          additionalProperties: true
        isActive:
          type: boolean
        performance:
          $ref: '#/components/schemas/StrategyPerformance'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    StrategyPerformance:
      type: object
      properties:
        totalTrades:
          type: integer
        winRate:
          type: number
        profitLoss:
          type: number
        sharpeRatio:
          type: number

    CreateStrategyRequest:
      type: object
      required:
        - name
        - type
        - parameters
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [scalping, swing, arbitrage, dca, grid]
        parameters:
          type: object
          additionalProperties: true

    UpdateStrategyRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        parameters:
          type: object
          additionalProperties: true

    Position:
      type: object
      required:
        - id
        - symbol
        - side
        - quantity
        - entryPrice
      properties:
        id:
          type: string
        symbol:
          type: string
        side:
          type: string
          enum: [long, short]
        quantity:
          type: number
        entryPrice:
          type: number
        currentPrice:
          type: number
        unrealizedPnl:
          type: number
        exchange:
          type: string

    ExecuteTradeRequest:
      type: object
      required:
        - symbol
        - side
        - quantity
        - type
      properties:
        symbol:
          type: string
        side:
          type: string
          enum: [buy, sell]
        quantity:
          type: number
        type:
          type: string
          enum: [market, limit]
        price:
          type: number
          description: Required for limit orders
        exchange:
          type: string
          enum: [binance, coinbase, alpaca]

    Trade:
      type: object
      required:
        - id
        - symbol
        - side
        - quantity
        - price
        - timestamp
      properties:
        id:
          type: string
        symbol:
          type: string
        side:
          type: string
          enum: [buy, sell]
        quantity:
          type: number
        price:
          type: number
        fee:
          type: number
        exchange:
          type: string
        timestamp:
          type: string
          format: date-time

    MarketData:
      type: object
      properties:
        symbol:
          type: string
        bid:
          type: number
        ask:
          type: number
        last:
          type: number
        volume24h:
          type: number
        change24h:
          type: number
        timestamp:
          type: string
          format: date-time

    Balance:
      type: object
      properties:
        currency:
          type: string
        available:
          type: number
        locked:
          type: number
        total:
          type: number

    DeployArbitrageRequest:
      type: object
      properties:
        minSpread:
          type: number
          default: 0.005
        maxPositionSize:
          type: number
          default: 1000
        exchanges:
          type: array
          items:
            type: string
            enum: [binance, coinbase]

    ArbitrageStatus:
      type: object
      properties:
        isRunning:
          type: boolean
        startedAt:
          type: string
          format: date-time
        totalTrades:
          type: integer
        totalProfit:
          type: number
        currentOpportunities:
          type: array
          items:
            $ref: '#/components/schemas/ArbitrageOpportunity'

    ArbitrageOpportunity:
      type: object
      properties:
        symbol:
          type: string
        buyExchange:
          type: string
        sellExchange:
          type: string
        spread:
          type: number
        estimatedProfit:
          type: number

    BacktestRequest:
      type: object
      required:
        - strategyId
        - startDate
        - endDate
      properties:
        strategyId:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        initialCapital:
          type: number
          default: 10000

    BacktestResult:
      type: object
      properties:
        totalReturn:
          type: number
        sharpeRatio:
          type: number
        maxDrawdown:
          type: number
        winRate:
          type: number
        totalTrades:
          type: integer
        trades:
          type: array
          items:
            $ref: '#/components/schemas/Trade'

    # Response schemas
    StrategyResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/TradingStrategy'

    StrategyListResponse:
      type: object
      required:
        - success
        - data
        - pagination
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/TradingStrategy'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    PositionListResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/Position'

    TradeResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/Trade'

    BalanceResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/Balance'

    MarketDataResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/MarketData'

    ArbitrageStatusResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/ArbitrageStatus'

    BacktestResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/BacktestResult'

    MessageResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
        message:
          type: string

    PaginationMeta:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          default: false
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
              additionalProperties: true

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'