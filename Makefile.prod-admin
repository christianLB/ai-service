# Makefile.prod-admin - Production Admin & Security Management
# =============================================================================
# Commands for managing admin users, passwords, and security in production
# =============================================================================

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
MAGENTA := \033[0;35m
CYAN := \033[0;36m
NC := \033[0m

# Production configuration
PROD_HOST ?= 192.168.1.11
PROD_USER ?= k2600x
PROD_PATH ?= /volume1/docker/ai-service
PROD_DB_CONTAINER := ai-postgres
PROD_DB_USER := ai_user
PROD_DB_NAME := ai_service
PROD_API_CONTAINER := ai-service-api

# SSH and SCP commands
SSH := ssh
SCP := scp

# =============================================================================
# 👤 USER MANAGEMENT
# =============================================================================

.PHONY: prod-create-admin-simple
prod-create-admin-simple: ## Create admin user (simple version with temp password)
	@./scripts/prod-create-admin.sh

.PHONY: prod-create-admin
prod-create-admin: ## Create admin user in production database
	@echo "$(BLUE)👤 Creating admin user in production...$(NC)"
	@read -p "Enter email for admin user [admin@ai-service.local]: " ADMIN_EMAIL; \
	ADMIN_EMAIL=$${ADMIN_EMAIL:-admin@ai-service.local}; \
	read -s -p "Enter password (min 12 chars): " ADMIN_PASS; echo; \
	if [ -z "$$ADMIN_PASS" ]; then \
		echo "$(YELLOW)⚡ Generating secure password...$(NC)"; \
		ADMIN_PASS=$$(openssl rand -base64 16); \
		echo "$(GREEN)Generated password: $$ADMIN_PASS$(NC)"; \
		echo "$(RED)⚠️  SAVE THIS PASSWORD - IT WILL NOT BE SHOWN AGAIN$(NC)"; \
	fi; \
	if [ $${#ADMIN_PASS} -lt 12 ]; then \
		echo "$(RED)❌ Password must be at least 12 characters$(NC)"; \
		exit 1; \
	fi; \
	read -p "Enter full name [System Administrator]: " ADMIN_NAME; \
	ADMIN_NAME=$${ADMIN_NAME:-System Administrator}; \
	echo "$(YELLOW)🔐 Hashing password...$(NC)"; \
	HASH=$$($(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_API_CONTAINER) node -e \"const bcrypt = require('bcrypt'); bcrypt.hash('$$ADMIN_PASS', 10).then(hash => console.log(hash));\""); \
	if [ -z "$$HASH" ]; then \
		echo "$(RED)❌ Failed to hash password$(NC)"; \
		exit 1; \
	fi; \
	echo "$(YELLOW)📝 Creating user in database...$(NC)"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_DB_CONTAINER) psql -U $(PROD_DB_USER) -d $(PROD_DB_NAME) -c \"INSERT INTO users (email, password_hash, full_name, role, is_active) VALUES ('$$ADMIN_EMAIL', '$$HASH', '$$ADMIN_NAME', 'admin', true) ON CONFLICT (email) DO UPDATE SET password_hash='$$HASH', full_name='$$ADMIN_NAME', role='admin', updated_at=now() RETURNING email, full_name, role;\"" || exit 1; \
	echo "$(GREEN)✅ Admin user created/updated successfully$(NC)"; \
	echo "$(CYAN)📧 Email: $$ADMIN_EMAIL$(NC)"; \
	echo "$(CYAN)👤 Name: $$ADMIN_NAME$(NC)"; \
	echo "$(YELLOW)⚠️  Please save the password securely!$(NC)"

.PHONY: prod-reset-password
prod-reset-password: ## Reset user password in production
	@echo "$(BLUE)🔑 Resetting user password in production...$(NC)"
	@read -p "Enter user email to reset: " USER_EMAIL; \
	if [ -z "$$USER_EMAIL" ]; then \
		echo "$(RED)❌ Email is required$(NC)"; \
		exit 1; \
	fi; \
	echo "$(YELLOW)🔍 Checking if user exists...$(NC)"; \
	USER_EXISTS=$$($(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_DB_CONTAINER) psql -U $(PROD_DB_USER) -d $(PROD_DB_NAME) -t -c \"SELECT COUNT(*) FROM users WHERE email='$$USER_EMAIL';\"" | tr -d ' '); \
	if [ "$$USER_EXISTS" = "0" ]; then \
		echo "$(RED)❌ User not found: $$USER_EMAIL$(NC)"; \
		exit 1; \
	fi; \
	read -s -p "Enter new password (min 12 chars): " NEW_PASS; echo; \
	if [ -z "$$NEW_PASS" ]; then \
		echo "$(YELLOW)⚡ Generating secure password...$(NC)"; \
		NEW_PASS=$$(openssl rand -base64 16); \
		echo "$(GREEN)Generated password: $$NEW_PASS$(NC)"; \
		echo "$(RED)⚠️  SAVE THIS PASSWORD - IT WILL NOT BE SHOWN AGAIN$(NC)"; \
	fi; \
	if [ $${#NEW_PASS} -lt 12 ]; then \
		echo "$(RED)❌ Password must be at least 12 characters$(NC)"; \
		exit 1; \
	fi; \
	read -s -p "Confirm new password: " NEW_PASS_CONFIRM; echo; \
	if [ "$$NEW_PASS" != "$$NEW_PASS_CONFIRM" ] && [ -n "$$NEW_PASS_CONFIRM" ]; then \
		echo "$(RED)❌ Passwords don't match$(NC)"; \
		exit 1; \
	fi; \
	echo "$(YELLOW)🔐 Hashing password...$(NC)"; \
	HASH=$$($(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_API_CONTAINER) node -e \"const bcrypt = require('bcrypt'); bcrypt.hash('$$NEW_PASS', 10).then(hash => console.log(hash));\""); \
	if [ -z "$$HASH" ]; then \
		echo "$(RED)❌ Failed to hash password$(NC)"; \
		exit 1; \
	fi; \
	echo "$(YELLOW)📝 Updating password in database...$(NC)"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_DB_CONTAINER) psql -U $(PROD_DB_USER) -d $(PROD_DB_NAME) -c \"UPDATE users SET password_hash='$$HASH', updated_at=now() WHERE email='$$USER_EMAIL' RETURNING email, full_name;\"" || exit 1; \
	echo "$(GREEN)✅ Password reset successfully$(NC)"; \
	echo "$(CYAN)📧 User: $$USER_EMAIL$(NC)"

.PHONY: prod-list-users
prod-list-users: ## List all users in production
	@echo "$(BLUE)👥 Listing all users in production...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_DB_CONTAINER) psql -U $(PROD_DB_USER) -d $(PROD_DB_NAME) -c \"SELECT email, full_name, role, is_active, last_login, created_at FROM users ORDER BY created_at DESC;\""

# =============================================================================
# 🔐 DATABASE PASSWORD MANAGEMENT
# =============================================================================

.PHONY: prod-change-db-password
prod-change-db-password: ## Change PostgreSQL password in production
	@echo "$(RED)⚠️  WARNING: This will change the database password$(NC)"
	@echo "$(YELLOW)This requires restarting all services$(NC)"
	@read -p "Continue? (yes/no): " CONFIRM; \
	if [ "$$CONFIRM" != "yes" ]; then \
		echo "$(YELLOW)Cancelled$(NC)"; \
		exit 0; \
	fi; \
	echo "$(BLUE)🔐 Changing database password...$(NC)"; \
	read -s -p "Enter new database password (min 16 chars): " NEW_DB_PASS; echo; \
	if [ $${#NEW_DB_PASS} -lt 16 ]; then \
		echo "$(RED)❌ Database password must be at least 16 characters$(NC)"; \
		exit 1; \
	fi; \
	read -s -p "Confirm new password: " NEW_DB_PASS_CONFIRM; echo; \
	if [ "$$NEW_DB_PASS" != "$$NEW_DB_PASS_CONFIRM" ]; then \
		echo "$(RED)❌ Passwords don't match$(NC)"; \
		exit 1; \
	fi; \
	echo "$(YELLOW)📋 Creating backup of current .env...$(NC)"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "cp $(PROD_PATH)/.env.production $(PROD_PATH)/.env.production.backup-$$(date +%Y%m%d-%H%M%S)" || true; \
	echo "$(YELLOW)🔄 Updating PostgreSQL password...$(NC)"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_DB_CONTAINER) psql -U $(PROD_DB_USER) -d $(PROD_DB_NAME) -c \"ALTER USER $(PROD_DB_USER) PASSWORD '$$NEW_DB_PASS';\"" || exit 1; \
	echo "$(YELLOW)📝 Updating .env.production...$(NC)"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "sed -i.bak 's/^POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=$$NEW_DB_PASS/' $(PROD_PATH)/.env.production" || exit 1; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "sed -i 's|^DATABASE_URL=.*|DATABASE_URL=postgresql://$(PROD_DB_USER):$$NEW_DB_PASS@ai-postgres:5432/$(PROD_DB_NAME)|' $(PROD_PATH)/.env.production" || exit 1; \
	echo "$(YELLOW)🔄 Restarting services...$(NC)"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "cd $(PROD_PATH) && sudo /usr/local/bin/docker-compose -f docker-compose.production.yml down" || exit 1; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "cd $(PROD_PATH) && sudo /usr/local/bin/docker-compose -f docker-compose.production.yml up -d" || exit 1; \
	sleep 10; \
	echo "$(YELLOW)✅ Verifying connectivity...$(NC)"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_API_CONTAINER) wget -qO- http://localhost:3000/health" > /dev/null && \
	echo "$(GREEN)✅ Database password changed successfully$(NC)" || \
	echo "$(RED)❌ Service health check failed - please check logs$(NC)"

# =============================================================================
# 🔐 AUTHENTICATION
# =============================================================================

.PHONY: prod-login
prod-login: ## Login to production and get auth token
	@echo "$(BLUE)🔐 Logging in to production API...$(NC)"
	@read -p "Email [admin@ai-service.local]: " EMAIL; \
	EMAIL=$${EMAIL:-admin@ai-service.local}; \
	read -s -p "Password [admin123]: " PASS; echo; \
	PASS=$${PASS:-admin123}; \
	echo "$(YELLOW)Authenticating...$(NC)"; \
	RESPONSE=$$(curl -s -X POST http://$(PROD_HOST):3001/api/auth/login \
		-H "Content-Type: application/json" \
		-d "{\"email\":\"$$EMAIL\",\"password\":\"$$PASS\"}"); \
	if echo "$$RESPONSE" | grep -q "accessToken"; then \
		TOKEN=$$(echo "$$RESPONSE" | sed -n 's/.*"accessToken":"\([^"]*\)".*/\1/p'); \
		echo "$(GREEN)✅ Login successful$(NC)"; \
		echo "$(CYAN)Access Token:$(NC)"; \
		echo "$$TOKEN"; \
		echo ""; \
		echo "$(YELLOW)Use with:$(NC)"; \
		echo "curl -H \"Authorization: Bearer $$TOKEN\" http://$(PROD_HOST):3001/api/..."; \
	else \
		echo "$(RED)❌ Login failed$(NC)"; \
		echo "$$RESPONSE"; \
		exit 1; \
	fi

.PHONY: prod-token
prod-token: ## Get production auth token quickly (uses default admin credentials)
	@RESPONSE=$$(curl -s -X POST http://$(PROD_HOST):3001/api/auth/login \
		-H "Content-Type: application/json" \
		-d '{"email":"admin@ai-service.local","password":"admin123"}'); \
	if echo "$$RESPONSE" | grep -q "accessToken"; then \
		echo "$$RESPONSE" | sed -n 's/.*"accessToken":"\([^"]*\)".*/\1/p'; \
	else \
		echo "Error: Login failed. Check credentials." >&2; \
		exit 1; \
	fi

# =============================================================================
# 🔑 API KEY MANAGEMENT
# =============================================================================

.PHONY: prod-set-api-keys
prod-set-api-keys: ## Set API keys through Integration Service
	@echo "$(BLUE)🔑 Setting API keys in production...$(NC)"
	@echo "$(YELLOW)⚠️  Keys will be encrypted in database$(NC)"
	@echo "$(CYAN)Select which API key to set:$(NC)"
	@echo "  1) OpenAI API Key"
	@echo "  2) Claude API Key"
	@echo "  3) GoCardless Access Token"
	@echo "  4) All keys"
	@read -p "Enter choice (1-4): " CHOICE; \
	case $$CHOICE in \
		1|4) \
			read -s -p "Enter OpenAI API Key: " OPENAI_KEY; echo; \
			if [ -n "$$OPENAI_KEY" ]; then \
				echo "$(YELLOW)Setting OpenAI key...$(NC)"; \
				$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_API_CONTAINER) node -e \"const axios = require('axios'); axios.post('http://localhost:3000/api/integrations/configs', {type: 'openai', key: 'api_key', value: '$$OPENAI_KEY', metadata: {provider: 'openai'}}, {headers: {'Content-Type': 'application/json'}}).then(() => console.log('✅ OpenAI key set')).catch(err => console.error('❌ Failed:', err.message));\"" || true; \
			fi; \
			;& \
		2|4) \
			read -s -p "Enter Claude API Key: " CLAUDE_KEY; echo; \
			if [ -n "$$CLAUDE_KEY" ]; then \
				echo "$(YELLOW)Setting Claude key...$(NC)"; \
				$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_API_CONTAINER) node -e \"const axios = require('axios'); axios.post('http://localhost:3000/api/integrations/configs', {type: 'claude', key: 'api_key', value: '$$CLAUDE_KEY', metadata: {provider: 'anthropic'}}, {headers: {'Content-Type': 'application/json'}}).then(() => console.log('✅ Claude key set')).catch(err => console.error('❌ Failed:', err.message));\"" || true; \
			fi; \
			;& \
		3|4) \
			read -s -p "Enter GoCardless Access Token: " GOCARDLESS_TOKEN; echo; \
			if [ -n "$$GOCARDLESS_TOKEN" ]; then \
				echo "$(YELLOW)Setting GoCardless token...$(NC)"; \
				$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_API_CONTAINER) node -e \"const axios = require('axios'); axios.post('http://localhost:3000/api/integrations/configs', {type: 'gocardless', key: 'access_token', value: '$$GOCARDLESS_TOKEN', metadata: {environment: 'live'}}, {headers: {'Content-Type': 'application/json'}}).then(() => console.log('✅ GoCardless token set')).catch(err => console.error('❌ Failed:', err.message));\"" || true; \
			fi; \
			;; \
		*) \
			echo "$(RED)Invalid choice$(NC)"; \
			exit 1; \
			;; \
	esac; \
	echo "$(GREEN)✅ API keys configuration complete$(NC)"

# =============================================================================
# 💾 BACKUP & RESTORE
# =============================================================================

.PHONY: prod-backup-full
prod-backup-full: ## Complete backup of database and configuration
	@echo "$(BLUE)💾 Creating full production backup...$(NC)"
	@BACKUP_NAME="backup-$$(date +%Y%m%d-%H%M%S)"; \
	BACKUP_DIR="$(PROD_PATH)/backups/$$BACKUP_NAME"; \
	echo "$(YELLOW)📁 Creating backup directory: $$BACKUP_DIR$(NC)"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "mkdir -p $$BACKUP_DIR" || exit 1; \
	echo "$(YELLOW)🗄️ Backing up database...$(NC)"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_DB_CONTAINER) pg_dump -U $(PROD_DB_USER) -d $(PROD_DB_NAME) --no-owner --no-acl | gzip > $$BACKUP_DIR/database.sql.gz" || exit 1; \
	echo "$(YELLOW)📋 Backing up configuration files...$(NC)"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "cp $(PROD_PATH)/.env.production $$BACKUP_DIR/ 2>/dev/null || true" || true; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "cp $(PROD_PATH)/docker-compose.production.yml $$BACKUP_DIR/" || true; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "cp -r $(PROD_PATH)/nginx $$BACKUP_DIR/ 2>/dev/null || true" || true; \
	echo "$(YELLOW)📦 Creating archive...$(NC)"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "cd $(PROD_PATH)/backups && tar -czf $$BACKUP_NAME.tar.gz $$BACKUP_NAME/" || exit 1; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "rm -rf $$BACKUP_DIR" || true; \
	SIZE=$$($(SSH) $(PROD_USER)@$(PROD_HOST) "du -h $(PROD_PATH)/backups/$$BACKUP_NAME.tar.gz | cut -f1"); \
	echo "$(GREEN)✅ Backup created successfully$(NC)"; \
	echo "$(CYAN)📦 File: $(PROD_PATH)/backups/$$BACKUP_NAME.tar.gz$(NC)"; \
	echo "$(CYAN)📏 Size: $$SIZE$(NC)"

.PHONY: prod-list-backups
prod-list-backups: ## List available backups
	@echo "$(BLUE)📋 Available backups:$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "ls -lh $(PROD_PATH)/backups/*.tar.gz 2>/dev/null || echo 'No backups found'"

# =============================================================================
# 🏥 HEALTH & MONITORING
# =============================================================================

.PHONY: prod-health-check
prod-health-check: ## Comprehensive health check of all services
	@echo "$(BLUE)🏥 Running comprehensive health check...$(NC)"
	@echo "$(YELLOW)🐳 Container Status:$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "cd $(PROD_PATH) && sudo /usr/local/bin/docker-compose -f docker-compose.production.yml ps"
	@echo ""
	@echo "$(YELLOW)💾 Database Status:$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_DB_CONTAINER) psql -U $(PROD_DB_USER) -d $(PROD_DB_NAME) -c 'SELECT current_database(), version();'" 2>/dev/null || echo "$(RED)Database connection failed$(NC)"
	@echo ""
	@echo "$(YELLOW)🌐 API Health:$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "curl -s http://localhost:3001/health | python3 -m json.tool" 2>/dev/null || echo "$(RED)API health check failed$(NC)"
	@echo ""
	@echo "$(YELLOW)🖥️ Frontend Status:$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "curl -sI http://localhost:3030 | head -1" 2>/dev/null || echo "$(RED)Frontend not responding$(NC)"
	@echo ""
	@echo "$(YELLOW)💻 System Resources:$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "free -h && df -h $(PROD_PATH)"
	@echo ""
	@echo "$(YELLOW)📊 Container Resources:$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker stats --no-stream"

.PHONY: prod-logs-tail
prod-logs-tail: ## Tail logs from all containers
	@echo "$(BLUE)📋 Tailing production logs...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "cd $(PROD_PATH) && sudo /usr/local/bin/docker-compose -f docker-compose.production.yml logs -f --tail=50"

# =============================================================================
# 🛠️ MAINTENANCE
# =============================================================================

.PHONY: prod-optimize-db
prod-optimize-db: ## Run VACUUM and ANALYZE on database
	@echo "$(BLUE)🛠️ Optimizing database...$(NC)"
	@echo "$(YELLOW)Running VACUUM ANALYZE...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_DB_CONTAINER) psql -U $(PROD_DB_USER) -d $(PROD_DB_NAME) -c 'VACUUM ANALYZE;'" || exit 1
	@echo "$(GREEN)✅ Database optimization complete$(NC)"

.PHONY: prod-clean-logs
prod-clean-logs: ## Clean old logs and temporary files
	@echo "$(BLUE)🧹 Cleaning old logs...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "find $(PROD_PATH)/logs -type f -name '*.log' -mtime +30 -delete 2>/dev/null || true"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "sudo /usr/local/bin/docker exec $(PROD_API_CONTAINER) sh -c 'find /app/logs -type f -name '*.log' -mtime +30 -delete 2>/dev/null || true'"
	@echo "$(GREEN)✅ Logs cleaned$(NC)"

# =============================================================================
# 📚 HELP
# =============================================================================

.PHONY: help
help: ## Show this help message
	@echo "$(CYAN)Production Admin & Security Management Commands:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-24s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Usage:$(NC) make -f Makefile.prod-admin [command]"
	@echo "$(YELLOW)Example:$(NC) make -f Makefile.prod-admin prod-create-admin"