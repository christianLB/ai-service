services:
  # Layer 1: Infrastructure (Start First)
  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ai_service
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_DB:-ai_service}"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

  redis:
    image: redis:7-alpine
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    volumes:
      - redis_data:/data
      - ../redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 3s
      retries: 20
      start_period: 5s
    restart: unless-stopped

  # Layer 2: Core Services (DB-dependent)
  financial-svc:
    build:
      context: ../..
      dockerfile: apps/financial-svc/Dockerfile
    env_file: ../../.env
    environment:
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@db:5432/ai_service
      REDIS_URL: redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3001/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 30s

  trading-svc:
    build:
      context: ../..
      dockerfile: apps/trading-svc/Dockerfile
    env_file: ../../.env
    environment:
      PORT: 3002
      DATABASE_URL: postgresql://postgres:postgres@db:5432/ai_service
      REDIS_URL: redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3002/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 30s

  # Layer 3: Independent Services (Redis-only)
  ai-core:
    build:
      context: ../..
      dockerfile: apps/ai-core/Dockerfile
    env_file: ../../.env
    environment:
      PORT: 3004
      REDIS_URL: redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3004/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 5s
      timeout: 3s
      retries: 15
      start_period: 20s

  comm-svc:
    build:
      context: ../..
      dockerfile: apps/comm-svc/Dockerfile
    env_file: ../../.env
    environment:
      PORT: 3003
      REDIS_URL: redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3003/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 5s
      timeout: 3s
      retries: 15
      start_period: 20s

  # Layer 4: Gateway & Workers (Service-dependent)
  api-gateway:
    build:
      context: ../..
      dockerfile: apps/api-gateway/Dockerfile
    env_file: ../../.env
    environment:
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@db:5432/ai_service
      REDIS_URL: redis://redis:6379
      FINANCIAL_SVC_URL: http://financial-svc:3001
    ports:
      - "3005:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      financial-svc:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3000/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 5s
      timeout: 5s
      retries: 15
      start_period: 45s

  worker-financial:
    build:
      context: ../..
      dockerfile: apps/worker-financial/Dockerfile
    env_file: ../../.env
    environment:
      PORT: 3101
      REDIS_URL: redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
      financial-svc:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3101/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 5s
      timeout: 3s
      retries: 15
      start_period: 45s

  worker-trading:
    build:
      context: ../..
      dockerfile: apps/worker-trading/Dockerfile
    env_file: ../../.env
    environment:
      PORT: 3102
      REDIS_URL: redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
      trading-svc:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3102/health/ready').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 5s
      timeout: 3s
      retries: 15
      start_period: 45s

  # Bull Board Dashboard for Queue Monitoring
  bull-board:
    build:
      context: ../..
      dockerfile: apps/bull-board/Dockerfile
    env_file: ../../.env
    environment:
      PORT: 3200
      REDIS_URL: redis://redis:6379
      BULL_BOARD_USERNAME: ${BULL_BOARD_USERNAME:-admin}
      BULL_BOARD_PASSWORD: ${BULL_BOARD_PASSWORD:-admin123}
    ports:
      - "3200:3200"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test:
        - CMD-SHELL
        - node -e "fetch('http://localhost:3200/health').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 15s
    restart: unless-stopped

volumes:
  redis_data:
    driver: local