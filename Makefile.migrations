# Makefile.migrations - Sistema de migraciones con node-pg-migrate
# Gestión automatizada de schemas para desarrollo y producción

include .make.env

# Export variables for SSH authentication
export SSHPASS
export SUDO_PASS

# Variables
NAS_HOST ?= 192.168.1.11
NAS_USER ?= k2600x
NAS_PATH := /volume1/docker/ai-service

# Database URLs
DEV_DATABASE_URL := postgres://ai_user:ultra_secure_password_2025@localhost:5434/ai_service
PROD_DATABASE_URL := postgres://ai_user:$(DB_PASSWORD)@$(NAS_HOST):5433/ai_service

# SSH commands
ifdef SSHPASS
    SSH := sshpass -e ssh
else
    SSH := ssh
endif

# Colores
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
RED := \033[0;31m
MAGENTA := \033[0;35m
NC := \033[0m

# =============================================================================
# 🔄 COMANDOS DE MIGRACIÓN - DESARROLLO
# =============================================================================

.PHONY: migrate-create
migrate-create: ## Crear nueva migración (uso: make migrate-create NAME="descripcion")
	@if [ -z "$(NAME)" ]; then \
		echo "$(RED)Error: Especifica NAME=\"descripcion de la migración\"$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)📝 Creando migración: $(NAME)$(NC)"
	@npm run migrate:create -- "$(NAME)"
	@echo "$(GREEN)✓ Migración creada$(NC)"

.PHONY: migrate-up
migrate-up: ## Aplicar migraciones pendientes en desarrollo
	@echo "$(BLUE)⬆️  Aplicando migraciones en desarrollo...$(NC)"
	@DATABASE_URL=$(DEV_DATABASE_URL) npx node-pg-migrate up
	@echo "$(GREEN)✓ Migraciones aplicadas$(NC)"

.PHONY: migrate-down
migrate-down: ## Revertir última migración en desarrollo
	@echo "$(YELLOW)⬇️  Revirtiendo última migración...$(NC)"
	@DATABASE_URL=$(DEV_DATABASE_URL) npx node-pg-migrate down
	@echo "$(GREEN)✓ Migración revertida$(NC)"

.PHONY: migrate-status
migrate-status: ## Ver estado de migraciones en desarrollo
	@echo "$(BLUE)📊 Estado de migraciones (desarrollo):$(NC)"
	@DATABASE_URL=$(DEV_DATABASE_URL) npx node-pg-migrate status

# =============================================================================
# 🚀 COMANDOS DE MIGRACIÓN - PRODUCCIÓN
# =============================================================================

.PHONY: migrate-prod-status
migrate-prod-status: ## Ver estado de migraciones en producción
	@echo "$(BLUE)📊 Estado de migraciones (producción):$(NC)"
	@$(SSH) $(NAS_USER)@$(NAS_HOST) "cd $(NAS_PATH) && DATABASE_URL=$(PROD_DATABASE_URL) npx node-pg-migrate status"

.PHONY: migrate-prod-up
migrate-prod-up: ## Aplicar migraciones en producción (con confirmación)
	@echo "$(RED)⚠️  ADVERTENCIA: Esto aplicará migraciones en PRODUCCIÓN$(NC)"
	@echo "$(YELLOW)Se recomienda hacer backup primero con: make prod-backup$(NC)"
	@echo "¿Continuar? (s/N):"
	@read CONFIRM && [ "$$CONFIRM" = "s" ] || (echo "$(GREEN)Cancelado$(NC)" && exit 1)
	@echo "$(BLUE)1. Creando backup...$(NC)"
	@$(MAKE) -f Makefile.production prod-backup
	@echo "$(BLUE)2. Aplicando migraciones...$(NC)"
	@$(SSH) $(NAS_USER)@$(NAS_HOST) "cd $(NAS_PATH) && DATABASE_URL=$(PROD_DATABASE_URL) npx node-pg-migrate up"
	@echo "$(GREEN)✓ Migraciones aplicadas en producción$(NC)"
	@echo "$(BLUE)3. Reiniciando servicio...$(NC)"
	@$(SSH) $(NAS_USER)@$(NAS_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker restart ai-service"
	@echo "$(GREEN)✓ Servicio reiniciado$(NC)"

.PHONY: migrate-prod-down
migrate-prod-down: ## Revertir última migración en producción (¡PELIGROSO!)
	@echo "$(RED)⚠️  PELIGRO: Esto revertirá la última migración en PRODUCCIÓN$(NC)"
	@echo "¿Estás SEGURO? (escribir 'SI ESTOY SEGURO'):"
	@read CONFIRM && [ "$$CONFIRM" = "SI ESTOY SEGURO" ] || (echo "$(GREEN)Cancelado$(NC)" && exit 1)
	@echo "$(BLUE)1. Creando backup...$(NC)"
	@$(MAKE) -f Makefile.production prod-backup
	@echo "$(BLUE)2. Revirtiendo migración...$(NC)"
	@$(SSH) $(NAS_USER)@$(NAS_HOST) "cd $(NAS_PATH) && DATABASE_URL=$(PROD_DATABASE_URL) npx node-pg-migrate down"
	@echo "$(GREEN)✓ Migración revertida$(NC)"

# =============================================================================
# 🔍 COMANDOS DE COMPARACIÓN Y VALIDACIÓN
# =============================================================================

.PHONY: migrate-diff
migrate-diff: ## Comparar migraciones entre desarrollo y producción
	@echo "$(MAGENTA)🔍 Comparando migraciones...$(NC)"
	@echo "$(BLUE)Desarrollo:$(NC)"
	@DATABASE_URL=$(DEV_DATABASE_URL) npx node-pg-migrate status | tail -10
	@echo ""
	@echo "$(BLUE)Producción:$(NC)"
	@$(SSH) $(NAS_USER)@$(NAS_HOST) "cd $(NAS_PATH) && DATABASE_URL=$(PROD_DATABASE_URL) npx node-pg-migrate status" | tail -10

.PHONY: migrate-validate
migrate-validate: ## Validar migraciones antes de aplicar
	@echo "$(BLUE)✅ Validando migraciones...$(NC)"
	@echo "$(YELLOW)1. Verificando sintaxis...$(NC)"
	@for file in migrations/*.js; do \
		node -c $$file || exit 1; \
	done
	@echo "$(GREEN)✓ Sintaxis correcta$(NC)"
	@echo "$(YELLOW)2. Verificando orden...$(NC)"
	@ls -1 migrations/*.js | sort -n
	@echo "$(GREEN)✓ Orden correcto$(NC)"

# =============================================================================
# 🛠️ UTILIDADES
# =============================================================================

.PHONY: migrate-init
migrate-init: ## Inicializar sistema de migraciones
	@echo "$(BLUE)🔧 Inicializando sistema de migraciones...$(NC)"
	@echo "$(YELLOW)1. Creando tabla de migraciones en desarrollo...$(NC)"
	@DATABASE_URL=$(DEV_DATABASE_URL) npx node-pg-migrate up --migration-file-path migrations/1752092321024_baseline-schema.js
	@echo "$(YELLOW)2. Marcando baseline como aplicado...$(NC)"
	@echo "$(GREEN)✓ Sistema inicializado$(NC)"

.PHONY: migrate-reset
migrate-reset: ## Resetear todas las migraciones en desarrollo
	@echo "$(RED)⚠️  Esto eliminará y recreará todas las migraciones en desarrollo$(NC)"
	@echo "¿Continuar? (s/N):"
	@read CONFIRM && [ "$$CONFIRM" = "s" ] || (echo "$(GREEN)Cancelado$(NC)" && exit 1)
	@echo "$(YELLOW)Revirtiendo todas las migraciones...$(NC)"
	@DATABASE_URL=$(DEV_DATABASE_URL) npx node-pg-migrate down --count 999 || true
	@echo "$(YELLOW)Aplicando todas las migraciones...$(NC)"
	@DATABASE_URL=$(DEV_DATABASE_URL) npx node-pg-migrate up
	@echo "$(GREEN)✓ Reset completado$(NC)"

.PHONY: migrate-export
migrate-export: ## Exportar esquema actual a SQL
	@echo "$(BLUE)📥 Exportando esquema...$(NC)"
	@pg_dump $(DEV_DATABASE_URL) --schema=financial --schema=public -s > schema-export-$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)✓ Esquema exportado$(NC)"

# =============================================================================
# 🚨 EMERGENCIA - FIX DIRECTO
# =============================================================================

.PHONY: migrate-emergency-fix
migrate-emergency-fix: ## Aplicar fix de emergencia para gocardless_data
	@echo "$(RED)🚨 APLICANDO FIX DE EMERGENCIA$(NC)"
	@echo "$(YELLOW)Este comando aplicará directamente el fix de gocardless_data$(NC)"
	@echo "¿Continuar? (s/N):"
	@read CONFIRM && [ "$$CONFIRM" = "s" ] || exit 1
	@echo "$(BLUE)Aplicando migración específica...$(NC)"
	@$(SSH) $(NAS_USER)@$(NAS_HOST) "cd $(NAS_PATH) && DATABASE_URL=$(PROD_DATABASE_URL) npx node-pg-migrate up --migration-file-path migrations/1752092421091_add-gocardless-data-column.js"
	@echo "$(GREEN)✓ Fix aplicado$(NC)"
	@echo "$(BLUE)Reiniciando servicio...$(NC)"
	@$(SSH) $(NAS_USER)@$(NAS_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker restart ai-service"
	@echo "$(GREEN)✓ Servicio reiniciado$(NC)"

# =============================================================================
# AYUDA
# =============================================================================

.PHONY: help
help: ## Mostrar esta ayuda
	@echo "$(MAGENTA)╔══════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(MAGENTA)║         SISTEMA DE MIGRACIONES CON NODE-PG-MIGRATE           ║$(NC)"
	@echo "$(MAGENTA)╚══════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)Desarrollo:$(NC)"
	@grep -E '^migrate-(create|up|down|status|reset):.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Producción:$(NC)"
	@grep -E '^migrate-prod-.*:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(RED)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Utilidades:$(NC)"
	@grep -E '^migrate-(diff|validate|init|export|emergency):.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(BLUE)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Flujo típico:$(NC)"
	@echo "  1. make migrate-create NAME=\"add_new_feature\""
	@echo "  2. Editar migrations/TIMESTAMP_add_new_feature.js"
	@echo "  3. make migrate-up"
	@echo "  4. make migrate-prod-up"

.DEFAULT_GOAL := help