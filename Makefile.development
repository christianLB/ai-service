# Makefile.development - Comandos para desarrollo local
# Estos comandos son seguros y solo afectan tu ambiente local

# Variables de desarrollo
DEV_DB_HOST := localhost
DEV_DB_PORT := 5432
DEV_DB_NAME := ai_service
DEV_DB_USER := postgres
DEV_CONTAINER_PREFIX := ai-service
DEV_API_PORT := 3000

# Colores
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m

# =============================================================================
# üü¢ COMANDOS DE DESARROLLO - Database
# =============================================================================

.PHONY: dev-reset-db
dev-reset-db: ## Reset BD local sin confirmaci√≥n (r√°pido para desarrollo)
	@echo "$(YELLOW)üîÑ Reseteando base de datos local...$(NC)"
	@docker exec $(DEV_CONTAINER_PREFIX)-postgres-1 psql -U $(DEV_DB_USER) -c "DROP DATABASE IF EXISTS $(DEV_DB_NAME);"
	@docker exec $(DEV_CONTAINER_PREFIX)-postgres-1 psql -U $(DEV_DB_USER) -c "CREATE DATABASE $(DEV_DB_NAME);"
	@$(MAKE) dev-apply-schema
	@echo "$(GREEN)‚úì Base de datos local reseteada$(NC)"

.PHONY: dev-apply-schema
dev-apply-schema: ## Aplicar schema en desarrollo
	@echo "$(BLUE)üìù Aplicando schema en desarrollo...$(NC)"
	@docker exec -i $(DEV_CONTAINER_PREFIX)-postgres-1 psql -U $(DEV_DB_USER) -d $(DEV_DB_NAME) < scripts/complete-production-schema.sql
	@echo "$(GREEN)‚úì Schema aplicado$(NC)"

.PHONY: dev-migrate
dev-migrate: ## Aplicar migraciones en desarrollo
	@echo "$(BLUE)üîÑ Aplicando migraciones...$(NC)"
	@docker exec -i $(DEV_CONTAINER_PREFIX)-postgres-1 psql -U $(DEV_DB_USER) -d $(DEV_DB_NAME) < config/init-financial-tables.sql
	@echo "$(GREEN)‚úì Migraciones aplicadas$(NC)"

.PHONY: dev-seed
dev-seed: ## Cargar datos de prueba en desarrollo
	@echo "$(BLUE)üå± Cargando datos de prueba...$(NC)"
	@if [ -f "scripts/seed-data.sql" ]; then \
		docker exec -i $(DEV_CONTAINER_PREFIX)-postgres-1 psql -U $(DEV_DB_USER) -d $(DEV_DB_NAME) < scripts/seed-data.sql; \
		echo "$(GREEN)‚úì Datos de prueba cargados$(NC)"; \
	else \
		echo "$(YELLOW)‚ö† No se encontr√≥ scripts/seed-data.sql$(NC)"; \
	fi

# =============================================================================
# üü¢ COMANDOS DE DESARROLLO - Estado y Monitoreo
# =============================================================================

.PHONY: dev-status
dev-status: ## Estado del ambiente local
	@echo "$(BLUE)üìä ESTADO DE DESARROLLO LOCAL$(NC)"
	@echo "$(YELLOW)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(NC)"
	@echo "$(BLUE)Servicio AI:$(NC)"
	@-curl -s http://localhost:$(DEV_API_PORT)/status | python3 -m json.tool | head -15 || echo "$(RED)‚úó Servicio no disponible$(NC)"
	@echo ""
	@echo "$(BLUE)Contenedores:$(NC)"
	@docker ps --format "table {{.Names}}\t{{.Status}}" | grep $(DEV_CONTAINER_PREFIX) || echo "$(YELLOW)No hay contenedores corriendo$(NC)"

.PHONY: dev-check-db
dev-check-db: ## Verificar BD local
	@echo "$(BLUE)üóÑÔ∏è  Base de datos local:$(NC)"
	@echo -n "PostgreSQL: "
	@if docker exec $(DEV_CONTAINER_PREFIX)-postgres-1 pg_isready -U $(DEV_DB_USER) >/dev/null 2>&1; then \
		echo "$(GREEN)‚úì Corriendo$(NC)"; \
		echo -n "Tablas: "; \
		docker exec $(DEV_CONTAINER_PREFIX)-postgres-1 psql -U $(DEV_DB_USER) -d $(DEV_DB_NAME) -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema NOT IN ('pg_catalog', 'information_schema');" | tr -d ' '; \
	else \
		echo "$(RED)‚úó No disponible$(NC)"; \
	fi

.PHONY: dev-logs
dev-logs: ## Ver logs del servicio local
	@docker logs -f $(DEV_CONTAINER_PREFIX)-ai-service-1 --tail 50

.PHONY: dev-logs-db
dev-logs-db: ## Ver logs de PostgreSQL local
	@docker logs -f $(DEV_CONTAINER_PREFIX)-postgres-1 --tail 50

# =============================================================================
# üü¢ COMANDOS DE DESARROLLO - Docker
# =============================================================================

.PHONY: dev-up
dev-up: ## Levantar ambiente de desarrollo
	@echo "$(BLUE)üöÄ Iniciando ambiente de desarrollo...$(NC)"
	@docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d
	@echo "$(YELLOW)‚è≥ Esperando que los servicios inicien...$(NC)"
	@sleep 5
	@$(MAKE) dev-status

.PHONY: dev-down
dev-down: ## Detener ambiente de desarrollo
	@echo "$(YELLOW)üõë Deteniendo ambiente de desarrollo...$(NC)"
	@docker compose -f docker-compose.yml -f docker-compose.dev.yml down
	@echo "$(GREEN)‚úì Ambiente detenido$(NC)"

.PHONY: dev-restart
dev-restart: ## Reiniciar servicios de desarrollo
	@echo "$(YELLOW)üîÑ Reiniciando servicios...$(NC)"
	@docker compose -f docker-compose.yml -f docker-compose.dev.yml restart
	@sleep 5
	@$(MAKE) dev-status

.PHONY: dev-rebuild
dev-rebuild: ## Reconstruir imagen de desarrollo
	@echo "$(BLUE)üèóÔ∏è  Reconstruyendo imagen...$(NC)"
	@docker-compose build --no-cache ai-service
	@echo "$(GREEN)‚úì Imagen reconstruida$(NC)"

.PHONY: dev-refresh
dev-refresh: ## Detiene, reconstruye y levanta el ambiente (down, build, up)
	@echo "$(BLUE)üîÑ Refrescando completamente el ambiente de desarrollo...$(NC)"
	@echo "$(YELLOW)1. Deteniendo servicios...$(NC)"
	@docker compose -f docker-compose.yml -f docker-compose.dev.yml down
	@echo "$(YELLOW)2. Reconstruyendo im√°genes...$(NC)"
	@docker compose -f docker-compose.yml -f docker-compose.dev.yml build --no-cache
	@echo "$(YELLOW)3. Levantando servicios...$(NC)"
	@docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d
	@echo "$(GREEN)‚úì Ambiente refrescado y corriendo en segundo plano$(NC)"

.PHONY: dev-build-frontend
dev-build-frontend: ## Recompilar frontend en desarrollo
	@echo "$(BLUE)üîß Compilando frontend...$(NC)"
	@cd frontend && npm run build
	@echo "$(GREEN)‚úì Frontend compilado$(NC)"

.PHONY: dev-redeploy-frontend
dev-redeploy-frontend: ## Redesplegar frontend con √∫ltima versi√≥n
	@echo "$(BLUE)üîÑ Redesplegando frontend con √∫ltima versi√≥n...$(NC)"
	@echo "$(YELLOW)üìä Obteniendo informaci√≥n de versi√≥n...$(NC)"
	@$(eval COMMIT_HASH := $(shell git log -1 --format='%H'))
	@$(eval COMMIT_SHORT := $(shell git log -1 --format='%h'))
	@$(eval BUILD_DATE := $(shell date +%Y-%m-%d))
	@echo "  Commit: $(COMMIT_SHORT)"
	@echo "  Fecha: $(BUILD_DATE)"
	@echo "$(YELLOW)üõë Deteniendo servicios...$(NC)"
	@docker compose down
	@echo "$(YELLOW)üìù Actualizando versiones en docker-compose.yml...$(NC)"
	@sed -i.bak 's/COMMIT:-[^}]*/COMMIT:-$(COMMIT_HASH)/g' docker-compose.yml
	@sed -i.bak 's/COMMIT_SHORT:-[^}]*/COMMIT_SHORT:-$(COMMIT_SHORT)/g' docker-compose.yml
	@sed -i.bak 's/BUILD_DATE:-[^}]*/BUILD_DATE:-$(BUILD_DATE)/g' docker-compose.yml
	@rm docker-compose.yml.bak
	@echo "$(YELLOW)üî® Reconstruyendo frontend sin cache...$(NC)"
	@docker compose build --no-cache ai-service-frontend
	@echo "$(YELLOW)üöÄ Levantando servicios...$(NC)"
	@docker compose up -d
	@echo "$(YELLOW)‚è≥ Esperando que los servicios inicien...$(NC)"
	@sleep 10
	@echo "$(GREEN)‚úÖ Frontend redesplegado con versi√≥n $(COMMIT_SHORT)$(NC)"
	@echo "$(BLUE)üìå Accede a http://localhost:3000$(NC)"

# =============================================================================
# üü¢ COMANDOS DE DESARROLLO - Authentication Management
# =============================================================================

.PHONY: dev-auth-reset-attempts
dev-auth-reset-attempts: ## Limpiar todos los intentos de login
	@echo "$(YELLOW)üîì Resetting login attempts...$(NC)"
	@docker exec ai-service-postgres psql -U ai_user -d ai_service -c "DELETE FROM login_attempts;" 2>/dev/null || \
		echo "$(RED)‚ùå Could not reset attempts. Check if database is running.$(NC)"
	@echo "$(GREEN)‚úÖ Login attempts cleared$(NC)"

.PHONY: dev-auth-reset-password
dev-auth-reset-password: ## Resetear contrase√±a de usuario
	@echo "$(BLUE)üîë Reset user password$(NC)"
	@read -p "Enter email: " email; \
	read -s -p "Enter new password: " password; \
	echo; \
	docker exec ai-service-api-dev node -e " \
		const bcrypt = require('bcrypt'); \
		const { Pool } = require('pg'); \
		const pool = new Pool({ \
			host: 'postgres', \
			port: 5432, \
			database: 'ai_service', \
			user: 'ai_user', \
			password: 'ultra_secure_password_2025' \
		}); \
		(async () => { \
			const hash = await bcrypt.hash('$$password', 10); \
			const result = await pool.query( \
				'UPDATE users SET password_hash = \$$1 WHERE email = \$$2 RETURNING email', \
				[hash, '$$email'] \
			); \
			if (result.rowCount > 0) { \
				console.log('‚úÖ Password updated for', result.rows[0].email); \
			} else { \
				console.log('‚ùå User not found'); \
			} \
			await pool.end(); \
		})();"

.PHONY: dev-auth-create-user
dev-auth-create-user: ## Crear nuevo usuario
	@echo "$(BLUE)üë§ Create new user$(NC)"
	@read -p "Enter email: " email; \
	read -p "Enter full name: " name; \
	read -s -p "Enter password: " password; \
	echo; \
	read -p "Enter role (admin/user) [user]: " role; \
	role=$${role:-user}; \
	docker exec ai-service-api-dev node -e " \
		const bcrypt = require('bcrypt'); \
		const { Pool } = require('pg'); \
		const pool = new Pool({ \
			host: 'postgres', \
			port: 5432, \
			database: 'ai_service', \
			user: 'ai_user', \
			password: 'ultra_secure_password_2025' \
		}); \
		(async () => { \
			try { \
				const hash = await bcrypt.hash('$$password', 10); \
				const result = await pool.query( \
					'INSERT INTO users (email, password_hash, full_name, role) VALUES (\$$1, \$$2, \$$3, \$$4) RETURNING email', \
					['$$email', hash, '$$name', '$$role'] \
				); \
				console.log('‚úÖ User created:', result.rows[0].email); \
			} catch (error) { \
				if (error.code === '23505') { \
					console.log('‚ùå User already exists'); \
				} else { \
					console.log('‚ùå Error:', error.message); \
				} \
			} \
			await pool.end(); \
		})();"

.PHONY: dev-auth-list-users
dev-auth-list-users: ## Listar todos los usuarios
	@echo "$(BLUE)üìã Listing all users...$(NC)"
	@docker exec ai-service-postgres psql -U ai_user -d ai_service -c \
		"SELECT email, full_name, role, is_active, created_at FROM users ORDER BY created_at DESC;" 2>/dev/null || \
		echo "$(RED)‚ùå Could not list users. Check if database is running.$(NC)"

.PHONY: dev-auth-check-attempts
dev-auth-check-attempts: ## Ver intentos recientes de login
	@echo "$(BLUE)üîç Checking recent login attempts...$(NC)"
	@docker exec ai-service-postgres psql -U ai_user -d ai_service -c \
		"SELECT email, ip_address, success, attempted_at FROM login_attempts ORDER BY attempted_at DESC LIMIT 20;" 2>/dev/null || \
		echo "$(RED)‚ùå Could not check attempts. Check if database is running.$(NC)"

.PHONY: dev-auth-create-admin
dev-auth-create-admin: ## Crear/resetear usuario admin (admin@ai-service.local / admin123)
	@echo "$(BLUE)üë§ Creating/resetting admin user...$(NC)"
	@docker exec ai-service-api-dev node -e " \
		const bcrypt = require('bcrypt'); \
		const { Pool } = require('pg'); \
		const pool = new Pool({ \
			host: 'postgres', \
			port: 5432, \
			database: 'ai_service', \
			user: 'ai_user', \
			password: 'ultra_secure_password_2025' \
		}); \
		(async () => { \
			try { \
				const hash = await bcrypt.hash('admin123', 10); \
				const result = await pool.query( \
					'INSERT INTO users (email, password_hash, full_name, role) VALUES (\$$1, \$$2, \$$3, \$$4) RETURNING email', \
					['admin@ai-service.local', hash, 'Admin User', 'admin'] \
				); \
				console.log('‚úÖ Admin user created:', result.rows[0].email); \
				console.log('üìß Email: admin@ai-service.local'); \
				console.log('üîë Password: admin123'); \
			} catch (error) { \
				if (error.code === '23505') { \
					const hash = await bcrypt.hash('admin123', 10); \
					await pool.query( \
						'UPDATE users SET password_hash = \$$1 WHERE email = \$$2', \
						[hash, 'admin@ai-service.local'] \
					); \
					console.log('‚úÖ Admin password reset to: admin123'); \
				} else { \
					console.log('‚ùå Error:', error.message); \
				} \
			} \
			await pool.end(); \
		})();"

.PHONY: dev-auth-get-token
dev-auth-get-token: ## Obtener token JWT para usuario admin
	@echo "$(BLUE)üîë Obteniendo token para admin@ai-service.local...$(NC)"
	@docker cp scripts/get-admin-token.js ai-service-api-dev:/app/get-admin-token.js
	@docker cp scripts/get-admin-token.js ai-service-api-dev:/app/get-admin-token.js
	@docker cp .env.local ai-service-api-dev:/app/.env.local
	@docker exec ai-service-api-dev npm install --no-save dotenv
	@docker exec ai-service-api-dev node /app/get-admin-token.js
	@docker exec ai-service-api-dev rm /app/get-admin-token.js /app/.env.local

.PHONY: dev-auth-unblock-ip
dev-auth-unblock-ip: ## Desbloquear una IP espec√≠fica
	@echo "$(BLUE)üîì Unblock IP address$(NC)"
	@read -p "Enter IP to unblock: " ip; \
	docker exec ai-service-postgres psql -U postgres -d ai_service_dev -c \
		"DELETE FROM login_attempts WHERE ip_address = '$$ip'::inet;" 2>/dev/null && \
		echo "$(GREEN)‚úÖ IP unblocked$(NC)" || \
		echo "$(RED)‚ùå Could not unblock IP$(NC)"

.PHONY: dev-auth-check
dev-auth-check: ## üîç Verificar salud completa del sistema de autenticaci√≥n
	@../scripts/check-auth.sh

.PHONY: dev-auth-test-endpoints  
dev-auth-test-endpoints: ## üåê Probar todos los endpoints protegidos
	@echo "$(BLUE)üîê Testing authenticated endpoints...$(NC)"
	@../scripts/check-auth.sh

# =============================================================================
# üü¢ COMANDOS DE DESARROLLO - Database Fixes
# =============================================================================

.PHONY: dev-fix-missing-views
dev-fix-missing-views: ## üîß Create missing database views
	@echo "$(BLUE)üîß Creating missing database views...$(NC)"
	@cat migrations/005-create-client-statistics-view.sql | docker exec -i $(DEV_CONTAINER_PREFIX)-postgres-1 psql -U $(DEV_DB_USER) -d $(DEV_DB_NAME)
	@echo "$(GREEN)‚úÖ Views created successfully$(NC)"

.PHONY: dev-check-db-health  
dev-check-db-health: ## üè• Check database health and missing objects
	@echo "$(BLUE)üè• Checking database health...$(NC)"
	@echo "$(YELLOW)Tables in financial schema:$(NC)"
	@docker exec $(DEV_CONTAINER_PREFIX)-postgres-1 psql -U $(DEV_DB_USER) -d $(DEV_DB_NAME) -c "\dt financial.*" 2>/dev/null | grep -E "table|view" || echo "None found"
	@echo ""
	@echo "$(YELLOW)Views in financial schema:$(NC)"
	@docker exec $(DEV_CONTAINER_PREFIX)-postgres-1 psql -U $(DEV_DB_USER) -d $(DEV_DB_NAME) -c "\dv financial.*" 2>/dev/null | grep -E "view" || echo "None found"

# =============================================================================
# üü¢ COMANDOS DE DESARROLLO - Testing
# =============================================================================

.PHONY: dev-test
dev-test: ## Ejecutar tests
	@echo "$(BLUE)üß™ Ejecutando tests...$(NC)"
	@npm test

.PHONY: dev-test-watch
dev-test-watch: ## Ejecutar tests en modo watch
	@npm run test:watch

.PHONY: dev-lint
dev-lint: ## Ejecutar linter
	@echo "$(BLUE)üîç Ejecutando linter...$(NC)"
	@npm run lint

.PHONY: dev-typecheck
dev-typecheck: ## Verificar tipos TypeScript
	@echo "$(BLUE)üìê Verificando tipos...$(NC)"
	@npm run typecheck || echo "$(YELLOW)‚ö† Considera usar TypeScript$(NC)"

# =============================================================================
# üü¢ COMANDOS DE DESARROLLO - Utilidades
# =============================================================================

.PHONY: dev-shell
dev-shell: ## Abrir shell en contenedor de desarrollo
	@docker exec -it $(DEV_CONTAINER_PREFIX)-ai-service-1 /bin/sh

.PHONY: dev-db-shell
dev-db-shell: ## Abrir psql en desarrollo
	@docker exec -it $(DEV_CONTAINER_PREFIX)-postgres-1 psql -U $(DEV_DB_USER) -d $(DEV_DB_NAME)

.PHONY: dev-clean
dev-clean: ## Limpiar archivos temporales y cache
	@echo "$(BLUE)üßπ Limpiando...$(NC)"
	@rm -rf node_modules/.cache
	@rm -rf dist
	@rm -rf coverage
	@echo "$(GREEN)‚úì Limpieza completada$(NC)"

.PHONY: dev-install
dev-install: ## Instalar dependencias
	@echo "$(BLUE)üì¶ Instalando dependencias...$(NC)"
	@npm install
	@echo "$(GREEN)‚úì Dependencias instaladas$(NC)"

.PHONY: dev-911 811
dev-911 811: ## üÜò Gu√≠a r√°pida de comandos de desarrollo
	@echo "$(BLUE)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	@echo "$(BLUE)‚ïë       COMANDOS CLAVE PARA DESARROLLO LOCAL       ‚ïë$(NC)"
	@echo "$(BLUE)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"
	@echo ""
	@echo "$(YELLOW)Acciones frecuentes:$(NC)"
	@echo "  $(GREEN)make dev-up$(NC)             - Levantar servicios"
	@echo "  $(GREEN)make dev-rebuild$(NC)        - Reconstruir imagen backend"
	@echo "  $(GREEN)make dev-build-frontend$(NC) - Recompilar frontend"
	@echo "  $(GREEN)make dev-redeploy-frontend$(NC) - Redesplegar frontend con √∫ltima versi√≥n"
	@echo "  $(GREEN)make dev-status$(NC)         - Ver estado actual"
	@echo "  $(GREEN)make dev-logs$(NC)           - Ver logs del servicio"
	@echo "  $(GREEN)make dev-down$(NC)           - Detener todo"
	@echo ""
	@echo "$(YELLOW)Para ver todos los comandos:$(NC)"
	@echo "  $(GREEN)make -f Makefile.development help$(NC)"

# =============================================================================
# Ayuda
# =============================================================================

.PHONY: help
help: ## Mostrar esta ayuda
	@echo "$(GREEN)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	@echo "$(GREEN)‚ïë               COMANDOS DE DESARROLLO LOCAL                    ‚ïë$(NC)"
	@echo "$(GREEN)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "$(BLUE)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(GREEN)‚úì Estos comandos son seguros y solo afectan tu ambiente local$(NC)"

.DEFAULT_GOAL := help