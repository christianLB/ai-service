import { Router } from 'express';
import { body, query, param } from 'express-validator';
import { authMiddleware } from '../middleware/auth.middleware';
import { validateRequest } from '../middleware/validation';
import { alertService } from '../services/alert.service';
import { 
  createAlertSchema, 
  updateAlertSchema,
  alertQuerySchema 
} from '../types/alert.types';
import { asyncHandler } from '../utils/asyncHandler';
import logger from '../utils/logger';

const router = Router();

// All routes require authentication
router.use(authMiddleware);

/**
 * GET /api/alerts
 * Get all alerts with pagination
 */
router.get(
  '/',
  [
    query('page').optional().isInt({ min: 1 }),
    query('limit').optional().isInt({ min: 1, max: 100 }),
    query('search').optional().isString().trim(),
    query('sortBy').optional().isString(),
    query('sortOrder').optional().isIn(['asc', 'desc']),
  ],
  validateRequest,
  asyncHandler(async (req, res) => {
    const queryParams = alertQuerySchema.parse(req.query);
    const result = await alertService.getAll(queryParams, req.user?.userId);
    
    res.json({
      success: true,
      data: result,
    });
  })
);

/**
 * GET /api/alerts/:id
 * Get a single alert by ID
 */
router.get(
  '/:id',
  [
    param('id').isUUID().withMessage('Invalid alert ID'),
  ],
  validateRequest,
  asyncHandler(async (req, res) => {
    const alert = await alertService.getById(req.params.id, req.user?.userId);
    
    res.json({
      success: true,
      data: alert,
    });
  })
);

/**
 * POST /api/alerts
 * Create a new alert
 */
router.post(
  '/',
  [
    body('userId').notEmpty().withMessage('Userid is required'),
    body('strategyId').optional({ nullable: true }).isString(),
    body('type').notEmpty().withMessage('Type is required'),
    body('severity').notEmpty().withMessage('Severity is required'),
    body('title').notEmpty().withMessage('Title is required'),
    body('message').notEmpty().withMessage('Message is required'),
    body('data').optional({ nullable: true }),
  ],
  validateRequest,
  asyncHandler(async (req, res) => {
    const data = createAlertSchema.parse(req.body);
    const alert = await alertService.create(data, req.user?.userId);
    
    logger.info(`Alert created by user ${req.user?.email}`);
    
    res.status(201).json({
      success: true,
      data: alert,
      message: 'Alert created successfully',
    });
  })
);

/**
 * PUT /api/alerts/:id
 * Update a alert
 */
router.put(
  '/:id',
  [
    param('id').isUUID().withMessage('Invalid alert ID'),
    body('userId').optional({ nullable: true }).isString(),
    body('strategyId').optional({ nullable: true }).isString(),
    body('type').optional({ nullable: true }).isString(),
    body('severity').optional({ nullable: true }).isString(),
    body('title').optional({ nullable: true }).isString(),
    body('message').optional({ nullable: true }).isString(),
    body('data').optional({ nullable: true }),
  ],
  validateRequest,
  asyncHandler(async (req, res) => {
    const data = updateAlertSchema.parse({ ...req.body, id: req.params.id });
    const alert = await alertService.update(req.params.id, data, req.user?.userId);
    
    logger.info(`Alert ${req.params.id} updated by user ${req.user?.email}`);
    
    res.json({
      success: true,
      data: alert,
      message: 'Alert updated successfully',
    });
  })
);

/**
 * DELETE /api/alerts/:id
 * Delete a alert
 */
router.delete(
  '/:id',
  [
    param('id').isUUID().withMessage('Invalid alert ID'),
  ],
  validateRequest,
  asyncHandler(async (req, res) => {
    await alertService.delete(req.params.id, req.user?.userId);
    
    logger.info(`Alert ${req.params.id} deleted by user ${req.user?.email}`);
    
    res.json({
      success: true,
      message: 'Alert deleted successfully',
    });
  })
);


export default router;