generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["financial", "public", "trading", "tagging"]
}

model accounts {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  account_id        String      @unique @db.VarChar(255)
  name              String      @db.VarChar(255)
  type              String      @db.VarChar(50)
  currency_id       String?     @db.Uuid
  balance           Decimal?    @default(0) @db.Decimal(20, 8)
  available_balance Decimal?    @default(0) @db.Decimal(20, 8)
  institution       String?     @db.VarChar(255)
  institution_id    String?     @db.VarChar(255)
  requisition_id    String?     @db.VarChar(255)
  iban              String?     @db.VarChar(255)
  wallet_address    String?     @db.VarChar(255)
  chain_id          String?     @db.VarChar(50)
  exchange_name     String?     @db.VarChar(100)
  metadata          Json?       @default("{}")
  is_active         Boolean?    @default(true)
  last_sync         DateTime?   @db.Timestamptz(6)
  created_at        DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?   @default(now()) @db.Timestamptz(6)
  currencies        currencies? @relation(fields: [currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([institution_id], map: "idx_accounts_institution_id")
  @@schema("financial")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model categories {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                        String                        @unique @db.VarChar(100)
  type                        String?                       @db.VarChar(20)
  parent_id                   String?                       @db.Uuid
  color                       String?                       @db.VarChar(7)
  icon                        String?                       @db.VarChar(50)
  is_active                   Boolean?                      @default(true)
  created_at                  DateTime?                     @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime?                     @default(now()) @db.Timestamptz(6)
  categories                  categories?                   @relation("categoriesTocategories", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_categories            categories[]                  @relation("categoriesTocategories")
  transaction_categorizations transaction_categorizations[]
  ai_tags                     ai_tags[]

  @@schema("financial")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model client_transaction_links {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transaction_id     String?       @unique @db.Uuid
  client_id          String        @db.Uuid
  match_type         String        @db.VarChar(20)
  match_confidence   Decimal?      @default(1.00) @db.Decimal(3, 2)
  matched_by         String?       @db.VarChar(255)
  matched_at         DateTime?     @default(now()) @db.Timestamptz(6)
  match_criteria     Json?
  is_manual_override Boolean?      @default(false)
  previous_link_id   String?       @db.Uuid
  override_reason    String?
  notes              String?
  created_at         DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?     @default(now()) @db.Timestamptz(6)
  transactions       transactions? @relation(fields: [transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([client_id], map: "idx_client_transaction_links_client_id")
  @@index([match_type], map: "idx_client_transaction_links_match_type")
  @@index([transaction_id], map: "idx_client_transaction_links_transaction_id")
  @@schema("financial")
}

model Client {
  id                   String    @id @default(uuid()) @db.VarChar(255)
  userId               String    @map("user_id") @db.Uuid
  name                 String    @db.VarChar(255)
  businessName         String?   @map("business_name") @db.VarChar(255)
  taxId                String    @map("tax_id") @db.VarChar(100)
  taxIdType            String    @default("OTHER") @map("tax_id_type") @db.VarChar(20)
  email                String    @db.VarChar(255)
  phone                String?   @db.VarChar(50)
  address              Json?
  clientType           String    @default("business") @map("client_type") @db.VarChar(20)
  currency             String    @default("EUR") @db.VarChar(10)
  language             String    @default("es") @db.VarChar(10)
  timezone             String?   @db.VarChar(50)
  paymentTerms         Int       @default(30) @map("payment_terms")
  paymentMethod        String?   @map("payment_method") @db.VarChar(20)
  bankAccount          String?   @map("bank_account") @db.VarChar(255)
  creditLimit          Decimal?  @default(0) @map("credit_limit") @db.Decimal(15, 2)
  status               String    @default("active") @db.VarChar(20)
  totalRevenue         Decimal   @default(0) @map("total_revenue") @db.Decimal(15, 2)
  totalInvoices        Int       @default(0) @map("total_invoices")
  outstandingBalance   Decimal   @default(0) @map("outstanding_balance") @db.Decimal(15, 2)
  lastInvoiceDate      DateTime? @map("last_invoice_date") @db.Timestamp(6)
  averageInvoiceAmount Decimal?  @map("average_invoice_amount") @db.Decimal(15, 2)
  customFields         Json?     @default("{}") @map("custom_fields")
  tags                 String[]  @default([])
  notes                String?
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
  createdBy            String?   @map("created_by") @db.VarChar(255)
  lastContactDate      DateTime? @map("last_contact_date") @db.Timestamp(6)

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  invoices Invoice[]

  @@index([email], map: "idx_clients_email")
  @@index([status], map: "idx_clients_status")
  @@index([taxId], map: "idx_clients_tax_id")
  @@map("clients")
  @@schema("financial")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model currencies {
  id                                                    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code                                                  String         @unique @db.VarChar(10)
  name                                                  String         @db.VarChar(100)
  type                                                  String         @db.VarChar(20)
  decimals                                              Int?           @default(2)
  symbol                                                String?        @db.VarChar(10)
  is_active                                             Boolean?       @default(true)
  created_at                                            DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at                                            DateTime?      @default(now()) @db.Timestamptz(6)
  accounts                                              accounts[]
  transactions_transactions_currency_idTocurrencies     transactions[] @relation("transactions_currency_idTocurrencies")
  transactions_transactions_fee_currency_idTocurrencies transactions[] @relation("transactions_fee_currency_idTocurrencies")

  @@schema("financial")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model integration_configs {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String?  @db.Uuid
  integration_type String   @db.VarChar(50)
  config_key       String   @db.VarChar(100)
  config_value     String
  is_encrypted     Boolean  @default(true)
  is_global        Boolean  @default(false)
  description      String?
  metadata         Json?    @default("{}")
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @db.Timestamptz(6)
  User             User?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([integration_type], map: "idx_integration_configs_type")
  @@schema("financial")
}

model invoice_sequences {
  id             Int      @id @default(autoincrement())
  prefix         String   @db.VarChar(20)
  current_number Int      @default(0)
  year           Int?
  format         String   @default("PREFIX-YYYY-0000") @db.VarChar(50)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)

  @@unique([prefix, year], map: "unique_sequence_prefix_year")
  @@schema("financial")
}

model Invoice {
  id                    String    @id @default(uuid()) @db.VarChar(255)
  userId                String    @map("user_id") @db.Uuid
  invoiceNumber         String    @unique @map("invoice_number") @db.VarChar(50)
  clientId              String?   @map("client_id") @db.VarChar(255)
  clientName            String    @map("client_name") @db.VarChar(255)
  clientTaxId           String    @map("client_tax_id") @db.VarChar(100)
  clientAddress         Json?     @map("client_address")
  type                  String    @default("invoice") @db.VarChar(20)
  status                String    @default("draft") @db.VarChar(20)
  issueDate             DateTime  @default(dbgenerated("CURRENT_DATE")) @map("issue_date") @db.Date
  dueDate               DateTime  @map("due_date") @db.Date
  paidDate              DateTime? @map("paid_date") @db.Date
  serviceStartDate      DateTime? @map("service_start_date") @db.Date
  serviceEndDate        DateTime? @map("service_end_date") @db.Date
  currency              String    @default("EUR") @db.VarChar(10)
  exchangeRate          Decimal?  @map("exchange_rate") @db.Decimal(10, 6)
  items                 Json      @default("[]")
  subtotal              Decimal   @default(0) @db.Decimal(15, 2)
  taxAmount             Decimal   @default(0) @map("tax_amount") @db.Decimal(15, 2)
  taxRate               Decimal   @default(21) @map("tax_rate") @db.Decimal(5, 2)
  taxType               String    @default("IVA") @map("tax_type") @db.VarChar(10)
  discount              Decimal?  @db.Decimal(15, 2)
  discountType          String?   @map("discount_type") @db.VarChar(10)
  total                 Decimal   @default(0) @db.Decimal(15, 2)
  paymentMethod         String?   @map("payment_method") @db.VarChar(20)
  paymentTerms          Int       @default(30) @map("payment_terms")
  bankAccount           String?   @map("bank_account") @db.VarChar(255)
  paymentReference      String?   @map("payment_reference") @db.VarChar(255)
  relatedDocuments      Json?     @default("[]") @map("related_documents")
  relatedTransactionIds String[]  @default([]) @map("related_transaction_ids")
  notes                 String?
  termsAndConditions    String?   @map("terms_and_conditions")
  customFields          Json?     @default("{}") @map("custom_fields")
  tags                  String[]  @default([])
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
  sentAt                DateTime? @map("sent_at") @db.Timestamp(6)
  viewedAt              DateTime? @map("viewed_at") @db.Timestamp(6)
  createdBy             String?   @map("created_by") @db.VarChar(255)
  attachments           Json?     @default("[]")
  pdfUrl                String?   @map("pdf_url") @db.VarChar(500)
  isDeductible          Boolean?  @default(false) @map("is_deductible")
  deductibleCategory    String?   @map("deductible_category") @db.VarChar(100)
  deductiblePercentage  Decimal?  @map("deductible_percentage") @db.Decimal(5, 2)
  templateId            String?   @map("template_id") @db.Uuid

  // Relations
  user     User             @relation(fields: [userId], references: [id])
  client   Client?          @relation(fields: [clientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  template InvoiceTemplate? @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([clientId], map: "idx_invoices_client_id")
  @@index([invoiceNumber], map: "idx_invoices_invoice_number")
  @@index([issueDate(sort: Desc)], map: "idx_invoices_issue_date")
  @@index([status], map: "idx_invoices_status")
  @@map("invoices")
  @@schema("financial")
}

model InvoiceTemplate {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  name         String   @db.VarChar(255)
  description  String?  @db.Text
  isDefault    Boolean  @default(false) @map("is_default")
  templateType String   @default("invoice") @map("template_type") @db.VarChar(50)
  htmlContent  String   @map("html_content") @db.Text
  variables    Json     @default("[]") // Available template variables
  metadata     Json? // Additional settings
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  invoices Invoice[] // Templates used by invoices

  @@index([userId], map: "idx_invoice_templates_user_id")
  @@index([templateType], map: "idx_invoice_templates_type")
  @@index([isDefault], map: "idx_invoice_templates_default")
  @@map("invoice_templates")
  @@schema("financial")
}

model transaction_categorizations {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transaction_id String?       @unique @db.Uuid
  category_id    String?       @db.Uuid
  confidence     Decimal?      @default(1.00) @db.Decimal(3, 2)
  method         String?       @default("manual") @db.VarChar(50)
  ai_tag_id      String?       @db.Uuid
  user_confirmed Boolean?      @default(false)
  created_at     DateTime?     @default(now()) @db.Timestamptz(6)
  categories     categories?   @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions   transactions? @relation(fields: [transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ai_tags        ai_tags?      @relation(fields: [ai_tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([category_id], map: "idx_transaction_categorizations_category_id")
  @@index([transaction_id], map: "idx_transaction_categorizations_transaction_id")
  @@index([ai_tag_id], map: "idx_transaction_categorizations_ai_tag_id")
  @@schema("financial")
}

model ai_tags {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tag_name                    String                        @unique @db.VarChar(100)
  description                 String?
  confidence_threshold        Decimal?                      @default(0.75) @db.Decimal(3, 2)
  category_id                 String?                       @db.Uuid
  is_active                   Boolean?                      @default(true)
  created_at                  DateTime?                     @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime?                     @default(now()) @db.Timestamptz(6)
  categories                  categories?                   @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transaction_categorizations transaction_categorizations[]

  @@index([tag_name], map: "idx_ai_tags_tag_name")
  @@index([category_id], map: "idx_ai_tags_category_id")
  @@index([is_active], map: "idx_ai_tags_is_active")
  @@schema("financial")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transaction_matching_patterns {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  client_id       String    @db.Uuid
  pattern_type    String    @db.VarChar(20)
  pattern         String    @db.VarChar(500)
  confidence      Decimal?  @default(0.80) @db.Decimal(3, 2)
  amount_min      Decimal?  @db.Decimal(20, 8)
  amount_max      Decimal?  @db.Decimal(20, 8)
  day_of_month    Int?
  frequency       String?   @db.VarChar(20)
  is_active       Boolean?  @default(true)
  match_count     Int?      @default(0)
  last_matched_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)

  @@index([is_active], map: "idx_transaction_matching_patterns_active")
  @@index([client_id], map: "idx_transaction_matching_patterns_client_id")
  @@index([pattern_type], map: "idx_transaction_matching_patterns_pattern_type")
  @@schema("financial")
}

model transactions {
  id                                                  String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transaction_id                                      String                       @unique @db.VarChar(255)
  account_id                                          String                       @db.VarChar(255)
  amount                                              Decimal                      @db.Decimal(20, 8)
  currency_id                                         String?                      @db.Uuid
  type                                                String                       @db.VarChar(50)
  status                                              String?                      @default("confirmed") @db.VarChar(50)
  description                                         String?
  reference                                           String?                      @db.VarChar(255)
  counterparty_name                                   String?                      @db.VarChar(255)
  date                                                DateTime                     @db.Date
  created_at                                          DateTime?                    @default(now()) @db.Timestamptz(6)
  updated_at                                          DateTime?                    @default(now()) @db.Timestamptz(6)
  metadata                                            Json?                        @default("{}")
  tags                                                String[]
  fee_amount                                          Decimal?                     @db.Decimal(20, 8)
  fee_currency_id                                     String?                      @db.Uuid
  gocardless_data                                     Json?
  transaction_hash                                    String?                      @db.VarChar(255)
  block_number                                        Int?
  gas_used                                            String?                      @db.VarChar(255)
  gas_price                                           String?                      @db.VarChar(255)
  from_address                                        String?                      @db.VarChar(255)
  to_address                                          String?                      @db.VarChar(255)
  counterparty_account                                String?                      @db.VarChar(255)
  client_transaction_links                            client_transaction_links?
  transaction_categorizations                         transaction_categorizations?
  currencies_transactions_currency_idTocurrencies     currencies?                  @relation("transactions_currency_idTocurrencies", fields: [currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  currencies_transactions_fee_currency_idTocurrencies currencies?                  @relation("transactions_fee_currency_idTocurrencies", fields: [fee_currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([account_id], map: "idx_transactions_account_id")
  @@index([counterparty_name], map: "idx_transactions_counterparty")
  @@index([date], map: "idx_transactions_date")
  @@index([status], map: "idx_transactions_status")
  @@index([transaction_hash], map: "idx_transactions_transaction_hash")
  @@schema("financial")
}

model executions {
  id                String     @id @db.VarChar(36)
  workflow_id       String?    @db.VarChar(36)
  status            String     @db.VarChar(20)
  start_time        DateTime?  @default(now()) @db.Timestamptz(6)
  end_time          DateTime?  @db.Timestamptz(6)
  input_data        Json?
  output_data       Json?
  error_message     String?
  execution_time_ms Int?
  workflows         workflows? @relation(fields: [workflow_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([start_time], map: "idx_executions_start_time")
  @@index([status], map: "idx_executions_status")
  @@index([workflow_id], map: "idx_executions_workflow_id")
  @@schema("public")
}

model login_attempts {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String    @db.VarChar(255)
  ip_address   String    @db.Inet
  success      Boolean
  attempted_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([email, attempted_at], map: "idx_login_attempts_email")
  @@index([ip_address, attempted_at], map: "idx_login_attempts_ip")
  @@schema("public")
}

model metrics {
  id           Int       @id @default(autoincrement())
  metric_name  String    @db.VarChar(100)
  metric_value Decimal   @db.Decimal
  metric_type  String    @db.VarChar(50)
  tags         Json?
  timestamp    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([metric_name], map: "idx_metrics_name")
  @@index([timestamp], map: "idx_metrics_timestamp")
  @@schema("public")
}

model refresh_tokens {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  token_hash String    @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  revoked_at DateTime? @db.Timestamptz(6)
  User       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_hash], map: "unique_active_token")
  @@index([expires_at], map: "idx_refresh_tokens_expires_at")
  @@index([user_id], map: "idx_refresh_tokens_user_id")
  @@schema("public")
}

model schema_migrations {
  version     String    @id @db.VarChar(255)
  applied_at  DateTime? @default(now()) @db.Timestamptz(6)
  checksum    String?   @db.VarChar(64)
  description String?

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model security_logs {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_type String    @db.VarChar(100)
  user_id    String?   @db.Uuid
  email      String?   @db.VarChar(255)
  ip_address String    @db.Inet
  user_agent String?
  details    Json?
  success    Boolean
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  User       User?     @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([created_at(sort: Desc)], map: "idx_security_logs_created_at")
  @@index([email, created_at], map: "idx_security_logs_email")
  @@index([event_type, created_at], map: "idx_security_logs_event_type")
  @@index([ip_address, created_at], map: "idx_security_logs_ip")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model User {
  id                  String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String                 @unique @db.VarChar(255)
  password_hash       String                 @db.VarChar(255)
  full_name           String?                @db.VarChar(255)
  role                String?                @default("user") @db.VarChar(50)
  is_active           Boolean?               @default(true)
  last_login          DateTime?              @db.Timestamptz(6)
  created_at          DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?              @default(now()) @db.Timestamptz(6)
  integration_configs integration_configs[]
  refresh_tokens      refresh_tokens[]
  security_logs       security_logs[]
  clients             Client[]
  invoices            Invoice[]
  invoiceTemplates    InvoiceTemplate[]
  trades              Trade[]
  strategies          Strategy[]
  positions           Position[]
  alerts              Alert[]
  marketplaceListings StrategyMarketplace[]
  subscriptions       StrategySubscription[]
  reviews             StrategyReview[]
  payments            Payment[]
  Order               Order[]

  @@index([email], map: "idx_users_email")
  @@map("users")
  @@schema("public")
}

model workflows {
  id            String       @id @db.VarChar(36)
  name          String       @db.VarChar(255)
  description   String?
  active        Boolean?     @default(false)
  workflow_data Json
  version       Int?         @default(1)
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?    @default(now()) @db.Timestamptz(6)
  created_by    String?      @db.VarChar(255)
  tags          String[]
  executions    executions[]

  @@index([active], map: "idx_workflows_active")
  @@index([created_at], map: "idx_workflows_created_at")
  @@index([name], map: "idx_workflows_name")
  @@schema("public")
}

// Trading Models
model Trade {
  id              String    @id @default(uuid())
  userId          String    @map("user_id") @db.Uuid
  strategyId      String?   @map("strategy_id") @db.Uuid
  positionId      String?   @map("position_id") @db.Uuid
  symbol          String    @db.VarChar(50)
  side            String    @db.VarChar(10) // buy, sell
  type            String    @db.VarChar(20) // market, limit, stop, etc
  quantity        Decimal   @db.Decimal(20, 8)
  price           Decimal   @db.Decimal(20, 8)
  avgFillPrice    Decimal?  @map("avg_fill_price") @db.Decimal(20, 8)
  fees            Decimal?  @default(0) @db.Decimal(20, 8)
  pnl             Decimal?  @db.Decimal(20, 8) // profit and loss
  status          String    @default("pending") @db.VarChar(20) // pending, filled, cancelled, rejected
  exchange        String    @db.VarChar(50)
  exchangeOrderId String?   @map("exchange_order_id") @db.VarChar(255)
  metadata        Json?     @default("{}")
  executedAt      DateTime? @map("executed_at") @db.Timestamptz(6)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  user     User      @relation(fields: [userId], references: [id])
  strategy Strategy? @relation(fields: [strategyId], references: [id])
  position Position? @relation(fields: [positionId], references: [id])

  @@index([userId, createdAt(sort: Desc)])
  @@index([symbol, exchange])
  @@index([status])
  @@index([strategyId])
  @@map("trades")
  @@schema("trading")
}

model Strategy {
  id          String   @id @default(uuid())
  userId      String   @map("user_id") @db.Uuid
  name        String   @db.VarChar(255)
  description String?
  type        String   @db.VarChar(50) // dca, grid, arbitrage, etc
  status      String   @default("active") @db.VarChar(20) // active, paused, stopped
  config      Json // Strategy-specific configuration
  metadata    Json?    @default("{}")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  user                User                  @relation(fields: [userId], references: [id])
  trades              Trade[]
  positions           Position[]
  alerts              Alert[]
  marketplace         StrategyMarketplace[]
  StrategyTradingPair StrategyTradingPair[]
  Order               Order[]
  BacktestResult      BacktestResult[]

  @@index([userId])
  @@index([status])
  @@map("strategies")
  @@schema("trading")
}

// ============================================================================
// INVOICE STORAGE MODELS
// ============================================================================

model StoredInvoice {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoiceId     String    @map("invoice_id") @db.VarChar(255)
  invoiceNumber String    @map("invoice_number") @db.VarChar(100)
  fileName      String    @map("file_name") @db.VarChar(255)
  filePath      String    @map("file_path") @db.Text
  fileSize      BigInt    @map("file_size")
  mimeType      String    @default("application/pdf") @map("mime_type") @db.VarChar(100)
  storageType   String    @default("local") @map("storage_type") @db.VarChar(20)
  url           String?   @db.Text
  metadata      Json?     @db.Json
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt     DateTime? @map("expires_at") @db.Timestamptz(6)

  @@unique([invoiceId, fileName])
  @@index([invoiceId])
  @@index([invoiceNumber])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("stored_invoices")
  @@schema("financial")
}

model InvoiceDownloadToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique @db.VarChar(255)
  invoiceId String   @map("invoice_id") @db.VarChar(255)
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([token])
  @@index([expiresAt])
  @@map("invoice_download_tokens")
  @@schema("financial")
}

model InvoiceNumberingSequence {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  series        String    @default("DEFAULT") @db.VarChar(50)
  prefix        String    @db.VarChar(20)
  currentNumber Int       @default(0) @map("current_number")
  currentYear   Int       @map("current_year")
  format        String    @db.VarChar(50)
  yearlyReset   Boolean   @default(true) @map("yearly_reset")
  lastUsed      DateTime? @map("last_used") @db.Timestamptz(6)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([series, prefix, currentYear], map: "series_prefix_year")
  @@index([series])
  @@index([currentYear])
  @@map("invoice_numbering_sequences")
  @@schema("financial")
}

model Position {
  id            String    @id @default(uuid())
  userId        String    @map("user_id") @db.Uuid
  strategyId    String?   @map("strategy_id") @db.Uuid
  symbol        String    @db.VarChar(50)
  side          String    @db.VarChar(10) // long, short
  quantity      Decimal   @db.Decimal(20, 8)
  avgEntryPrice Decimal   @map("avg_entry_price") @db.Decimal(20, 8)
  avgExitPrice  Decimal?  @map("avg_exit_price") @db.Decimal(20, 8)
  realizedPnl   Decimal?  @default(0) @map("realized_pnl") @db.Decimal(20, 8)
  unrealizedPnl Decimal?  @default(0) @map("unrealized_pnl") @db.Decimal(20, 8)
  fees          Decimal?  @default(0) @db.Decimal(20, 8)
  status        String    @default("open") @db.VarChar(20) // open, closed
  exchange      String    @db.VarChar(50)
  openedAt      DateTime  @default(now()) @map("opened_at") @db.Timestamptz(6)
  closedAt      DateTime? @map("closed_at") @db.Timestamptz(6)
  metadata      Json?     @default("{}")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  user          User         @relation(fields: [userId], references: [id])
  strategy      Strategy?    @relation(fields: [strategyId], references: [id])
  trades        Trade[]
  Exchange      Exchange?    @relation(fields: [exchangeId], references: [id])
  exchangeId    String?
  TradingPair   TradingPair? @relation(fields: [tradingPairId], references: [id])
  tradingPairId String?
  Order         Order[]

  @@index([userId, status])
  @@index([symbol, exchange])
  @@index([strategyId])
  @@map("positions")
  @@schema("trading")
}

model Alert {
  id         String    @id @default(uuid())
  userId     String    @map("user_id") @db.Uuid
  strategyId String?   @map("strategy_id") @db.Uuid
  type       String    @db.VarChar(50) // price_alert, strategy_alert, system_alert
  severity   String    @default("info") @db.VarChar(20) // info, warning, error, critical
  title      String    @db.VarChar(255)
  message    String
  data       Json?     @default("{}")
  isRead     Boolean   @default(false) @map("is_read")
  readAt     DateTime? @map("read_at") @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  user     User      @relation(fields: [userId], references: [id])
  strategy Strategy? @relation(fields: [strategyId], references: [id])

  @@index([userId, isRead, createdAt(sort: Desc)])
  @@index([type])
  @@index([severity])
  @@map("alerts")
  @@schema("trading")
}

// Strategy Marketplace Models
model StrategyMarketplace {
  id               String   @id @default(uuid())
  strategyId       String   @map("strategy_id") @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  name             String   @db.VarChar(255)
  description      String?
  price            Decimal  @db.Decimal(10, 2)
  subscriptionType String   @map("subscription_type") @db.VarChar(20) // one-time, monthly, yearly
  performanceData  Json     @default("{}") @map("performance_data") // Historical performance metrics
  isVerified       Boolean  @default(false) @map("is_verified")
  rating           Decimal? @db.Decimal(3, 2)
  totalSubscribers Int      @default(0) @map("total_subscribers")
  totalRevenue     Decimal  @default(0) @map("total_revenue") @db.Decimal(20, 2)
  status           String   @default("active") @db.VarChar(20) // active, paused, archived
  tags             String[] @default([])
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  strategy      Strategy               @relation(fields: [strategyId], references: [id])
  user          User                   @relation(fields: [userId], references: [id])
  subscriptions StrategySubscription[]
  reviews       StrategyReview[]
  performance   StrategyPerformance[]

  @@index([status, rating])
  @@index([userId])
  @@index([tags])
  @@map("strategy_marketplace")
  @@schema("trading")
}

model StrategySubscription {
  id              String    @id @default(uuid())
  userId          String    @map("user_id") @db.Uuid
  marketplaceId   String    @map("marketplace_id") @db.Uuid
  tier            String    @db.VarChar(20) // basic, pro, institutional
  status          String    @default("active") @db.VarChar(20) // active, cancelled, expired
  startDate       DateTime  @default(now()) @map("start_date") @db.Timestamptz(6)
  expiresAt       DateTime  @map("expires_at") @db.Timestamptz(6)
  autoRenew       Boolean   @default(true) @map("auto_renew")
  paymentMethod   String?   @map("payment_method") @db.VarChar(50)
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("USD") @db.VarChar(3)
  lastPaymentDate DateTime? @map("last_payment_date") @db.Timestamptz(6)
  nextPaymentDate DateTime? @map("next_payment_date") @db.Timestamptz(6)
  metadata        Json?     @default("{}")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  user        User                @relation(fields: [userId], references: [id])
  marketplace StrategyMarketplace @relation(fields: [marketplaceId], references: [id])
  payments    Payment[]

  @@index([userId, status])
  @@index([expiresAt])
  @@index([marketplaceId])
  @@map("strategy_subscriptions")
  @@schema("trading")
}

model StrategyPerformance {
  id             String   @id @default(uuid())
  marketplaceId  String   @map("marketplace_id") @db.Uuid
  period         String   @db.VarChar(20) // daily, weekly, monthly
  startDate      DateTime @map("start_date") @db.Timestamptz(6)
  endDate        DateTime @map("end_date") @db.Timestamptz(6)
  totalTrades    Int      @default(0) @map("total_trades")
  winRate        Decimal  @default(0) @map("win_rate") @db.Decimal(5, 2)
  totalPnl       Decimal  @default(0) @map("total_pnl") @db.Decimal(20, 2)
  sharpeRatio    Decimal? @map("sharpe_ratio") @db.Decimal(10, 4)
  maxDrawdown    Decimal? @map("max_drawdown") @db.Decimal(10, 4)
  avgTradeReturn Decimal? @map("avg_trade_return") @db.Decimal(10, 4)
  metadata       Json?    @default("{}")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  marketplace StrategyMarketplace @relation(fields: [marketplaceId], references: [id])

  @@index([marketplaceId, period])
  @@index([startDate, endDate])
  @@map("strategy_performance")
  @@schema("trading")
}

model StrategyReview {
  id            String   @id @default(uuid())
  marketplaceId String   @map("marketplace_id") @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  rating        Int // 1-5 stars
  title         String?  @db.VarChar(255)
  comment       String?
  isVerified    Boolean  @default(false) @map("is_verified") // Verified purchase
  helpful       Int      @default(0) // Helpful votes
  unhelpful     Int      @default(0) // Unhelpful votes
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  marketplace StrategyMarketplace @relation(fields: [marketplaceId], references: [id])
  user        User                @relation(fields: [userId], references: [id])

  @@unique([marketplaceId, userId])
  @@index([marketplaceId, rating])
  @@map("strategy_reviews")
  @@schema("trading")
}

model Payment {
  id              String    @id @default(uuid())
  userId          String    @map("user_id") @db.Uuid
  subscriptionId  String?   @map("subscription_id") @db.Uuid
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("USD") @db.VarChar(3)
  status          String    @db.VarChar(20) // pending, completed, failed, refunded
  paymentMethod   String    @map("payment_method") @db.VarChar(50) // stripe, crypto, etc
  transactionId   String?   @map("transaction_id") @db.VarChar(255)
  paymentProvider String?   @map("payment_provider") @db.VarChar(50)
  description     String?
  metadata        Json?     @default("{}")
  processedAt     DateTime? @map("processed_at") @db.Timestamptz(6)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  user         User                  @relation(fields: [userId], references: [id])
  subscription StrategySubscription? @relation(fields: [subscriptionId], references: [id])

  @@index([userId, status])
  @@index([subscriptionId])
  @@index([transactionId])
  @@map("payments")
  @@schema("trading")
}

// ==========================================
// UNIVERSAL AI TAGGING SYSTEM SCHEMA
// ==========================================

model UniversalTag {
  id          String   @id @default(uuid())
  code        String   @unique @db.VarChar(100)
  name        String   @db.VarChar(255)
  description String?
  entityTypes String[] @map("entity_types")

  // Flexible pattern storage
  patterns Json?
  rules    Json?

  // AI/ML fields
  confidence     Float   @default(0.5)
  embeddingModel String? @map("embedding_model") @db.VarChar(50)

  // Hierarchy
  parentId String? @map("parent_id") @db.Uuid
  path     String  @db.Text
  level    Int     @default(0)

  // Metadata
  color    String? @db.VarChar(7)
  icon     String? @db.VarChar(50)
  isActive Boolean @default(true) @map("is_active")
  isSystem Boolean @default(false) @map("is_system")
  metadata Json?

  // Usage tracking
  usageCount  Int       @default(0) @map("usage_count")
  successRate Float     @default(0.0) @map("success_rate")
  lastUsed    DateTime? @map("last_used") @db.Timestamptz(6)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  parent      UniversalTag?  @relation("TagHierarchy", fields: [parentId], references: [id])
  children    UniversalTag[] @relation("TagHierarchy")
  entityTags  EntityTag[]
  tagPatterns TagPattern[]
  aiModels    TagAIModel[]
  metrics     TagMetrics[]

  @@index([code])
  @@index([parentId])
  @@index([path])
  @@index([isActive])
  @@map("universal_tags")
  @@schema("tagging")
}

model EntityTag {
  id         String @id @default(uuid())
  tagId      String @map("tag_id") @db.Uuid
  entityType String @map("entity_type") @db.VarChar(50)
  entityId   String @map("entity_id") @db.VarChar(255)

  // Tagging metadata
  method     String  @db.VarChar(20) // AI, PATTERN, RULE, MANUAL, INFERRED
  confidence Float   @default(0.5)
  appliedBy  String? @map("applied_by") @db.VarChar(255)

  // AI analysis results
  aiProvider  String? @map("ai_provider") @db.VarChar(50)
  aiModel     String? @map("ai_model") @db.VarChar(100)
  aiResponse  Json?   @map("ai_response")
  aiReasoning String? @map("ai_reasoning") @db.Text

  // User feedback
  isVerified Boolean   @default(false) @map("is_verified")
  verifiedBy String?   @map("verified_by") @db.VarChar(255)
  verifiedAt DateTime? @map("verified_at") @db.Timestamptz(6)
  feedback   String?   @db.Text
  isCorrect  Boolean?  @map("is_correct")

  // Cross-entity relationships
  sourceEntityType String? @map("source_entity_type") @db.VarChar(50)
  sourceEntityId   String? @map("source_entity_id") @db.VarChar(255)
  relationshipType String? @map("relationship_type") @db.VarChar(50)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  tag       UniversalTag      @relation(fields: [tagId], references: [id])
  auditLogs TaggingAuditLog[]

  @@unique([entityType, entityId, tagId])
  @@index([entityType, entityId])
  @@index([tagId])
  @@index([confidence])
  @@index([method])
  @@index([isVerified])
  @@index([createdAt])
  @@map("entity_tags")
  @@schema("tagging")
}

model TagPattern {
  id    String @id @default(uuid())
  tagId String @map("tag_id") @db.Uuid

  patternType   String @map("pattern_type") @db.VarChar(20) // KEYWORD, REGEX, SEMANTIC, NUMERIC, DATE, COMPOSITE
  pattern       Json
  weight        Float  @default(1.0)
  minConfidence Float  @default(0.5) @map("min_confidence")

  // Performance tracking
  matchCount   Int   @default(0) @map("match_count")
  successCount Int   @default(0) @map("success_count")
  accuracy     Float @default(0.0)

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  tag UniversalTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@index([tagId, patternType])
  @@index([isActive])
  @@map("tag_patterns")
  @@schema("tagging")
}

model EntityRelationship {
  id String @id @default(uuid())

  // Source entity
  sourceType String @map("source_type") @db.VarChar(50)
  sourceId   String @map("source_id") @db.VarChar(255)

  // Target entity
  targetType String @map("target_type") @db.VarChar(50)
  targetId   String @map("target_id") @db.VarChar(255)

  // Relationship details
  relationshipType String @map("relationship_type") @db.VarChar(50)
  confidence       Float
  discoveredBy     String @map("discovered_by") @db.VarChar(20) // AI, PATTERN, USER, SYSTEM
  metadata         Json?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([sourceType, sourceId, targetType, targetId, relationshipType])
  @@index([sourceType, sourceId])
  @@index([targetType, targetId])
  @@index([relationshipType])
  @@map("entity_relationships")
  @@schema("tagging")
}

model TaggingAuditLog {
  id String @id @default(uuid())

  // Operation details
  operation   String  @db.VarChar(50)
  entityType  String  @map("entity_type") @db.VarChar(50)
  entityId    String  @map("entity_id") @db.VarChar(255)
  entityTagId String? @map("entity_tag_id") @db.Uuid

  // Change details
  previousTags Json? @map("previous_tags")
  newTags      Json? @map("new_tags")
  changes      Json?

  // Context
  method    String? @db.VarChar(20)
  userId    String? @map("user_id") @db.VarChar(255)
  userEmail String? @map("user_email") @db.VarChar(255)
  ipAddress String? @map("ip_address") @db.Inet
  userAgent String? @map("user_agent") @db.Text

  // Results
  success          Boolean
  errorMessage     String? @map("error_message") @db.Text
  processingTimeMs Int?    @map("processing_time_ms")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  entityTag EntityTag? @relation(fields: [entityTagId], references: [id], onDelete: SetNull)

  @@index([entityType, entityId])
  @@index([operation])
  @@index([createdAt])
  @@index([userId])
  @@map("tagging_audit_log")
  @@schema("tagging")
}

model TagLearningFeedback {
  id String @id @default(uuid())

  // Entity reference
  entityType  String  @map("entity_type") @db.VarChar(50)
  entityId    String  @map("entity_id") @db.VarChar(255)
  entityTagId String? @map("entity_tag_id") @db.Uuid

  // Feedback details
  originalTagId    String? @map("original_tag_id") @db.Uuid
  suggestedTagId   String? @map("suggested_tag_id") @db.Uuid
  isCorrect        Boolean @map("is_correct")
  confidenceImpact Float?  @map("confidence_impact")

  // User info
  userId       String  @map("user_id") @db.VarChar(255)
  userRole     String? @map("user_role") @db.VarChar(50)
  feedbackText String? @map("feedback_text") @db.Text

  // Processing
  isProcessed    Boolean   @default(false) @map("is_processed")
  processedAt    DateTime? @map("processed_at") @db.Timestamptz(6)
  appliedChanges Json?     @map("applied_changes")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([entityType, entityId])
  @@index([isProcessed])
  @@index([createdAt])
  @@map("tag_learning_feedback")
  @@schema("tagging")
}

model TagMetrics {
  id    String @id @default(uuid())
  tagId String @map("tag_id") @db.Uuid

  // Time period
  periodStart DateTime @map("period_start") @db.Date
  periodEnd   DateTime @map("period_end") @db.Date
  periodType  String   @map("period_type") @db.VarChar(20) // DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY

  // Usage metrics
  usageCount     Int @default(0) @map("usage_count")
  uniqueEntities Int @default(0) @map("unique_entities")

  // Accuracy metrics
  verifiedCount Int    @default(0) @map("verified_count")
  correctCount  Int    @default(0) @map("correct_count")
  accuracyRate  Float? @map("accuracy_rate")

  // Performance metrics
  avgConfidence   Float? @map("avg_confidence")
  avgProcessingMs Float? @map("avg_processing_time_ms")

  // Method breakdown
  aiCount      Int @default(0) @map("ai_count")
  patternCount Int @default(0) @map("pattern_count")
  manualCount  Int @default(0) @map("manual_count")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  tag UniversalTag @relation(fields: [tagId], references: [id])

  @@unique([tagId, periodStart, periodType])
  @@index([tagId])
  @@index([periodStart, periodType])
  @@map("tag_metrics")
  @@schema("tagging")
}

model TagAIModel {
  id    String @id @default(uuid())
  tagId String @map("tag_id") @db.Uuid

  provider     String @db.VarChar(50) // openai, anthropic, local
  modelName    String @map("model_name") @db.VarChar(100)
  modelVersion String @map("model_version") @db.VarChar(50)

  // Configuration
  config        Json?
  minConfidence Float @default(0.7) @map("min_confidence")

  // Performance tracking
  totalPredictions Int    @default(0) @map("total_predictions")
  successRate      Float  @default(0.0) @map("success_rate")
  avgLatencyMs     Float? @map("avg_latency_ms")

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  tag UniversalTag @relation(fields: [tagId], references: [id])

  @@index([tagId])
  @@index([provider])
  @@index([isActive])
  @@map("tag_ai_models")
  @@schema("tagging")
}

model TagImportJob {
  id               String    @id @default(uuid())
  jobType          String    @map("job_type") @db.VarChar(20) // csv, api, migration
  status           String    @default("pending") @db.VarChar(20) // pending, processing, completed, failed
  config           Json
  totalRecords     Int?      @map("total_records")
  processedRecords Int       @default(0) @map("processed_records")
  successCount     Int       @default(0) @map("success_count")
  errorCount       Int       @default(0) @map("error_count")
  errors           Json?
  startedAt        DateTime? @map("started_at") @db.Timestamptz(6)
  completedAt      DateTime? @map("completed_at") @db.Timestamptz(6)
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  createdBy        String    @map("created_by") @db.VarChar(255)

  @@index([status])
  @@index([jobType])
  @@index([createdAt])
  @@map("tag_import_jobs")
  @@schema("tagging")
}

// ============================================================================
// TRADING MODULE - Additional Models
// ============================================================================

model Exchange {
  id           String   @id @default(uuid())
  name         String   @unique @db.VarChar(50)
  displayName  String   @map("display_name") @db.VarChar(100)
  apiKey       String?  @map("api_key") @db.Text
  apiSecret    String?  @map("api_secret") @db.Text
  testnet      Boolean  @default(true)
  isActive     Boolean  @default(true) @map("is_active")
  maxPositions Int?     @default(10) @map("max_positions")
  riskLimit    Decimal? @default(0.02) @map("risk_limit") @db.Decimal(5, 4)
  metadata     Json?    @default("{}")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  tradingPairs TradingPair[]
  positions    Position[]
  orders       Order[]
  marketData   MarketData[]

  @@index([name])
  @@index([isActive])
  @@map("exchanges")
  @@schema("trading")
}

model TradingPair {
  id                String   @id @default(uuid())
  exchangeId        String   @map("exchange_id") @db.Uuid
  symbol            String   @db.VarChar(50)
  baseAsset         String   @map("base_asset") @db.VarChar(20)
  quoteAsset        String   @map("quote_asset") @db.VarChar(20)
  isActive          Boolean  @default(true) @map("is_active")
  minQuantity       Decimal  @map("min_quantity") @db.Decimal(20, 8)
  maxQuantity       Decimal  @map("max_quantity") @db.Decimal(20, 8)
  stepSize          Decimal  @map("step_size") @db.Decimal(20, 8)
  minNotional       Decimal  @map("min_notional") @db.Decimal(20, 8)
  pricePrecision    Int      @map("price_precision")
  quantityPrecision Int      @map("quantity_precision")
  metadata          Json?    @default("{}")
  lastUpdated       DateTime @default(now()) @map("last_updated") @db.Timestamptz(6)
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  exchange   Exchange              @relation(fields: [exchangeId], references: [id])
  strategies StrategyTradingPair[]
  positions  Position[]
  orders     Order[]
  marketData MarketData[]

  @@unique([exchangeId, symbol])
  @@index([exchangeId])
  @@index([symbol])
  @@index([baseAsset, quoteAsset])
  @@map("trading_pairs")
  @@schema("trading")
}

model StrategyTradingPair {
  id              String   @id @default(uuid())
  strategyId      String   @map("strategy_id") @db.Uuid
  tradingPairId   String   @map("trading_pair_id") @db.Uuid
  isActive        Boolean  @default(true) @map("is_active")
  allocation      Decimal  @db.Decimal(5, 4) // Percentage allocation
  maxPositionSize Decimal? @map("max_position_size") @db.Decimal(20, 8)
  metadata        Json?    @default("{}")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  strategy    Strategy    @relation(fields: [strategyId], references: [id])
  tradingPair TradingPair @relation(fields: [tradingPairId], references: [id])

  @@unique([strategyId, tradingPairId])
  @@index([strategyId])
  @@index([tradingPairId])
  @@map("strategy_trading_pairs")
  @@schema("trading")
}

model Order {
  id            String  @id @default(uuid())
  userId        String? @map("user_id") @db.Uuid
  exchangeId    String  @map("exchange_id") @db.Uuid
  tradingPairId String  @map("trading_pair_id") @db.Uuid
  strategyId    String? @map("strategy_id") @db.Uuid
  positionId    String? @map("position_id") @db.Uuid

  exchangeOrderId String? @map("exchange_order_id") @db.VarChar(255)
  side            String  @db.VarChar(10) // BUY, SELL
  type            String  @db.VarChar(20) // MARKET, LIMIT, STOP, STOP_LIMIT
  status          String  @default("PENDING") @db.VarChar(20) // PENDING, FILLED, PARTIALLY_FILLED, CANCELLED, REJECTED

  quantity       Decimal  @db.Decimal(20, 8)
  price          Decimal  @db.Decimal(20, 8)
  avgFillPrice   Decimal? @map("avg_fill_price") @db.Decimal(20, 8)
  filledQuantity Decimal  @default(0) @map("filled_quantity") @db.Decimal(20, 8)
  fees           Decimal  @default(0) @db.Decimal(20, 8)

  stopPrice   Decimal? @map("stop_price") @db.Decimal(20, 8)
  timeInForce String   @default("GTC") @map("time_in_force") @db.VarChar(10) // GTC, IOC, FOK

  metadata   Json?     @default("{}")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  executedAt DateTime? @map("executed_at") @db.Timestamptz(6)

  // Relations
  user        User?       @relation(fields: [userId], references: [id])
  exchange    Exchange    @relation(fields: [exchangeId], references: [id])
  tradingPair TradingPair @relation(fields: [tradingPairId], references: [id])
  strategy    Strategy?   @relation(fields: [strategyId], references: [id])
  position    Position?   @relation(fields: [positionId], references: [id])

  @@index([userId])
  @@index([exchangeId])
  @@index([tradingPairId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
  @@schema("trading")
}

model MarketData {
  id            String @id @default(uuid())
  exchangeId    String @map("exchange_id") @db.Uuid
  tradingPairId String @map("trading_pair_id") @db.Uuid

  price            Decimal  @db.Decimal(20, 8)
  volume           Decimal  @db.Decimal(20, 8)
  high24h          Decimal? @map("high_24h") @db.Decimal(20, 8)
  low24h           Decimal? @map("low_24h") @db.Decimal(20, 8)
  change24h        Decimal? @map("change_24h") @db.Decimal(20, 8)
  changePercent24h Decimal? @map("change_percent_24h") @db.Decimal(10, 4)

  bidPrice    Decimal? @map("bid_price") @db.Decimal(20, 8)
  bidQuantity Decimal? @map("bid_quantity") @db.Decimal(20, 8)
  askPrice    Decimal? @map("ask_price") @db.Decimal(20, 8)
  askQuantity Decimal? @map("ask_quantity") @db.Decimal(20, 8)

  timestamp DateTime @db.Timestamptz(6)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  exchange    Exchange    @relation(fields: [exchangeId], references: [id])
  tradingPair TradingPair @relation(fields: [tradingPairId], references: [id])

  @@index([exchangeId, tradingPairId, timestamp])
  @@index([timestamp])
  @@map("market_data")
  @@schema("trading")
}

model BacktestResult {
  id         String @id @default(uuid())
  strategyId String @map("strategy_id") @db.Uuid
  name       String @db.VarChar(255)

  startDate      DateTime @map("start_date") @db.Timestamptz(6)
  endDate        DateTime @map("end_date") @db.Timestamptz(6)
  initialCapital Decimal  @map("initial_capital") @db.Decimal(20, 8)
  finalCapital   Decimal  @map("final_capital") @db.Decimal(20, 8)

  totalReturn   Decimal @map("total_return") @db.Decimal(20, 8)
  totalTrades   Int     @map("total_trades")
  winningTrades Int     @map("winning_trades")
  losingTrades  Int     @map("losing_trades")
  winRate       Decimal @map("win_rate") @db.Decimal(5, 4)

  sharpeRatio  Decimal? @map("sharpe_ratio") @db.Decimal(10, 4)
  sortinoRatio Decimal? @map("sortino_ratio") @db.Decimal(10, 4)
  maxDrawdown  Decimal  @map("max_drawdown") @db.Decimal(20, 8)
  profitFactor Decimal? @map("profit_factor") @db.Decimal(10, 4)

  parameters Json // Backtest configuration
  metadata   Json? // Detailed results including trades, equity curve, etc.

  completedAt DateTime @map("completed_at") @db.Timestamptz(6)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  strategy Strategy @relation(fields: [strategyId], references: [id])

  @@index([strategyId])
  @@index([createdAt])
  @@map("backtest_results")
  @@schema("trading")
}
