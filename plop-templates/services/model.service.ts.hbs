import { prisma } from '../lib/prisma';
import { 
  {{pascalCase model}}, 
  Create{{pascalCase model}}, 
  Update{{pascalCase model}},
  {{pascalCase model}}Query,
  {{pascalCase model}}WithRelations
} from '../types/{{kebabCase model}}.types';
import { Prisma } from '@prisma/client';
import { AppError } from '../utils/errors';
import logger from '../utils/logger';

{{#if schema}}
const MODEL_NAME = Prisma.ModelName.{{pascalCase model}};
const TABLE_NAME = '{{schema}}.{{snakeCase model}}s';
{{else}}
const MODEL_NAME = Prisma.ModelName.{{pascalCase model}};
{{/if}}

export class {{pascalCase model}}Service {
  /**
   * Get all {{lowerCase model}}s with pagination and filtering
   */
  async getAll(query: {{pascalCase model}}Query, userId?: string) {
    try {
      const { page, limit, search, sortBy = 'createdAt', sortOrder = 'desc' } = query;
      const skip = (page - 1) * limit;

      // Build where clause
      const where: Prisma.{{pascalCase model}}WhereInput = {
        {{#if (or (eq model 'Client') (eq model 'Invoice') (eq model 'Trade'))}}
        ...(userId && { userId }),
        {{/if}}
        {{#if (eq model 'Invoice')}}
        ...(query.status && { status: query.status }),
        ...(query.clientId && { clientId: query.clientId }),
        {{else if (eq model 'Trade')}}
        ...(query.symbol && { symbol: { contains: query.symbol, mode: 'insensitive' } }),
        ...(query.status && { status: query.status }),
        ...(query.strategyId && { strategyId: query.strategyId }),
        {{/if}}
        ...(search && {
          OR: [
            {{#if (eq model 'Client')}}
            { name: { contains: search, mode: 'insensitive' } },
            { email: { contains: search, mode: 'insensitive' } },
            { taxId: { contains: search, mode: 'insensitive' } },
            {{else if (eq model 'Invoice')}}
            { invoiceNumber: { contains: search, mode: 'insensitive' } },
            { notes: { contains: search, mode: 'insensitive' } },
            {{else if (eq model 'Trade')}}
            { symbol: { contains: search, mode: 'insensitive' } },
            { orderId: { contains: search, mode: 'insensitive' } },
            {{else}}
            { name: { contains: search, mode: 'insensitive' } },
            {{/if}}
          ],
        }),
      };

      // Execute queries in parallel
      const [items, total] = await Promise.all([
        prisma.{{camelCase model}}.findMany({
          where,
          skip,
          take: limit,
          orderBy: { [sortBy]: sortOrder },
          {{#if hasRelations}}
          include: {
            {{#if modelInfo}}
            {{#each modelInfo.relations}}
            {{this.name}}: true,
            {{/each}}
            {{else}}
            {{#if (eq model 'Client')}}
            invoices: {
              take: 5,
              orderBy: { createdAt: 'desc' },
            },
            {{else if (eq model 'Invoice')}}
            client: true,
            items: true,
            {{else if (eq model 'Trade')}}
            position: true,
            strategy: true,
            {{/if}}
            {{/if}}
          },
          {{/if}}
        }),
        prisma.{{camelCase model}}.count({ where }),
      ]);

      return {
        items,
        total,
        page,
        limit,
        totalPages: Math.ceil(total / limit),
      };
    } catch (error) {
      logger.error('Error in {{pascalCase model}}Service.getAll:', error);
      throw new AppError('Failed to fetch {{lowerCase model}}s', 500);
    }
  }

  /**
   * Get a single {{lowerCase model}} by ID
   */
  async getById(id: string, userId?: string): Promise<{{pascalCase model}}WithRelations | null> {
    try {
      const {{camelCase model}} = await prisma.{{camelCase model}}.findFirst({
        where: { 
          id,
          {{#if (or (eq model 'Client') (eq model 'Invoice') (eq model 'Trade'))}}
          ...(userId && { userId }),
          {{/if}}
        },
        {{#if hasRelations}}
        include: {
          {{#if modelInfo}}
          {{#each modelInfo.relations}}
          {{this.name}}: true,
          {{/each}}
          {{else}}
          {{#if (eq model 'Client')}}
          invoices: true,
          user: true,
          {{else if (eq model 'Invoice')}}
          client: true,
          items: true,
          user: true,
          {{else if (eq model 'Trade')}}
          position: true,
          strategy: true,
          user: true,
          {{/if}}
          {{/if}}
        },
        {{/if}}
      });

      if (!{{camelCase model}}) {
        throw new AppError('{{pascalCase model}} not found', 404);
      }

      return {{camelCase model}};
    } catch (error) {
      if (error instanceof AppError) throw error;
      logger.error('Error in {{pascalCase model}}Service.getById:', error);
      throw new AppError('Failed to fetch {{lowerCase model}}', 500);
    }
  }

  /**
   * Create a new {{lowerCase model}}
   */
  async create(data: Create{{pascalCase model}}, userId?: string): Promise<{{pascalCase model}}> {
    try {
      {{#if (eq model 'Invoice')}}
      // Generate invoice number if not provided
      if (!data.invoiceNumber && data.sequenceId) {
        const sequence = await prisma.invoiceSequence.findUnique({
          where: { id: data.sequenceId },
        });

        if (sequence) {
          const paddedNumber = sequence.nextNumber.toString().padStart(sequence.padding, '0');
          data.invoiceNumber = `${sequence.prefix}${paddedNumber}`;

          // Update sequence
          await prisma.invoiceSequence.update({
            where: { id: sequence.id },
            data: { nextNumber: sequence.nextNumber + 1 },
          });
        }
      }
      {{/if}}

      const {{camelCase model}} = await prisma.{{camelCase model}}.create({
        data: {
          ...data,
          {{#if (or (eq model 'Client') (eq model 'Invoice') (eq model 'Trade'))}}
          ...(userId && { userId }),
          {{/if}}
        },
      });

      logger.info(`{{pascalCase model}} created: ${ {{camelCase model}}.id }`);
      return {{camelCase model}};
    } catch (error) {
      logger.error('Error in {{pascalCase model}}Service.create:', error);
      if (error.code === 'P2002') {
        throw new AppError('{{pascalCase model}} with this data already exists', 409);
      }
      throw new AppError('Failed to create {{lowerCase model}}', 500);
    }
  }

  /**
   * Update a {{lowerCase model}}
   */
  async update(id: string, data: Update{{pascalCase model}}, userId?: string): Promise<{{pascalCase model}}> {
    try {
      // Check if exists and user has permission
      const existing = await this.getById(id, userId);
      if (!existing) {
        throw new AppError('{{pascalCase model}} not found', 404);
      }

      const {{camelCase model}} = await prisma.{{camelCase model}}.update({
        where: { id },
        data: {
          ...data,
          id: undefined, // Remove id from data
        },
      });

      logger.info(`{{pascalCase model}} updated: ${id}`);
      return {{camelCase model}};
    } catch (error) {
      if (error instanceof AppError) throw error;
      logger.error('Error in {{pascalCase model}}Service.update:', error);
      throw new AppError('Failed to update {{lowerCase model}}', 500);
    }
  }

  /**
   * Delete a {{lowerCase model}}
   */
  async delete(id: string, userId?: string): Promise<void> {
    try {
      // Check if exists and user has permission
      const existing = await this.getById(id, userId);
      if (!existing) {
        throw new AppError('{{pascalCase model}} not found', 404);
      }

      {{#if (eq model 'Client')}}
      // Check if client has invoices
      const invoiceCount = await prisma.invoice.count({
        where: { clientId: id },
      });

      if (invoiceCount > 0) {
        throw new AppError('Cannot delete client with existing invoices', 400);
      }
      {{else if (eq model 'Invoice')}}
      // Only allow deletion of draft invoices
      if (existing.status !== 'draft') {
        throw new AppError('Only draft invoices can be deleted', 400);
      }
      {{/if}}

      await prisma.{{camelCase model}}.delete({
        where: { id },
      });

      logger.info(`{{pascalCase model}} deleted: ${id}`);
    } catch (error) {
      if (error instanceof AppError) throw error;
      logger.error('Error in {{pascalCase model}}Service.delete:', error);
      throw new AppError('Failed to delete {{lowerCase model}}', 500);
    }
  }

  {{#if (includes methods 'search')}}
  /**
   * Search {{lowerCase model}}s
   */
  async search(query: string, userId?: string) {
    try {
      const {{camelCase model}}s = await prisma.{{camelCase model}}.findMany({
        where: {
          {{#if (or (eq model 'Client') (eq model 'Invoice') (eq model 'Trade'))}}
          ...(userId && { userId }),
          {{/if}}
          OR: [
            {{#if (eq model 'Client')}}
            { name: { contains: query, mode: 'insensitive' } },
            { email: { contains: query, mode: 'insensitive' } },
            { taxId: { contains: query, mode: 'insensitive' } },
            {{else if (eq model 'Invoice')}}
            { invoiceNumber: { contains: query, mode: 'insensitive' } },
            { notes: { contains: query, mode: 'insensitive' } },
            {{else if (eq model 'Trade')}}
            { symbol: { contains: query, mode: 'insensitive' } },
            { orderId: { contains: query, mode: 'insensitive' } },
            {{else}}
            { name: { contains: query, mode: 'insensitive' } },
            {{/if}}
          ],
        },
        take: 10,
      });

      return {{camelCase model}}s;
    } catch (error) {
      logger.error('Error in {{pascalCase model}}Service.search:', error);
      throw new AppError('Failed to search {{lowerCase model}}s', 500);
    }
  }
  {{/if}}

  {{#if (includes methods 'bulkCreate')}}
  /**
   * Bulk create {{lowerCase model}}s
   */
  async bulkCreate(data: Create{{pascalCase model}}[], userId?: string): Promise<number> {
    try {
      const result = await prisma.{{camelCase model}}.createMany({
        data: data.map(item => ({
          ...item,
          {{#if (or (eq model 'Client') (eq model 'Invoice') (eq model 'Trade'))}}
          ...(userId && { userId }),
          {{/if}}
        })),
        skipDuplicates: true,
      });

      logger.info(`Bulk created ${result.count} {{lowerCase model}}s`);
      return result.count;
    } catch (error) {
      logger.error('Error in {{pascalCase model}}Service.bulkCreate:', error);
      throw new AppError('Failed to bulk create {{lowerCase model}}s', 500);
    }
  }
  {{/if}}

  {{#if (includes methods 'bulkDelete')}}
  /**
   * Bulk delete {{lowerCase model}}s
   */
  async bulkDelete(ids: string[], userId?: string): Promise<number> {
    try {
      const result = await prisma.{{camelCase model}}.deleteMany({
        where: {
          id: { in: ids },
          {{#if (or (eq model 'Client') (eq model 'Invoice') (eq model 'Trade'))}}
          ...(userId && { userId }),
          {{/if}}
        },
      });

      logger.info(`Bulk deleted ${result.count} {{lowerCase model}}s`);
      return result.count;
    } catch (error) {
      logger.error('Error in {{pascalCase model}}Service.bulkDelete:', error);
      throw new AppError('Failed to bulk delete {{lowerCase model}}s', 500);
    }
  }
  {{/if}}
}

// Export singleton instance
export const {{camelCase model}}Service = new {{pascalCase model}}Service();