{
  "name": "AI Service",
  "description": "Multi-module AI service with financial, trading, and document intelligence",
  "version": "2.0.0",
  "settings": {
    "language": "es-en",
    "framework": "express-typescript",
    "database": "postgresql-prisma",
    "defaultPersona": "backend",
    "workflowType": "github-first",
    "autoFlags": {
      "database": ["--validate", "--safe-mode"],
      "financial": ["--persona-security", "--validate"],
      "trading": ["--persona-performance", "--think"],
      "frontend": ["--persona-frontend", "--magic"]
    },
    "qualityGates": {
      "tests": "required",
      "types": "strict",
      "build": "required",
      "health": "required"
    }
  },
  "github": {
    "repository": "christianlb/ai-service",
    "branch": "main",
    "workflows": {
      "ci": ".github/workflows/ci.yml",
      "deploy": ".github/workflows/deploy-production.yml",
      "deployNas": ".github/workflows/deploy-production-nas.yml",
      "dockerPublish": ".github/workflows/docker-publish.yml"
    },
    "qualityChecks": {
      "required": ["tests", "types", "build", "lint"],
      "blocking": true
    }
  },
  "development": {
    "methodology": "test-driven",
    "workflow": [
      "analyze-requirements",
      "write-tests-first",
      "implement-solution",
      "validate-types",
      "ensure-build",
      "health-check",
      "commit-and-push"
    ],
    "commands": {
      "dev": "make dev-up && make dev-status",
      "test": "npm test && npm run test:integration",
      "build": "npm run build && npm run typecheck",
      "health": "make health && make check-db",
      "deploy": "make deploy-safe"
    }
  },
  "quality": {
    "coverage": {
      "minimum": 80,
      "target": 90
    },
    "typeScript": {
      "strict": true,
      "noImplicitAny": true,
      "exactOptionalPropertyTypes": true
    },
    "performance": {
      "responseTime": "< 200ms",
      "memoryUsage": "< 512MB",
      "errorRate": "< 1%"
    }
  },
  "performance": {
    "tokenEfficiency": {
      "enabled": true,
      "autoCompress": true,
      "threshold": 0.75
    },
    "caching": {
      "enabled": true,
      "ttl": 3600,
      "maxSize": "100MB"
    },
    "resourceLimits": {
      "maxTokensPerOperation": 30000,
      "warningThreshold": 0.8,
      "parallelOperations": 3
    }
  },
  "mcp": {
    "enabled": true,
    "autoDetect": true,
    "servers": {
      "context7": {
        "enabled": true,
        "priority": "high",
        "use": ["prisma", "react", "express", "typescript"],
        "libraries": ["prisma", "react", "express", "typescript", "tailwindcss", "tanstack-query"]
      },
      "sequential": {
        "enabled": true,
        "priority": "medium",
        "use": ["complex-analysis", "trading-strategies", "performance"],
        "triggers": ["complex-analysis", "multi-step", "--think", "--think-hard"]
      },
      "magic": {
        "enabled": true,
        "priority": "high",
        "use": ["ui-components", "dashboard", "frontend"]
      }
    },
    "specialists": {
      "qa-specialist": "Testing, quality assurance, E2E testing",
      "ui-specialist": "Frontend development, React, Tailwind CSS",
      "crud-specialist": "CRUD operations, Prisma, API endpoints",
      "prisma-specialist": "Database schema, migrations, optimization",
      "devops-specialist": "Docker, CI/CD, deployment automation",
      "security-specialist": "Vulnerability assessment, OWASP compliance",
      "architecture-consultant": "System design, technical decisions",
      "financial-specialist": "Banking integration, invoicing, transactions",
      "trading-specialist": "Trading strategies, market analysis, exchanges",
      "agent-optimizer": "Agent configuration optimization, learning integration"
    }
  },
  "intelligentMakeIntegration": {
    "enabled": true,
    "autoAnalyzeIntents": true,
    "confidenceThresholds": {
      "autoExecute": 0.9,
      "suggest": 0.6,
      "showOptions": 0.3
    },
    "safeCommands": ["dev-status", "db-migrate-status", "check-db", "health", "trading-status", "mcp-status", "auth-token"],
    "dangerousCommands": ["db-reset", "dev-down", "production-deploy"],
    "workflowPatterns": {
      "database": ["dev-status", "check-db", "db-migrate-status", "db-backup", "db-migrate"],
      "trading": ["dev-status", "trading-status", "trading-up"],
      "quality": ["test", "typecheck", "lint", "health"],
      "deployment": ["test", "health", "db-backup", "deploy"]
    },
    "naturalLanguageMappings": {
      "start": ["dev-up"],
      "status": ["dev-status"], 
      "test": ["test"],
      "deploy": ["health", "test", "deploy"],
      "database": ["db-migrate-status", "check-db"],
      "trading": ["trading-status"]
    }
  },
  "customCommands": {
    "/db-safe": {
      "description": "Safe database operations with automatic backup",
      "flags": ["--validate", "--safe-mode", "--persona-backend"],
      "preCommand": "make db-backup"
    },
    "/financial-audit": {
      "description": "Comprehensive financial module audit",
      "flags": ["--persona-security", "--think-hard", "--validate"],
      "focus": ["src/services/financial", "prisma/schema.prisma"]
    },
    "/trading-optimize": {
      "description": "Optimize trading strategies and performance",
      "flags": ["--persona-performance", "--think", "--seq"],
      "focus": ["src/services/trading", "src/routes/trading.ts"]
    },
    "/frontend-enhance": {
      "description": "Enhance frontend components and UX",
      "flags": ["--persona-frontend", "--magic", "--c7"],
      "focus": ["frontend/src"]
    },
    "/orchestrate-analysis": {
      "description": "Multi-agent comprehensive analysis and requirements gathering",
      "flags": ["--think-hard", "--parallel", "--validate"],
      "agents": ["architecture-consultant", "security-specialist", "qa-specialist", "domain-specialists"],
      "output": "docs/analysis/"
    },
    "/orchestrate-implement": {
      "description": "Coordinated multi-agent implementation from analysis documents",
      "flags": ["--parallel", "--validate", "--quality-gates"],
      "agents": ["crud-specialist", "ui-specialist", "qa-specialist", "devops-specialist"],
      "phases": ["foundation", "core", "enhancement"]
    },
    "/architect-orchestrate": {
      "description": "Architecture-led solution design with specialist coordination",
      "flags": ["--think-hard", "--validate", "--progressive"],
      "lead": "architecture-consultant",
      "workflow": ["analysis", "consultation", "blueprint", "implementation"]
    },
    "/agent-optimize": {
      "description": "Optimize agent configurations based on conversation learnings",
      "flags": ["--auto-learn", "--validate", "--backup"],
      "target": "~/.claude/agent-configs/",
      "modes": ["explicit", "auto-learn", "targeted"]
    },
    "/tdd": {
      "description": "Test-driven development workflow",
      "workflow": [
        "analyze-requirements",
        "write-failing-test",
        "implement-minimal-solution",
        "refactor-and-improve",
        "validate-all-checks"
      ],
      "flags": ["--validate", "--think"]
    },
    "/github-flow": {
      "description": "Complete GitHub workflow",
      "workflow": [
        "create-feature-branch",
        "implement-with-tests",
        "run-quality-checks",
        "create-pull-request",
        "merge-after-approval"
      ]
    },
    "/health-check": {
      "description": "Complete health validation",
      "checks": [
        "tests-passing",
        "types-valid",
        "build-successful",
        "services-healthy",
        "dependencies-updated"
      ],
      "commands": [
        "npm test",
        "npm run typecheck",
        "npm run build",
        "make health",
        "npm outdated"
      ]
    }
  },
  "workflows": {
    "pre-commit": {
      "autoRun": ["make db-migrate-status", "npm run lint", "npm run test"],
      "required": true
    },
    "post-migration": {
      "autoRun": ["make db-backup", "make dev-refresh"],
      "required": true
    }
  },
  "projectStructure": {
    "src": {
      "services": "Business logic with tests",
      "routes": "API endpoints with integration tests",
      "types": "TypeScript definitions",
      "utils": "Utility functions with unit tests"
    },
    "tests": {
      "unit": "__tests__/unit",
      "integration": "__tests__/integration",
      "e2e": "__tests__/e2e"
    },
    "frontend": {
      "src": "React components with tests",
      "tests": "Component and hook tests"
    }
  },
  "projectPaths": {
    "services": "src/services",
    "routes": "src/routes",
    "types": "src/types",
    "frontend": "frontend/src",
    "database": "prisma",
    "docs": "docs"
  },
  "safetyRules": {
    "blockCommands": [
      "docker-compose down -v",
      "DROP SCHEMA",
      "DROP TABLE",
      "prisma db push --force-reset"
    ],
    "requireConfirmation": [
      "prisma migrate reset",
      "docker system prune",
      "rm -rf"
    ],
    "preDeploy": [
      "tests-must-pass",
      "types-must-validate",
      "build-must-succeed",
      "health-checks-must-pass"
    ],
    "forbidden": [
      "skip-tests",
      "ignore-types",
      "force-push-main",
      "deploy-without-checks"
    ]
  }
}