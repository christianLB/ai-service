# Makefile.production - Comandos espec√≠ficos para producci√≥n
# ADVERTENCIA: Estos comandos afectan PRODUCCI√ìN. Usar con cuidado.

include .make.env

# Variables de producci√≥n
PROD_HOST := 192.168.1.11
PROD_USER := k2600x
PROD_PATH := /volume1/docker/ai-service
PROD_DB := ai_service
PROD_DB_USER := ai_user
PROD_CONTAINER := ai-postgres
BACKUP_DIR := $(PROD_PATH)/backups

# SSH con autenticaci√≥n
ifdef SSHPASS
    export SSHPASS
    SSH := sshpass -e ssh
    SCP := sshpass -e scp
else
    SSH := ssh
    SCP := scp
endif

# Colores
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m

# =============================================================================
# üî¥ COMANDOS DE PRODUCCI√ìN - Reset y Recovery
# =============================================================================

.PHONY: prod-reset-db
prod-reset-db: ## Reset completo de BD en PRODUCCI√ìN (con confirmaci√≥n)
	@echo "$(RED)‚ö†Ô∏è  ADVERTENCIA: Esto ELIMINAR√Å TODOS LOS DATOS en PRODUCCI√ìN$(NC)"
	@echo "$(RED)Host: $(PROD_HOST)$(NC)"
	@echo "$(RED)Base de datos: $(PROD_DB)$(NC)"
	@echo "$(YELLOW)¬øEst√°s ABSOLUTAMENTE SEGURO? Escribe 'SI ELIMINAR TODO' para continuar:$(NC)"
	@read CONFIRM && [ "$$CONFIRM" = "SI ELIMINAR TODO" ] || (echo "$(GREEN)Cancelado$(NC)" && exit 1)
	@$(MAKE) prod-backup
	@echo "$(YELLOW)Ejecutando reset...$(NC)"
	@$(MAKE) prod-reset-db-force

.PHONY: prod-reset-db-force
prod-reset-db-force: ## Reset sin confirmaci√≥n (solo para emergencias)
	@echo "$(RED)üî• RESET FORZADO EN PRODUCCI√ìN$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker stop ai-service ai-postgres ai-redis || true"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S rm -rf $(PROD_PATH)/postgres-data/*"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker start ai-postgres"
	@sleep 10
	@$(MAKE) prod-create-db
	@$(MAKE) prod-apply-schema
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker start ai-redis ai-service"
	@sleep 10
	@$(MAKE) prod-health

.PHONY: prod-create-db
prod-create-db: ## Crear base de datos en producci√≥n si no existe
	@echo "$(BLUE)üìä Creando base de datos si no existe...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker exec $(PROD_CONTAINER) psql -U $(PROD_DB_USER) -d template1 -tc \"SELECT 1 FROM pg_database WHERE datname = '$(PROD_DB)'\" | grep -q 1 || echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker exec $(PROD_CONTAINER) psql -U $(PROD_DB_USER) -d template1 -c 'CREATE DATABASE $(PROD_DB);'"
	@echo "$(GREEN)‚úì Base de datos verificada/creada$(NC)"

.PHONY: prod-apply-schema
prod-apply-schema: ## Aplicar schema completo en producci√≥n
	@echo "$(BLUE)üìù Aplicando schema en producci√≥n...$(NC)"
	@$(SCP) scripts/complete-production-schema.sql $(PROD_USER)@$(PROD_HOST):/tmp/
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker exec -i $(PROD_CONTAINER) psql -U $(PROD_DB_USER) -d $(PROD_DB) < /tmp/complete-production-schema.sql"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "rm /tmp/complete-production-schema.sql"
	@echo "$(GREEN)‚úì Schema aplicado$(NC)"

.PHONY: prod-fix-permissions
prod-fix-permissions: ## Arreglar permisos de archivos en el NAS
	@echo "$(BLUE)üîß Arreglando permisos...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S chmod -R 644 $(PROD_PATH)/config/*.sql"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S chown -R $(PROD_USER):users $(PROD_PATH)/config/"
	@echo "$(GREEN)‚úì Permisos corregidos$(NC)"

# =============================================================================
# üî¥ COMANDOS DE PRODUCCI√ìN - Build y Deploy
# =============================================================================

.PHONY: prod-build-image
prod-build-image: ## üèóÔ∏è Construir imagen Docker de producci√≥n
	@echo "$(BLUE)üèóÔ∏è Construyendo imagen de producci√≥n...$(NC)"
	@echo "$(YELLOW)1. Compilando TypeScript...$(NC)"
	@npm run build
	@echo "$(YELLOW)2. Construyendo imagen Docker...$(NC)"
	@docker build -f Dockerfile -t ai-service:simple .
	@echo "$(YELLOW)3. Exportando imagen...$(NC)"
	@docker save ai-service:simple | gzip > ai-service-production.tar.gz
	@echo "$(GREEN)‚úì Imagen creada: ai-service-production.tar.gz$(NC)"
	@ls -lh ai-service-production.tar.gz

.PHONY: prod-deploy-image
prod-deploy-image: ## Deploy imagen Docker a producci√≥n con backup autom√°tico
	@echo "$(BLUE)üì¶ Desplegando imagen Docker a producci√≥n...$(NC)"
	@if [ ! -f ai-service-production.tar.gz ]; then \
		echo "$(RED)Error: No se encuentra ai-service-production.tar.gz$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üì∏ Creando backup pre-deploy...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "cd $(PROD_PATH) && ./scripts/emergency/pre-deploy-backup.sh remote"
	@echo "$(YELLOW)Copiando imagen al NAS...$(NC)"
	@$(SCP) ai-service-production.tar.gz $(PROD_USER)@$(PROD_HOST):/tmp/
	@echo "$(YELLOW)Cargando imagen en Docker...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "cd /tmp && echo '$(SUDO_PASS)' | sudo -S sh -c 'gunzip -c ai-service-production.tar.gz | /usr/local/bin/docker load'"
	@echo "$(GREEN)‚úì Imagen ai-service:simple cargada$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "rm /tmp/ai-service-production.tar.gz"
	@echo "$(YELLOW)Reiniciando servicios...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "cd $(PROD_PATH) && echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker-compose up -d"
	@echo "$(GREEN)‚úì Deploy completado$(NC)"
	@echo "$(YELLOW)üí° En caso de problemas: make prod-emergency-restore$(NC)"
	@sleep 5
	@$(MAKE) prod-health

.PHONY: prod-update-config
prod-update-config: ## Actualizar configuraci√≥n de docker-compose en producci√≥n con backup
	@echo "$(BLUE)üîß Actualizando configuraci√≥n en producci√≥n...$(NC)"
	@echo "$(YELLOW)üì∏ Creando backup de configuraci√≥n...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "cp $(PROD_PATH)/docker-compose.yml $(PROD_PATH)/docker-compose.yml.backup-$(shell date +%Y%m%d_%H%M%S) 2>/dev/null || true"
	@$(SCP) docker-compose.production.yml $(PROD_USER)@$(PROD_HOST):$(PROD_PATH)/docker-compose.yml
	@echo "$(GREEN)‚úì Configuraci√≥n actualizada$(NC)"
	@echo "$(YELLOW)Creando directorios necesarios...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S mkdir -p $(PROD_PATH)/postgres $(PROD_PATH)/redis $(PROD_PATH)/logs $(PROD_PATH)/documents $(PROD_PATH)/config"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S chown -R $(PROD_USER):users $(PROD_PATH)/postgres $(PROD_PATH)/redis $(PROD_PATH)/logs $(PROD_PATH)/documents $(PROD_PATH)/config"
	@echo "$(YELLOW)Reiniciando servicios...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "cd $(PROD_PATH) && echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker-compose down --remove-orphans"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "cd $(PROD_PATH) && echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker-compose up -d"
	@echo "$(GREEN)‚úì Servicios reiniciados$(NC)"
	@echo "$(YELLOW)üí° En caso de problemas: make prod-emergency-restore$(NC)"
	@sleep 5
	@echo "$(BLUE)üìã Revisando logs del servicio...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker logs ai-service --tail=20"

.PHONY: prod-logs
prod-logs: ## Ver logs del servicio AI
	@echo "$(BLUE)üìã Logs del servicio AI...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker logs ai-service --tail=50"

.PHONY: prod-ps
prod-ps: ## Ver todos los contenedores
	@echo "$(BLUE)üìã Contenedores en producci√≥n...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker ps -a | grep -E 'ai-|CONTAINER'"

.PHONY: prod-start
prod-start: ## Iniciar el servicio AI
	@echo "$(BLUE)üöÄ Iniciando servicio AI...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker start ai-service"
	@echo "$(GREEN)‚úì Servicio iniciado$(NC)"

.PHONY: prod-logs-full
prod-logs-full: ## Ver logs completos del servicio AI
	@echo "$(BLUE)üìã Logs completos del servicio AI...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker logs ai-service"

.PHONY: prod-logs-postgres
prod-logs-postgres: ## Ver logs de PostgreSQL
	@echo "$(BLUE)üìã Logs de PostgreSQL...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker logs ai-postgres --tail=30"

.PHONY: prod-reset-postgres
prod-reset-postgres: ## Limpiar y reinicializar PostgreSQL
	@echo "$(RED)‚ö†Ô∏è  Limpiando datos de PostgreSQL (versi√≥n incompatible)...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "cd $(PROD_PATH) && echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker-compose stop"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker rm ai-postgres || true"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S rm -rf $(PROD_PATH)/postgres"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S mkdir -p $(PROD_PATH)/postgres"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S chown -R $(PROD_USER):users $(PROD_PATH)/postgres"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S ls -la $(PROD_PATH)/postgres/"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "cd $(PROD_PATH) && echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker-compose up -d"
	@echo "$(GREEN)‚úì PostgreSQL reinicializado$(NC)"

# =============================================================================
# üî¥ COMANDOS DE PRODUCCI√ìN - Diagn√≥stico
# =============================================================================

.PHONY: prod-status
prod-status: ## Estado completo del sistema en producci√≥n
	@echo "$(BLUE)üìä ESTADO DE PRODUCCI√ìN$(NC)"
	@echo "$(YELLOW)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(NC)"
	@echo "$(BLUE)Servicio AI:$(NC)"
	@-curl -s http://$(PROD_HOST):3003/status | python3 -m json.tool | head -20
	@echo ""
	@echo "$(BLUE)Contenedores:$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | grep -E '(ai-|postgres|redis|watchtower)' || echo 'No hay contenedores AI corriendo'"
	@echo ""
	@echo "$(BLUE)Base de datos:$(NC)"
	@$(MAKE) -f Makefile.production prod-check-db --no-print-directory

.PHONY: prod-check-containers
prod-check-containers: ## Ver todos los contenedores en el NAS
	@echo "$(BLUE)üê≥ Contenedores en producci√≥n:$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker ps -a --format 'table {{.Names}}\t{{.Status}}\t{{.Image}}' | head -20"

.PHONY: prod-check-db
prod-check-db: ## Verificar BD y tablas en producci√≥n
	@echo "$(BLUE)üóÑÔ∏è  Verificando base de datos...$(NC)"
	@echo -n "Conexi√≥n: "
	@if $(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker exec $(PROD_CONTAINER) pg_isready -U $(PROD_DB_USER) -d $(PROD_DB)" >/dev/null 2>&1; then \
		echo "$(GREEN)‚úì OK$(NC)"; \
	else \
		echo "$(RED)‚úó ERROR$(NC)"; \
	fi
	@echo -n "Tablas financial: "
	@COUNT=$$($(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker exec $(PROD_CONTAINER) psql -U $(PROD_DB_USER) -d $(PROD_DB) -t -c \"SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'financial';\"" 2>/dev/null | tr -d ' '); \
	echo "$(GREEN)$$COUNT tablas$(NC)"

.PHONY: prod-health
prod-health: ## Health check completo de producci√≥n
	@echo "$(BLUE)üè• Health Check Producci√≥n$(NC)"
	@echo "$(YELLOW)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(NC)"
	@STATUS=$$(curl -s http://$(PROD_HOST):3003/status | python3 -c "import sys, json; d=json.load(sys.stdin); print(d.get('status', 'unknown'))" 2>/dev/null || echo "error"); \
	if [ "$$STATUS" = "healthy" ]; then \
		echo "Estado: $(GREEN)‚úì $$STATUS$(NC)"; \
	elif [ "$$STATUS" = "degraded" ]; then \
		echo "Estado: $(YELLOW)‚ö† $$STATUS$(NC)"; \
	else \
		echo "Estado: $(RED)‚úó $$STATUS$(NC)"; \
	fi
	@echo -n "Dashboard: "
	@if curl -s http://$(PROD_HOST):3003/api/financial/dashboard/overview | grep -q '"success":true' 2>/dev/null; then \
		echo "$(GREEN)‚úì Funcionando$(NC)"; \
	else \
		echo "$(RED)‚úó Con errores$(NC)"; \
	fi

# =============================================================================
# üî¥ COMANDOS DE PRODUCCI√ìN - Backup
# =============================================================================

.PHONY: prod-backup
prod-backup: ## Backup de producci√≥n con timestamp
	@echo "$(BLUE)üíæ Creando backup de producci√≥n...$(NC)"
	@TIMESTAMP=$$(date +%Y%m%d_%H%M%S); \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S mkdir -p $(BACKUP_DIR)"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker exec $(PROD_CONTAINER) pg_dump -U $(PROD_DB_USER) -d $(PROD_DB) | gzip > /tmp/backup_$$TIMESTAMP.sql.gz"; \
	$(SSH) $(PROD_USER)@$(PROD_HOST) "echo '$(SUDO_PASS)' | sudo -S mv /tmp/backup_$$TIMESTAMP.sql.gz $(BACKUP_DIR)/"; \
	echo "$(GREEN)‚úì Backup creado: backup_$$TIMESTAMP.sql.gz$(NC)"

.PHONY: prod-backup-list
prod-backup-list: ## Listar backups disponibles en el NAS
	@echo "$(BLUE)üìã Backups disponibles:$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "ls -lah $(BACKUP_DIR)/*.sql.gz 2>/dev/null | tail -10" || echo "$(YELLOW)No hay backups$(NC)"

.PHONY: prod-restore
prod-restore: ## Restaurar backup espec√≠fico (usar: make prod-restore FILE=backup_20250101_120000.sql.gz)
	@if [ -z "$(FILE)" ]; then \
		echo "$(RED)Error: Especifica el archivo con FILE=backup_XXXXXX.sql.gz$(NC)"; \
		echo "Usa 'make prod-backup-list' para ver backups disponibles"; \
		exit 1; \
	fi
	@echo "$(YELLOW)‚ö†Ô∏è  Restaurando backup: $(FILE)$(NC)"
	@echo "$(RED)Esto reemplazar√° TODOS los datos actuales. ¬øContinuar? (s/N):$(NC)"
	@read CONFIRM && [ "$$CONFIRM" = "s" ] || (echo "$(GREEN)Cancelado$(NC)" && exit 1)
	@echo "$(BLUE)Restaurando...$(NC)"
	@$(SSH) $(PROD_USER)@$(PROD_HOST) "gunzip -c $(BACKUP_DIR)/$(FILE) | echo '$(SUDO_PASS)' | sudo -S /usr/local/bin/docker exec -i $(PROD_CONTAINER) psql -U $(PROD_DB_USER) -d $(PROD_DB)"
	@echo "$(GREEN)‚úì Backup restaurado$(NC)"

# =============================================================================
# Ayuda
# =============================================================================

.PHONY: help
help: ## Mostrar esta ayuda
	@echo "$(RED)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	@echo "$(RED)‚ïë          COMANDOS DE PRODUCCI√ìN - USAR CON CUIDADO           ‚ïë$(NC)"
	@echo "$(RED)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(RED)‚ö†Ô∏è  ADVERTENCIA: Estos comandos afectan el ambiente de PRODUCCI√ìN$(NC)"

.DEFAULT_GOAL := help