name: E2E Tests

on:
  push:
    branches: [main, develop, feat/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
  TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
  JWT_SECRET: test_jwt_secret_for_ci_only_not_for_production
  NODE_ENV: test

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare pnpm@10.12.1 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Prisma
        run: |
          npx prisma generate
          npx prisma migrate deploy

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium firefox webkit

      - name: Run TypeScript check
        run: pnpm run typecheck

      - name: Run ESLint
        run: pnpm run lint

      - name: Build application
        run: pnpm run build

      - name: Run E2E tests
        run: npx playwright test
        env:
          CI: true
          BASE_URL: http://localhost:3000

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  quality-gates:
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: test-results/

      - name: Check quality gates
        run: |
          # Check if all tests passed
          if [ -f test-results/results.json ]; then
            FAILED=$(jq '.stats.failed' test-results/results.json)
            PASSED=$(jq '.stats.passed' test-results/results.json)
            TOTAL=$((FAILED + PASSED))
            
            if [ "$TOTAL" -gt 0 ]; then
              PASS_RATE=$((PASSED * 100 / TOTAL))
              echo "Test Pass Rate: $PASS_RATE%"
              
              if [ "$PASS_RATE" -lt 95 ]; then
                echo "Quality gate failed: Pass rate below 95%"
                exit 1
              fi
            fi
          fi
          
          echo "Quality gates passed!"

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let comment = '## 🎯 E2E Test Results\n\n';
            
            // Read test results if available
            const resultsPath = 'test-results/results.json';
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              const stats = results.stats || {};
              
              comment += `- ✅ Passed: ${stats.passed || 0}\n`;
              comment += `- ❌ Failed: ${stats.failed || 0}\n`;
              comment += `- ⏩ Skipped: ${stats.skipped || 0}\n`;
              comment += `- ⏱️ Duration: ${(stats.duration / 1000).toFixed(2)}s\n\n`;
              
              if (stats.failed > 0) {
                comment += '### Failed Tests\n';
                // List failed tests if any
              }
            }
            
            comment += '\n[View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  deploy-protection:
    runs-on: ubuntu-latest
    needs: [e2e-tests, quality-gates]
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
      - name: Deploy gate check
        run: |
          echo "✅ All E2E tests passed"
          echo "✅ Quality gates passed"
          echo "✅ Ready for deployment"