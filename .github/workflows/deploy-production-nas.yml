name: Deploy to Production (NAS)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker image
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-sha: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
      
    - name: Run pre-deploy validations
      run: |
        echo "üîç Running pre-deploy validations..."
        npm run build
        npm run typecheck
        echo "‚úÖ All validations passed!"

    - name: Generate version info
      id: version
      run: |
        echo "timestamp=$(date -u +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        echo "commit_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "commit_full=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "version=v$(date -u +%Y.%m.%d)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "build_date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.version }}
        labels: |
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ steps.version.outputs.commit_full }}
          ai-service.build.timestamp=${{ steps.version.outputs.timestamp }}
          ai-service.build.commit=${{ steps.version.outputs.commit_short }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          BUILD_DATE=${{ steps.version.outputs.build_date }}
          COMMIT=${{ steps.version.outputs.commit_full }}
          COMMIT_SHORT=${{ steps.version.outputs.commit_short }}

  # Trigger NAS deployment via webhook
  deploy-nas:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Trigger NAS Container Update
      run: |
        echo "üöÄ Triggering NAS container update..."
        
        # Option 1: Direct webhook to NAS (if you have webhook setup)
        if [ -n "${{ secrets.NAS_WEBHOOK_URL }}" ]; then
          curl -X POST "${{ secrets.NAS_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.NAS_WEBHOOK_TOKEN }}" \
            -d '{
              "action": "update_container",
              "container": "ai-service",
              "image": "${{ needs.build.outputs.image-tag }}",
              "sha": "${{ needs.build.outputs.image-sha }}"
            }'
          
          echo "‚úÖ NAS webhook triggered"
        fi
        
        # Option 2: SSH to NAS (if SSH is enabled)
        if [ -n "${{ secrets.NAS_SSH_KEY }}" ]; then
          echo "Using SSH method..."
          # This would require SSH setup on your NAS
        fi
        
        # Option 3: Use Synology API (if available)
        if [ -n "${{ secrets.SYNOLOGY_API_TOKEN }}" ]; then
          echo "Using Synology DSM API..."
          # Call Synology Container Manager API
        fi
        
    - name: Wait and verify deployment
      run: |
        echo "‚è≥ Waiting for container to update..."
        sleep 60
        
        # Verify service is responding
        for i in {1..10}; do
          if curl -f https://ai-service.anaxi.net/status; then
            echo "‚úÖ Service is healthy after update"
            break
          fi
          
          if [ $i -eq 10 ]; then
            echo "‚ùå Service health check failed after update"
            exit 1
          fi
          
          echo "‚è≥ Health check attempt $i/10..."
          sleep 30
        done
        
    - name: Verify financial endpoints
      run: |
        echo "üîç Verifying financial endpoints..."
        
        # Check if financial endpoints are working
        if curl -f https://ai-service.anaxi.net/api/financial/dashboard/health; then
          echo "‚úÖ Financial services are healthy"
        else
          echo "‚ö†Ô∏è Financial services may need attention"
          echo "This might be normal if database migration is needed"
        fi
        
        # Test revenue metrics (this should work after migration)
        if curl -f https://ai-service.anaxi.net/api/financial/dashboard/revenue-metrics; then
          echo "‚úÖ Revenue metrics are working"
        else
          echo "‚ö†Ô∏è Revenue metrics not working - may need manual migration"
        fi