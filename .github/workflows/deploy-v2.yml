name: Build and Deploy v2

on:
  # Disabled automatic deployment - use deploy-production-nas.yml instead
  # push:
  #   branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: christianlb/ai-service-api
  FRONTEND_IMAGE_NAME: christianlb/ai-service-frontend

jobs:
  # Detect what changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
    - uses: actions/checkout@v4
    
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          api:
            - 'src/**'
            - 'migrations/**'
            - 'scripts/**'
            - 'package*.json'
            - 'tsconfig.json'
            - 'Dockerfile.api'
          frontend:
            - 'frontend/**'
            - 'nginx/**'
            - 'Dockerfile.frontend'

  # Build API if changed
  build-api:
    needs: changes
    if: ${{ needs.changes.outputs.api == 'true' && github.head_ref != 'fix/stabilize-pr1' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR (use CHCR_TOKEN if available)
      if: ${{ github.event_name != 'pull_request' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.CHCR_USERNAME || github.repository_owner }}
        password: ${{ secrets.CHCR_TOKEN || secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build API Docker image (push on branches only)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.api
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.ref_name }}-${{ github.run_number }}
          BUILD_DATE=${{ github.event.repository.updated_at }}
          COMMIT=${{ github.sha }}
          COMMIT_SHORT=${GITHUB_SHA::7}

  # Build Frontend if changed
  build-frontend:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR (use CHCR_TOKEN if available)
      if: ${{ github.event_name != 'pull_request' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.CHCR_USERNAME || github.repository_owner }}
        password: ${{ secrets.CHCR_TOKEN || secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Frontend Docker image (push on branches only)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy notification
  deploy:
    needs: [changes, build-api, build-frontend]
    if: always() && !cancelled() && (needs.build-api.result == 'success' || needs.build-frontend.result == 'success' || (needs.build-api.result == 'skipped' && needs.build-frontend.result == 'skipped'))
    runs-on: ubuntu-latest
    
    steps:
    - name: Deployment Summary
      run: |
        echo "ðŸš€ Deployment Summary:"
        echo "API Build: ${{ needs.build-api.result || 'skipped' }}"
        echo "Frontend Build: ${{ needs.build-frontend.result || 'skipped' }}"
        echo ""
        echo "Watchtower will automatically deploy the new images within 5 minutes."