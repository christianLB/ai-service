name: Deploy to Production (Legacy - SSH)

on:
  # Disabled - now using deploy-production-nas.yml
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy via SSH method'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker image
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
      
    - name: Run pre-deploy validations
      run: |
        echo "🔍 Running pre-deploy validations..."
        npm run build
        npm run typecheck
        echo "✅ All validations passed!"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to production server
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
        
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ai-service.anaxi.net >> ~/.ssh/known_hosts
        
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production server..."
        
        # Copy deployment files
        scp docker-compose.prod.yml anaxi@ai-service.anaxi.net:~/ai-service/
        scp scripts/deploy-production.sh anaxi@ai-service.anaxi.net:~/ai-service/scripts/
        scp scripts/financial-schema.sql anaxi@ai-service.anaxi.net:~/ai-service/scripts/
        
        # Execute deployment
        ssh anaxi@ai-service.anaxi.net << 'ENDSSH'
          cd ~/ai-service
          export NEW_IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
          export IMAGE_DIGEST="${{ needs.build.outputs.image-digest }}"
          
          echo "🔄 Starting deployment with image: $NEW_IMAGE_TAG"
          
          # Run the deployment script
          chmod +x scripts/deploy-production.sh
          ./scripts/deploy-production.sh
          
          echo "✅ Deployment completed successfully"
        ENDSSH
        
    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Wait for service to be ready
        sleep 30
        
        # Health check
        if curl -f https://ai-service.anaxi.net/status; then
          echo "✅ Service is healthy"
        else
          echo "❌ Service health check failed"
          exit 1
        fi
        
        # Check financial endpoints
        if curl -f https://ai-service.anaxi.net/api/financial/dashboard/health; then
          echo "✅ Financial services are healthy"
        else
          echo "⚠️ Financial services may need migration"
        fi
        
    - name: Notify deployment status
      if: always()
      run: |
        STATUS="${{ job.status }}"
        if [ "$STATUS" = "success" ]; then
          echo "🎉 Production deployment successful!"
          # Optional: Send success notification
        else
          echo "❌ Production deployment failed!"
          # Optional: Send failure notification
        fi