name: CI Build

on:
  push:
    branches: [ main, feat/** ]
  pull_request:
    branches: [ main, feat/** ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Ensure pnpm via Corepack (fallback)
        run: corepack enable && corepack prepare pnpm@10.12.1 --activate

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: true

      - name: Install dependencies (ensure workspace install)
        run: pnpm -w install --no-frozen-lockfile

      - name: Generate and build contracts
        run: |
          pnpm contracts:generate
          pnpm contracts:build

      - name: Contracts drift check
        run: pnpm contracts:check

      - name: Build all apps
        run: pnpm -r --filter "./apps/*" build

      - name: Build all packages
        run: pnpm -r --filter "./packages/*" build

      - name: Typecheck (no emit)
        run: npx tsc -b --noEmit

  smoke:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Prepare .env for compose
        run: |
          # Compose references infra/compose/../../.env => repo root .env
          touch .env

      - name: Start stack (dev compose)
        working-directory: infra/compose
        run: |
          docker compose -f docker-compose.dev.yml up -d --build

      - name: Show compose status
        run: |
          docker compose -f infra/compose/docker-compose.dev.yml ps

      - name: Wait for gateway readiness
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:3005/health/ready > /dev/null; then
              echo "gateway ready"; exit 0; fi; sleep 2; done; echo "gateway not ready"; docker compose -f infra/compose/docker-compose.dev.yml logs api-gateway || true; exit 1

      - name: On failure - dump failing container logs
        if: failure()
        run: |
          echo "==== docker ps ===="
          docker ps -a || true
          echo "==== compose ps ===="
          docker compose -f infra/compose/docker-compose.dev.yml ps || true
          echo "==== financial-svc logs ===="
          docker compose -f infra/compose/docker-compose.dev.yml logs financial-svc || true
          echo "==== db logs ===="
          docker compose -f infra/compose/docker-compose.dev.yml logs db || true
          echo "==== gateway logs ===="
          docker compose -f infra/compose/docker-compose.dev.yml logs api-gateway || true

      - name: Smoke - list accounts
        run: |
          curl -sf http://localhost:3005/api/financial/accounts | tee accounts.json

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Smoke - accounts pagination valid
        run: |
          set -e
          url="http://localhost:3005/api/financial/accounts?page=2&limit=1"
          echo "GET $url"
          code=$(curl -s -o resp.json -w "%{http_code}" "$url")
          echo "HTTP $code"
          echo "Response:" && cat resp.json || true
          test "$code" = "200"
          cat resp.json | jq -e '.page == 2 and .limit == 1' >/dev/null

      - name: Smoke - accounts pagination invalid (page=0)
        run: |
          set -e
          code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3005/api/financial/accounts?page=0&limit=10")
          test "$code" = "400"

      - name: Smoke - clients pagination valid
        run: |
          set -e
          resp=$(curl -sf "http://localhost:3005/api/financial/clients?page=1&limit=2")
          echo "$resp" | jq -e '.page == 1 and .limit == 2 and (.clients | type == "array")' >/dev/null

      - name: Smoke - clients pagination invalid (limit=0)
        run: |
          set -e
          code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3005/api/financial/clients?page=1&limit=0")
          test "$code" = "400"

      - name: Smoke - invoices pagination valid
        run: |
          set -e
          resp=$(curl -sf "http://localhost:3005/api/financial/invoices?page=1&limit=1")
          echo "$resp" | jq -e '.page == 1 and .limit == 1 and (.invoices | type == "array")' >/dev/null

      - name: Smoke - invoices pagination invalid (page=0)
        run: |
          set -e
          code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3005/api/financial/invoices?page=0&limit=10")
          test "$code" = "400"

      - name: On failure - dump logs (post-smoke)
        if: failure()
        run: |
          echo "==== docker ps ===="
          docker ps -a || true
          echo "==== compose ps ===="
          docker compose -f infra/compose/docker-compose.dev.yml ps || true
          echo "==== gateway logs ===="
          docker compose -f infra/compose/docker-compose.dev.yml logs api-gateway || true
          echo "==== financial-svc logs ===="
          docker compose -f infra/compose/docker-compose.dev.yml logs financial-svc || true
          echo "==== db logs ===="
          docker compose -f infra/compose/docker-compose.dev.yml logs db || true

      - name: Smoke - get account by id (skip if none)
        run: |
          set -e
          id=$(jq -r '.accounts[0].id // empty' accounts.json)
          if [ -z "$id" ]; then
            echo "No account found; skipping get-by-id"
            exit 0
          fi
          echo "Querying account id: $id"
          curl -sf "http://localhost:3005/api/financial/accounts/$id"

      - name: Teardown stack
        if: always()
        working-directory: infra/compose
        run: docker compose -f docker-compose.dev.yml down -v
