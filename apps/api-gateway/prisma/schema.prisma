// API Gateway & Auth - Users, Sessions, Permissions
// Generated from monolithic schema - 2025-08-20T15:03:01.748Z
// DATABASE: postgresql://auth_user:auth_secure_2025@localhost:5434/auth_db

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============= MODELS =============

model executions {
  id                String     @id @db.VarChar(36)
  workflow_id       String?    @db.VarChar(36)
  status            String     @db.VarChar(20)
  start_time        DateTime?  @default(now()) @db.Timestamptz(6)
  end_time          DateTime?  @db.Timestamptz(6)
  input_data        Json?
  output_data       Json?
  error_message     String?
  execution_time_ms Int?
  workflows         workflows? @relation(fields: [workflow_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([start_time], map: "idx_executions_start_time")
  @@index([status], map: "idx_executions_status")
  @@index([workflow_id], map: "idx_executions_workflow_id")
}
model login_attempts {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String    @db.VarChar(255)
  ip_address   String    @db.Inet
  success      Boolean
  attempted_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([email, attempted_at], map: "idx_login_attempts_email")
  @@index([ip_address, attempted_at], map: "idx_login_attempts_ip")
}
model metrics {
  id           Int       @id @default(autoincrement())
  metric_name  String    @db.VarChar(100)
  metric_value Decimal   @db.Decimal
  metric_type  String    @db.VarChar(50)
  tags         Json?
  timestamp    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([metric_name], map: "idx_metrics_name")
  @@index([timestamp], map: "idx_metrics_timestamp")
}
model refresh_tokens {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  token_hash String    @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  revoked_at DateTime? @db.Timestamptz(6)
  User       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_hash], map: "unique_active_token")
  @@index([expires_at], map: "idx_refresh_tokens_expires_at")
  @@index([user_id], map: "idx_refresh_tokens_user_id")
}
model schema_migrations {
  version     String    @id @db.VarChar(255)
  applied_at  DateTime? @default(now()) @db.Timestamptz(6)
  checksum    String?   @db.VarChar(64)
  description String?

}
model security_logs {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_type String    @db.VarChar(100)
  user_id    String?   @db.Uuid
  email      String?   @db.VarChar(255)
  ip_address String    @db.Inet
  user_agent String?
  details    Json?
  success    Boolean
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  User       User?     @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([created_at(sort: Desc)], map: "idx_security_logs_created_at")
  @@index([email, created_at], map: "idx_security_logs_email")
  @@index([event_type, created_at], map: "idx_security_logs_event_type")
  @@index([ip_address, created_at], map: "idx_security_logs_ip")
}
model User {
  id                  String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String                 @unique @db.VarChar(255)
  password_hash       String                 @db.VarChar(255)
  full_name           String?                @db.VarChar(255)
  role                String?                @default("user") @db.VarChar(50)
  is_active           Boolean?               @default(true)
  last_login          DateTime?              @db.Timestamptz(6)
  created_at          DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?              @default(now()) @db.Timestamptz(6)
  // Cross-service references removed - models exist in other services:
  // clients -> financial-svc
  // invoices -> financial-svc
  // payments -> trading-svc
  // alerts -> trading-svc
  // orders -> trading-svc
  refresh_tokens      refresh_tokens[]
  security_logs       security_logs[]

  @@index([email], map: "idx_users_email")
  @@map("users")
}
model workflows {
  id            String       @id @db.VarChar(36)
  name          String       @db.VarChar(255)
  description   String?
  active        Boolean?     @default(false)
  workflow_data Json
  version       Int?         @default(1)
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?    @default(now()) @db.Timestamptz(6)
  created_by    String?      @db.VarChar(255)
  tags          String[]
  executions    executions[]

  @@index([active], map: "idx_workflows_active")
  @@index([created_at], map: "idx_workflows_created_at")
  @@index([name], map: "idx_workflows_name")
}
model invoice_numbering_sequences {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  series         String    @default("DEFAULT") @db.VarChar(50)
  prefix         String    @db.VarChar(20)
  current_number Int       @default(0)
  current_year   Int
  format         String    @db.VarChar(50)
  yearly_reset   Boolean   @default(true)
  last_used      DateTime? @db.Timestamptz(6)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([series, prefix, current_year])
  @@index([series], map: "idx_invoice_numbering_series")
  @@index([current_year], map: "idx_invoice_numbering_year")
}
model memories {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type        String    @db.VarChar(50)
  content     Json
  embedding   Float[]   @default([]) @db.Real
  metadata    Json?     @default("{}")
  connections String[]  @default([]) @db.Uuid
  user_id     String?   @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at(sort: Desc)], map: "idx_memories_created_at")
  @@index([type], map: "idx_memories_type")
  @@index([user_id], map: "idx_memories_user_id")
}
model stored_invoices {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id     String    @db.VarChar(255)
  invoice_number String    @db.VarChar(100)
  file_name      String    @db.VarChar(255)
  file_path      String
  file_size      BigInt
  mime_type      String    @default("application/pdf") @db.VarChar(100)
  storage_type   String    @default("local") @db.VarChar(20)
  url            String?
  metadata       Json?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  expires_at     DateTime? @db.Timestamptz(6)

  @@unique([invoice_id, file_name])
  @@index([created_at], map: "idx_stored_invoices_created_at")
  @@index([expires_at], map: "idx_stored_invoices_expires_at")
  @@index([invoice_id], map: "idx_stored_invoices_invoice_id")
  @@index([invoice_number], map: "idx_stored_invoices_invoice_number")
}
model EventLog {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  traceId      String    @map("trace_id") @db.VarChar(64)
  spanId       String?   @map("span_id") @db.VarChar(64)
  parentSpanId String?   @map("parent_span_id") @db.VarChar(64)
  service      String    @db.VarChar(50)
  operation    String    @db.VarChar(100)
  level        String    @default("info") @db.VarChar(20) // debug, info, warn, error, critical
  userId       String?   @map("user_id") @db.Uuid
  method       String?   @db.VarChar(10) // GET, POST, PUT, DELETE, etc
  path         String?   @db.VarChar(255)
  statusCode   Int?      @map("status_code")
  duration     Int?      // milliseconds
  message      String    @db.Text
  metadata     Json?     @default("{}")
  error        Json?
  ip           String?   @db.VarChar(45) // IPv4 or IPv6
  userAgent    String?   @map("user_agent") @db.Text
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([traceId])
  @@index([service, level])
  @@index([userId])
  @@index([createdAt(sort: Desc)])
  @@map("event_logs")
}
model AuditLog {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String?   @map("user_id") @db.Uuid
  action      String    @db.VarChar(100) // CREATE, UPDATE, DELETE, LOGIN, etc
  resource    String    @db.VarChar(100) // integrations, clients, invoices, etc
  resourceId  String?   @map("resource_id") @db.Uuid
  details     Json?     @default("{}") // Additional details about the action
  ipAddress   String?   @map("ip_address") @db.VarChar(45)
  userAgent   String?   @map("user_agent") @db.Text
  status      String    @default("success") @db.VarChar(20) // success, failure
  errorMessage String?  @map("error_message") @db.Text
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([userId])
  @@index([resource])
  @@index([action])
  @@index([createdAt(sort: Desc)])
  @@map("audit_logs")
}
model SecurityEvent {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String?   @map("user_id") @db.Uuid
  eventType   String    @map("event_type") @db.VarChar(100) // failed_login, rate_limit_exceeded, etc
  severity    String    @default("low") @db.VarChar(20) // low, medium, high, critical
  description String    @db.Text
  details     Json?     @default("{}")
  ipAddress   String?   @map("ip_address") @db.VarChar(45)
  userAgent   String?   @map("user_agent") @db.Text
  resolved    Boolean   @default(false)
  resolvedAt  DateTime? @map("resolved_at") @db.Timestamptz(6)
  resolvedBy  String?   @map("resolved_by") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([userId])
  @@index([eventType])
  @@index([severity])
  @@index([resolved])
  @@index([createdAt(sort: Desc)])
  @@map("security_events")
}