/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/api/financial/accounts": {
        /** List bank accounts */
        get: operations["listAccounts"];
    };
    "/api/financial/accounts/{id}": {
        /** Get account by ID */
        get: operations["getAccount"];
    };
    "/api/financial/clients": {
        /** List clients */
        get: operations["listClients"];
    };
    "/api/financial/clients/{id}": {
        /** Get client by ID */
        get: operations["getClient"];
    };
    "/api/financial/invoices": {
        /** List invoices */
        get: operations["listInvoices"];
    };
    "/api/financial/invoices/{id}": {
        /** Get invoice by ID */
        get: operations["getInvoice"];
    };
    "/api/financial/transactions": {
        /** List transactions */
        get: operations["listTransactions"];
    };
    "/api/financial/transactions/{id}": {
        /** Get transaction by ID */
        get: operations["getTransaction"];
    };
    "/api/financial/transactions/export": {
        /** Export transactions */
        get: operations["exportTransactions"];
    };
    "/api/financial/attachments": {
        /** List attachments */
        get: operations["listAttachments"];
    };
    "/api/financial/attachments/{id}": {
        /** Get attachment by ID */
        get: operations["getAttachment"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error message */
            message: string;
            /** @description Error code (BAD_REQUEST, NOT_FOUND, etc.) */
            code: string;
        };
        PaginationInfo: {
            page: number;
            limit: number;
            total: number;
        };
        Account: {
            /** Format: uuid */
            id: string;
            account_id: string;
            name: string;
            type: string;
            institution?: string;
            institution_id?: string;
            iban?: string;
            currency?: string;
            balance?: number;
            available_balance?: number;
            is_active?: boolean;
            /** Format: date-time */
            last_sync?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        AccountListResponse: components["schemas"]["PaginationInfo"] & {
            accounts: components["schemas"]["Account"][];
        };
        Client: {
            /** Format: uuid */
            id: string;
            name: string;
            /** Format: email */
            email: string;
            taxId?: string;
            phone?: string;
            address?: string;
            city?: string;
            postalCode?: string;
            country?: string;
            /** @enum {string} */
            status: "active" | "inactive";
            notes?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ClientListResponse: components["schemas"]["PaginationInfo"] & {
            clients: components["schemas"]["Client"][];
        };
        Invoice: {
            /** Format: uuid */
            id: string;
            invoiceNumber: string;
            /** Format: uuid */
            clientId: string;
            clientName?: string;
            clientTaxId?: string;
            /** @enum {string} */
            status: "draft" | "sent" | "paid" | "overdue" | "cancelled";
            total: number;
            subtotal?: number;
            tax?: number;
            /** Format: date */
            issueDate: string;
            /** Format: date */
            dueDate: string;
            /** Format: date */
            paidDate?: string;
            notes?: string;
            items?: components["schemas"]["InvoiceItem"][];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        InvoiceItem: {
            description: string;
            quantity: number;
            unitPrice: number;
            total: number;
        };
        InvoiceListResponse: components["schemas"]["PaginationInfo"] & {
            invoices: components["schemas"]["Invoice"][];
        };
        Transaction: {
            /** Format: uuid */
            id: string;
            transaction_id: string;
            account_id: string;
            amount: number;
            currency?: string;
            /** @enum {string} */
            type: "debit" | "credit" | "transfer";
            /** @enum {string} */
            status?: "pending" | "confirmed" | "failed" | "cancelled";
            description?: string;
            reference?: string;
            counterparty_name?: string;
            counterparty_account?: string;
            /** Format: date */
            date: string;
            tags?: string[];
            fee_amount?: number;
            fee_currency?: string;
            metadata?: Record<string, never>;
            gocardless_data?: Record<string, never>;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        TransactionListResponse: components["schemas"]["PaginationInfo"] & {
            transactions: components["schemas"]["Transaction"][];
            stats?: {
                totalIncome?: number;
                totalExpenses?: number;
            };
        };
        Attachment: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            invoiceId: string;
            fileName: string;
            filePath: string;
            fileSize: number;
            fileType: string;
            description?: string;
            uploadedBy?: string;
            /** Format: date-time */
            uploadedAt: string;
            isDeleted?: boolean;
            /** Format: date-time */
            deletedAt?: string;
            deletedBy?: string;
        };
        AttachmentListResponse: components["schemas"]["PaginationInfo"] & {
            attachments: components["schemas"]["Attachment"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type external = Record<string, never>;
export interface operations {
    /** List bank accounts */
    listAccounts: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: number;
                /** @description Items per page */
                limit?: number;
            };
        };
        responses: {
            /** @description List of accounts */
            200: {
                content: {
                    "application/json": components["schemas"]["AccountListResponse"];
                };
            };
            /** @description Invalid parameters */
            400: {
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    /** Get account by ID */
    getAccount: {
        parameters: {
            path: {
                id: string;
            };
        };
        responses: {
            /** @description Account details */
            200: {
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account not found */
            404: {
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    /** List clients */
    listClients: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                email?: string;
                name?: string;
            };
        };
        responses: {
            /** @description List of clients */
            200: {
                content: {
                    "application/json": components["schemas"]["ClientListResponse"];
                };
            };
            /** @description Invalid parameters */
            400: {
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    /** Get client by ID */
    getClient: {
        parameters: {
            path: {
                id: string;
            };
        };
        responses: {
            /** @description Client details */
            200: {
                content: {
                    "application/json": components["schemas"]["Client"];
                };
            };
            /** @description Client not found */
            404: {
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    /** List invoices */
    listInvoices: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                clientId?: string;
                status?: "draft" | "sent" | "paid" | "overdue" | "cancelled";
            };
        };
        responses: {
            /** @description List of invoices */
            200: {
                content: {
                    "application/json": components["schemas"]["InvoiceListResponse"];
                };
            };
            /** @description Invalid parameters */
            400: {
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    /** Get invoice by ID */
    getInvoice: {
        parameters: {
            path: {
                id: string;
            };
        };
        responses: {
            /** @description Invoice details */
            200: {
                content: {
                    "application/json": components["schemas"]["Invoice"];
                };
            };
            /** @description Invoice not found */
            404: {
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    /** List transactions */
    listTransactions: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                accountId?: string;
                type?: "debit" | "credit" | "transfer";
                status?: "pending" | "confirmed" | "failed" | "cancelled";
                dateFrom?: string;
                dateTo?: string;
                minAmount?: number;
                maxAmount?: number;
                search?: string;
            };
        };
        responses: {
            /** @description List of transactions */
            200: {
                content: {
                    "application/json": components["schemas"]["TransactionListResponse"];
                };
            };
            /** @description Invalid parameters */
            400: {
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    /** Get transaction by ID */
    getTransaction: {
        parameters: {
            path: {
                id: string;
            };
        };
        responses: {
            /** @description Transaction details */
            200: {
                content: {
                    "application/json": components["schemas"]["Transaction"];
                };
            };
            /** @description Transaction not found */
            404: {
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    /** Export transactions */
    exportTransactions: {
        parameters: {
            query?: {
                format?: "csv" | "json";
                accountId?: string;
                dateFrom?: string;
                dateTo?: string;
            };
        };
        responses: {
            /** @description Exported transactions */
            200: {
                content: {
                    "text/csv": string;
                    "application/json": components["schemas"]["Transaction"][];
                };
            };
            /** @description Invalid parameters */
            400: {
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    /** List attachments */
    listAttachments: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                invoiceId?: string;
                fileType?: string;
            };
        };
        responses: {
            /** @description List of attachments */
            200: {
                content: {
                    "application/json": components["schemas"]["AttachmentListResponse"];
                };
            };
            /** @description Invalid parameters */
            400: {
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    /** Get attachment by ID */
    getAttachment: {
        parameters: {
            path: {
                id: string;
            };
        };
        responses: {
            /** @description Attachment details */
            200: {
                content: {
                    "application/json": components["schemas"]["Attachment"];
                };
            };
            /** @description Attachment not found */
            404: {
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
//# sourceMappingURL=financial.d.ts.map