import { z } from 'zod';
/**
 * Zod schemas for EntityTag model
 * Auto-generated from Prisma schema
 */
export declare const EntityTagSchema: z.ZodObject<{
    id: z.ZodString;
    entityType: z.ZodString;
    entityId: z.ZodString;
    method: z.ZodString;
    confidence: z.ZodNumber;
    appliedBy: z.ZodOptional<z.ZodString>;
    aiProvider: z.ZodOptional<z.ZodString>;
    aiModel: z.ZodOptional<z.ZodString>;
    aiResponse: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    aiReasoning: z.ZodOptional<z.ZodString>;
    isVerified: z.ZodBoolean;
    verifiedBy: z.ZodOptional<z.ZodString>;
    verifiedAt: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>>;
    feedback: z.ZodOptional<z.ZodString>;
    isCorrect: z.ZodOptional<z.ZodBoolean>;
    sourceEntityType: z.ZodOptional<z.ZodString>;
    sourceEntityId: z.ZodOptional<z.ZodString>;
    relationshipType: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>;
    updatedAt: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>;
    tagId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    method: string;
    id: string;
    confidence: number;
    createdAt: Date;
    updatedAt: Date;
    entityType: string;
    entityId: string;
    isVerified: boolean;
    tagId: string;
    appliedBy?: string | undefined;
    aiProvider?: string | undefined;
    aiModel?: string | undefined;
    aiResponse?: Record<string, any> | undefined;
    aiReasoning?: string | undefined;
    verifiedBy?: string | undefined;
    verifiedAt?: Date | undefined;
    feedback?: string | undefined;
    isCorrect?: boolean | undefined;
    sourceEntityType?: string | undefined;
    sourceEntityId?: string | undefined;
    relationshipType?: string | undefined;
}, {
    method: string;
    id: string;
    confidence: number;
    createdAt: string | Date;
    updatedAt: string | Date;
    entityType: string;
    entityId: string;
    isVerified: boolean;
    tagId: string;
    appliedBy?: string | undefined;
    aiProvider?: string | undefined;
    aiModel?: string | undefined;
    aiResponse?: Record<string, any> | undefined;
    aiReasoning?: string | undefined;
    verifiedBy?: string | undefined;
    verifiedAt?: string | Date | undefined;
    feedback?: string | undefined;
    isCorrect?: boolean | undefined;
    sourceEntityType?: string | undefined;
    sourceEntityId?: string | undefined;
    relationshipType?: string | undefined;
}>;
export declare const EntityTagCreateSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    entityType: z.ZodString;
    entityId: z.ZodString;
    method: z.ZodString;
    confidence: z.ZodNumber;
    appliedBy: z.ZodOptional<z.ZodString>;
    aiProvider: z.ZodOptional<z.ZodString>;
    aiModel: z.ZodOptional<z.ZodString>;
    aiResponse: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    aiReasoning: z.ZodOptional<z.ZodString>;
    isVerified: z.ZodBoolean;
    verifiedBy: z.ZodOptional<z.ZodString>;
    verifiedAt: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>>;
    feedback: z.ZodOptional<z.ZodString>;
    isCorrect: z.ZodOptional<z.ZodBoolean>;
    sourceEntityType: z.ZodOptional<z.ZodString>;
    sourceEntityId: z.ZodOptional<z.ZodString>;
    relationshipType: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>;
    updatedAt: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>;
    tagId: z.ZodString;
}, "id" | "confidence" | "createdAt" | "updatedAt" | "isVerified">, "strip", z.ZodTypeAny, {
    method: string;
    entityType: string;
    entityId: string;
    tagId: string;
    appliedBy?: string | undefined;
    aiProvider?: string | undefined;
    aiModel?: string | undefined;
    aiResponse?: Record<string, any> | undefined;
    aiReasoning?: string | undefined;
    verifiedBy?: string | undefined;
    verifiedAt?: Date | undefined;
    feedback?: string | undefined;
    isCorrect?: boolean | undefined;
    sourceEntityType?: string | undefined;
    sourceEntityId?: string | undefined;
    relationshipType?: string | undefined;
}, {
    method: string;
    entityType: string;
    entityId: string;
    tagId: string;
    appliedBy?: string | undefined;
    aiProvider?: string | undefined;
    aiModel?: string | undefined;
    aiResponse?: Record<string, any> | undefined;
    aiReasoning?: string | undefined;
    verifiedBy?: string | undefined;
    verifiedAt?: string | Date | undefined;
    feedback?: string | undefined;
    isCorrect?: boolean | undefined;
    sourceEntityType?: string | undefined;
    sourceEntityId?: string | undefined;
    relationshipType?: string | undefined;
}>;
export declare const EntityTagUpdateSchema: z.ZodObject<{
    method: z.ZodOptional<z.ZodString>;
    entityType: z.ZodOptional<z.ZodString>;
    entityId: z.ZodOptional<z.ZodString>;
    appliedBy: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    aiProvider: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    aiModel: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    aiResponse: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    aiReasoning: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    verifiedBy: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    verifiedAt: z.ZodOptional<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>>>;
    feedback: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    isCorrect: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    sourceEntityType: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    sourceEntityId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    relationshipType: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    tagId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    method?: string | undefined;
    entityType?: string | undefined;
    entityId?: string | undefined;
    appliedBy?: string | undefined;
    aiProvider?: string | undefined;
    aiModel?: string | undefined;
    aiResponse?: Record<string, any> | undefined;
    aiReasoning?: string | undefined;
    verifiedBy?: string | undefined;
    verifiedAt?: Date | undefined;
    feedback?: string | undefined;
    isCorrect?: boolean | undefined;
    sourceEntityType?: string | undefined;
    sourceEntityId?: string | undefined;
    relationshipType?: string | undefined;
    tagId?: string | undefined;
}, {
    method?: string | undefined;
    entityType?: string | undefined;
    entityId?: string | undefined;
    appliedBy?: string | undefined;
    aiProvider?: string | undefined;
    aiModel?: string | undefined;
    aiResponse?: Record<string, any> | undefined;
    aiReasoning?: string | undefined;
    verifiedBy?: string | undefined;
    verifiedAt?: string | Date | undefined;
    feedback?: string | undefined;
    isCorrect?: boolean | undefined;
    sourceEntityType?: string | undefined;
    sourceEntityId?: string | undefined;
    relationshipType?: string | undefined;
    tagId?: string | undefined;
}>;
export declare const EntityTagResponseSchema: z.ZodObject<{
    id: z.ZodString;
    entityType: z.ZodString;
    entityId: z.ZodString;
    method: z.ZodString;
    confidence: z.ZodNumber;
    appliedBy: z.ZodOptional<z.ZodString>;
    aiProvider: z.ZodOptional<z.ZodString>;
    aiModel: z.ZodOptional<z.ZodString>;
    aiResponse: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    aiReasoning: z.ZodOptional<z.ZodString>;
    isVerified: z.ZodBoolean;
    verifiedBy: z.ZodOptional<z.ZodString>;
    verifiedAt: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>>;
    feedback: z.ZodOptional<z.ZodString>;
    isCorrect: z.ZodOptional<z.ZodBoolean>;
    sourceEntityType: z.ZodOptional<z.ZodString>;
    sourceEntityId: z.ZodOptional<z.ZodString>;
    relationshipType: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>;
    updatedAt: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>;
    tagId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    method: string;
    id: string;
    confidence: number;
    createdAt: Date;
    updatedAt: Date;
    entityType: string;
    entityId: string;
    isVerified: boolean;
    tagId: string;
    appliedBy?: string | undefined;
    aiProvider?: string | undefined;
    aiModel?: string | undefined;
    aiResponse?: Record<string, any> | undefined;
    aiReasoning?: string | undefined;
    verifiedBy?: string | undefined;
    verifiedAt?: Date | undefined;
    feedback?: string | undefined;
    isCorrect?: boolean | undefined;
    sourceEntityType?: string | undefined;
    sourceEntityId?: string | undefined;
    relationshipType?: string | undefined;
}, {
    method: string;
    id: string;
    confidence: number;
    createdAt: string | Date;
    updatedAt: string | Date;
    entityType: string;
    entityId: string;
    isVerified: boolean;
    tagId: string;
    appliedBy?: string | undefined;
    aiProvider?: string | undefined;
    aiModel?: string | undefined;
    aiResponse?: Record<string, any> | undefined;
    aiReasoning?: string | undefined;
    verifiedBy?: string | undefined;
    verifiedAt?: string | Date | undefined;
    feedback?: string | undefined;
    isCorrect?: boolean | undefined;
    sourceEntityType?: string | undefined;
    sourceEntityId?: string | undefined;
    relationshipType?: string | undefined;
}>;
export declare const EntityTagQuerySchema: z.ZodObject<{
    page: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    limit: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    sortBy: z.ZodOptional<z.ZodEnum<["id", "entityType", "entityId", "method", "confidence", "appliedBy", "aiProvider", "aiModel", "aiResponse", "aiReasoning", "isVerified", "verifiedBy", "verifiedAt", "feedback", "isCorrect", "sourceEntityType", "sourceEntityId", "relationshipType", "createdAt", "updatedAt", "tagId"]>>;
    sortOrder: z.ZodDefault<z.ZodOptional<z.ZodEnum<["asc", "desc"]>>>;
    search: z.ZodOptional<z.ZodString>;
    entityType: z.ZodOptional<z.ZodString>;
    entityId: z.ZodOptional<z.ZodString>;
    method: z.ZodOptional<z.ZodString>;
    confidence: z.ZodOptional<z.ZodNumber>;
    appliedBy: z.ZodOptional<z.ZodString>;
    aiProvider: z.ZodOptional<z.ZodString>;
    aiModel: z.ZodOptional<z.ZodString>;
    aiResponse: z.ZodOptional<z.ZodAny>;
    aiReasoning: z.ZodOptional<z.ZodString>;
    isVerified: z.ZodOptional<z.ZodBoolean>;
    verifiedBy: z.ZodOptional<z.ZodString>;
    verifiedAt: z.ZodOptional<z.ZodAny>;
    feedback: z.ZodOptional<z.ZodString>;
    isCorrect: z.ZodOptional<z.ZodBoolean>;
    sourceEntityType: z.ZodOptional<z.ZodString>;
    sourceEntityId: z.ZodOptional<z.ZodString>;
    relationshipType: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodOptional<z.ZodAny>;
    updatedAt: z.ZodOptional<z.ZodAny>;
    tagId: z.ZodOptional<z.ZodString>;
    include: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    page: number;
    limit: number;
    sortOrder: "asc" | "desc";
    method?: string | undefined;
    search?: string | undefined;
    confidence?: number | undefined;
    createdAt?: any;
    updatedAt?: any;
    sortBy?: "method" | "id" | "confidence" | "createdAt" | "updatedAt" | "entityType" | "entityId" | "appliedBy" | "aiProvider" | "aiModel" | "aiResponse" | "aiReasoning" | "isVerified" | "verifiedBy" | "verifiedAt" | "feedback" | "isCorrect" | "sourceEntityType" | "sourceEntityId" | "relationshipType" | "tagId" | undefined;
    include?: {} | undefined;
    entityType?: string | undefined;
    entityId?: string | undefined;
    appliedBy?: string | undefined;
    aiProvider?: string | undefined;
    aiModel?: string | undefined;
    aiResponse?: any;
    aiReasoning?: string | undefined;
    isVerified?: boolean | undefined;
    verifiedBy?: string | undefined;
    verifiedAt?: any;
    feedback?: string | undefined;
    isCorrect?: boolean | undefined;
    sourceEntityType?: string | undefined;
    sourceEntityId?: string | undefined;
    relationshipType?: string | undefined;
    tagId?: string | undefined;
}, {
    method?: string | undefined;
    search?: string | undefined;
    page?: number | undefined;
    limit?: number | undefined;
    confidence?: number | undefined;
    createdAt?: any;
    updatedAt?: any;
    sortBy?: "method" | "id" | "confidence" | "createdAt" | "updatedAt" | "entityType" | "entityId" | "appliedBy" | "aiProvider" | "aiModel" | "aiResponse" | "aiReasoning" | "isVerified" | "verifiedBy" | "verifiedAt" | "feedback" | "isCorrect" | "sourceEntityType" | "sourceEntityId" | "relationshipType" | "tagId" | undefined;
    sortOrder?: "asc" | "desc" | undefined;
    include?: {} | undefined;
    entityType?: string | undefined;
    entityId?: string | undefined;
    appliedBy?: string | undefined;
    aiProvider?: string | undefined;
    aiModel?: string | undefined;
    aiResponse?: any;
    aiReasoning?: string | undefined;
    isVerified?: boolean | undefined;
    verifiedBy?: string | undefined;
    verifiedAt?: any;
    feedback?: string | undefined;
    isCorrect?: boolean | undefined;
    sourceEntityType?: string | undefined;
    sourceEntityId?: string | undefined;
    relationshipType?: string | undefined;
    tagId?: string | undefined;
}>;
export type EntityTag = z.infer<typeof EntityTagSchema>;
export type EntityTagCreate = z.infer<typeof EntityTagCreateSchema>;
export type EntityTagUpdate = z.infer<typeof EntityTagUpdateSchema>;
export type EntityTagResponse = z.infer<typeof EntityTagResponseSchema>;
export type EntityTagQuery = z.infer<typeof EntityTagQuerySchema>;
//# sourceMappingURL=entity-tag.d.ts.map