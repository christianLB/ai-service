/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/documents/upload": {
    /** Upload and analyze document */
    post: operations["uploadDocument"];
  };
  "/documents": {
    /** List documents */
    get: operations["listDocuments"];
  };
  "/documents/{documentId}": {
    /** Get document details */
    get: operations["getDocument"];
    /** Delete document */
    delete: operations["deleteDocument"];
  };
  "/documents/{documentId}/analyze": {
    /** Analyze document */
    post: operations["analyzeDocument"];
  };
  "/documents/{documentId}/analysis": {
    /** Get document analysis */
    get: operations["getDocumentAnalysis"];
  };
  "/documents/{documentId}/question": {
    /** Ask question about document */
    post: operations["questionDocument"];
  };
  "/documents/search": {
    /** Semantic search across documents */
    post: operations["searchDocuments"];
  };
  "/documents/stats/overview": {
    /** Get document statistics */
    get: operations["getDocumentStats"];
  };
  "/trading/ai-status": {
    /** Get AI provider status */
    get: operations["getAIStatus"];
  };
  "/trading/test-claude": {
    /** Test Claude integration */
    get: operations["testClaude"];
  };
  "/trading/strategies/generate": {
    /** Generate trading strategy with AI */
    post: operations["generateStrategy"];
  };
  "/trading/analyze": {
    /** Analyze trading opportunity */
    post: operations["analyzeTradingOpportunity"];
  };
  "/trading/market-analysis": {
    /** Analyze market conditions */
    post: operations["analyzeMarket"];
  };
  "/integrations/configs": {
    /** List AI provider configurations */
    get: operations["listAIConfigs"];
    /** Update AI provider configuration */
    post: operations["updateAIConfig"];
  };
  "/integrations/configs/claude/{configKey}": {
    /** Get Claude configuration */
    get: operations["getClaudeConfig"];
  };
  "/integrations/configs/openai/{configKey}": {
    /** Get OpenAI configuration */
    get: operations["getOpenAIConfig"];
  };
  "/financial/transactions/categorize": {
    /** Categorize financial transactions */
    post: operations["categorizeTransactions"];
  };
  "/financial/ai/learning-stats": {
    /** Get AI learning statistics */
    get: operations["getAILearningStats"];
  };
  "/financial/ai/feedback": {
    /** Provide categorization feedback */
    post: operations["provideFeedback"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Document: {
      id: string;
      filename: string;
      mimeType: string;
      size: number;
      analyzed?: boolean;
      analysis?: components["schemas"]["DocumentAnalysis"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    DocumentAnalysis: {
      summary?: string;
      entities?: components["schemas"]["Entity"][];
      topics?: components["schemas"]["Topic"][];
      sentiment?: components["schemas"]["Sentiment"];
      language?: string;
    };
    Entity: {
      text?: string;
      /** @enum {string} */
      type?: "person" | "organization" | "location" | "date" | "money" | "other";
      confidence?: number;
    };
    Topic: {
      name?: string;
      confidence?: number;
    };
    Sentiment: {
      score?: number;
      /** @enum {string} */
      label?: "positive" | "negative" | "neutral";
    };
    AnalyzeDocumentRequest: {
      /** @default true */
      extractEntities?: boolean;
      /** @default true */
      detectTopics?: boolean;
      /** @default true */
      analyzeSentiment?: boolean;
    };
    DocumentQuestionRequest: {
      /** @description Question to ask about the document */
      question: string;
    };
    DocumentSearchRequest: {
      /** @description Search query */
      query: string;
      /** @default 10 */
      limit?: number;
      /**
       * @description Similarity threshold
       * @default 0.7
       */
      threshold?: number;
    };
    DocumentSearchResult: {
      documentId?: string;
      filename?: string;
      snippet?: string;
      score?: number;
    };
    GenerateStrategyRequest: {
      /** @description Current market conditions */
      marketConditions: string;
      /** @enum {string} */
      riskTolerance: "low" | "medium" | "high";
      targetReturn?: number;
      /** @enum {string} */
      timeHorizon?: "short" | "medium" | "long";
    };
    GeneratedStrategy: {
      name?: string;
      description?: string;
      type?: string;
      parameters?: {
        [key: string]: unknown;
      };
      riskScore?: number;
      expectedReturn?: number;
      reasoning?: string;
    };
    AnalyzeTradingRequest: {
      symbol: string;
      data: {
        [key: string]: unknown;
      };
      strategy?: string;
    };
    TradingAnalysis: {
      /** @enum {string} */
      recommendation?: "buy" | "sell" | "hold";
      confidence?: number;
      reasoning?: string;
      /** @enum {string} */
      riskLevel?: "low" | "medium" | "high";
      suggestedAction?: {
        [key: string]: unknown;
      };
    };
    MarketAnalysisRequest: {
      symbols: string[];
      /** @enum {string} */
      timeframe?: "1h" | "4h" | "1d" | "1w";
    };
    MarketAnalysis: {
      /** @enum {string} */
      overallTrend?: "bullish" | "bearish" | "neutral";
      /** @enum {string} */
      volatility?: "low" | "medium" | "high";
      opportunities?: {
          symbol?: string;
          action?: string;
          reasoning?: string;
        }[];
    };
    AIConfig: {
      /** @enum {string} */
      provider?: "openai" | "claude" | "anthropic";
      model?: string;
      apiKey?: string;
      settings?: {
        [key: string]: unknown;
      };
      isActive?: boolean;
    };
    UpdateAIConfigRequest: {
      /** @enum {string} */
      provider: "openai" | "claude" | "anthropic";
      config: {
        [key: string]: unknown;
      };
    };
    CategorizeTransactionsRequest: {
      transactions: {
          id?: string;
          description?: string;
          amount?: number;
          /** Format: date */
          date?: string;
        }[];
    };
    CategorizationResult: {
      transactionId?: string;
      category?: string;
      confidence?: number;
      tags?: string[];
    };
    CategorizationFeedbackRequest: {
      transactionId: string;
      correctCategory: string;
      feedback?: string;
    };
    AILearningStats: {
      totalCategorized?: number;
      accuracy?: number;
      confidenceAverage?: number;
      categoriesUsed?: {
          category?: string;
          count?: number;
        }[];
    };
    AIStatus: {
      providers?: ({
          name?: string;
          /** @enum {string} */
          status?: "active" | "inactive" | "error";
          model?: string;
          /** Format: date-time */
          lastUsed?: string;
        })[];
    };
    DocumentResponse: {
      success: boolean;
      data: components["schemas"]["Document"];
    };
    DocumentListResponse: {
      success: boolean;
      data: components["schemas"]["Document"][];
      pagination: components["schemas"]["PaginationMeta"];
    };
    DocumentAnalysisResponse: {
      success: boolean;
      data: components["schemas"]["DocumentAnalysis"];
    };
    DocumentAnswerResponse: {
      success: boolean;
      data: {
        answer?: string;
        confidence?: number;
        sources?: string[];
      };
    };
    DocumentSearchResponse: {
      success: boolean;
      data: components["schemas"]["DocumentSearchResult"][];
    };
    DocumentStatsResponse: {
      success: boolean;
      data: {
        totalDocuments?: number;
        analyzedDocuments?: number;
        totalSize?: number;
        averageAnalysisTime?: number;
      };
    };
    AIStatusResponse: {
      success: boolean;
      data: components["schemas"]["AIStatus"];
    };
    ClaudeTestResponse: {
      success: boolean;
      data: {
        status?: string;
        response?: string;
        model?: string;
      };
    };
    GeneratedStrategyResponse: {
      success: boolean;
      data: components["schemas"]["GeneratedStrategy"];
    };
    TradingAnalysisResponse: {
      success: boolean;
      data: components["schemas"]["TradingAnalysis"];
    };
    MarketAnalysisResponse: {
      success: boolean;
      data: components["schemas"]["MarketAnalysis"];
    };
    AIConfigResponse: {
      success: boolean;
      data: components["schemas"]["AIConfig"];
    };
    AIConfigListResponse: {
      success: boolean;
      data: components["schemas"]["AIConfig"][];
    };
    CategorizationResponse: {
      success: boolean;
      data: components["schemas"]["CategorizationResult"][];
    };
    AILearningStatsResponse: {
      success: boolean;
      data: components["schemas"]["AILearningStats"];
    };
    MessageResponse: {
      success: boolean;
      message: string;
    };
    PaginationMeta: {
      page: number;
      limit: number;
      total: number;
      totalPages: number;
    };
    ErrorResponse: {
      /** @default false */
      success: boolean;
      error: {
        code: string;
        message: string;
        details?: {
          [key: string]: unknown;
        };
      };
    };
  };
  responses: {
    /** @description Bad request */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Unauthorized */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Not found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: {
    /** @description Page number */
    PageParam?: number;
    /** @description Items per page */
    LimitParam?: number;
    /** @description Document identifier */
    DocumentIdParam: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Upload and analyze document */
  uploadDocument: {
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description Document file (PDF, DOCX, TXT)
           */
          file: string;
          /**
           * @description Automatically analyze after upload
           * @default true
           */
          autoAnalyze?: boolean;
        };
      };
    };
    responses: {
      /** @description Document uploaded successfully */
      201: {
        content: {
          "application/json": components["schemas"]["DocumentResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** List documents */
  listDocuments: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        /** @description Filter by analysis status */
        analyzed?: boolean;
      };
    };
    responses: {
      /** @description Documents retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentListResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Get document details */
  getDocument: {
    parameters: {
      path: {
        documentId: components["parameters"]["DocumentIdParam"];
      };
    };
    responses: {
      /** @description Document retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Delete document */
  deleteDocument: {
    parameters: {
      path: {
        documentId: components["parameters"]["DocumentIdParam"];
      };
    };
    responses: {
      /** @description Document deleted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Analyze document */
  analyzeDocument: {
    parameters: {
      path: {
        documentId: components["parameters"]["DocumentIdParam"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AnalyzeDocumentRequest"];
      };
    };
    responses: {
      /** @description Analysis completed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentAnalysisResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get document analysis */
  getDocumentAnalysis: {
    parameters: {
      path: {
        documentId: components["parameters"]["DocumentIdParam"];
      };
    };
    responses: {
      /** @description Analysis retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentAnalysisResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Ask question about document */
  questionDocument: {
    parameters: {
      path: {
        documentId: components["parameters"]["DocumentIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DocumentQuestionRequest"];
      };
    };
    responses: {
      /** @description Question answered successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentAnswerResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Semantic search across documents */
  searchDocuments: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DocumentSearchRequest"];
      };
    };
    responses: {
      /** @description Search completed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentSearchResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Get document statistics */
  getDocumentStats: {
    responses: {
      /** @description Statistics retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentStatsResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Get AI provider status */
  getAIStatus: {
    responses: {
      /** @description AI status retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AIStatusResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Test Claude integration */
  testClaude: {
    responses: {
      /** @description Claude test successful */
      200: {
        content: {
          "application/json": components["schemas"]["ClaudeTestResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      /** @description Claude service unavailable */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Generate trading strategy with AI */
  generateStrategy: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateStrategyRequest"];
      };
    };
    responses: {
      /** @description Strategy generated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["GeneratedStrategyResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Analyze trading opportunity */
  analyzeTradingOpportunity: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AnalyzeTradingRequest"];
      };
    };
    responses: {
      /** @description Analysis completed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["TradingAnalysisResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Analyze market conditions */
  analyzeMarket: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MarketAnalysisRequest"];
      };
    };
    responses: {
      /** @description Market analysis completed */
      200: {
        content: {
          "application/json": components["schemas"]["MarketAnalysisResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** List AI provider configurations */
  listAIConfigs: {
    responses: {
      /** @description Configurations retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AIConfigListResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Update AI provider configuration */
  updateAIConfig: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAIConfigRequest"];
      };
    };
    responses: {
      /** @description Configuration updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AIConfigResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Get Claude configuration */
  getClaudeConfig: {
    parameters: {
      path: {
        /** @description Configuration key */
        configKey: string;
      };
    };
    responses: {
      /** @description Configuration retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AIConfigResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get OpenAI configuration */
  getOpenAIConfig: {
    parameters: {
      path: {
        /** @description Configuration key */
        configKey: string;
      };
    };
    responses: {
      /** @description Configuration retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AIConfigResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Categorize financial transactions */
  categorizeTransactions: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategorizeTransactionsRequest"];
      };
    };
    responses: {
      /** @description Categorization completed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["CategorizationResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Get AI learning statistics */
  getAILearningStats: {
    responses: {
      /** @description Statistics retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AILearningStatsResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Provide categorization feedback */
  provideFeedback: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategorizationFeedbackRequest"];
      };
    };
    responses: {
      /** @description Feedback recorded successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
}
