/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health/live": {
    /** Liveness probe */
    get: operations["getLiveness"];
  };
  "/health/ready": {
    /** Readiness probe */
    get: operations["getReadiness"];
  };
  "/metrics": {
    /** Prometheus metrics */
    get: operations["getMetrics"];
  };
  "/api/auth/register": external["auth.yaml"]["paths"]["/auth/register"];
  "/api/auth/login": external["auth.yaml"]["paths"]["/auth/login"];
  "/api/auth/refresh": external["auth.yaml"]["paths"]["/auth/refresh"];
  "/api/auth/logout": external["auth.yaml"]["paths"]["/auth/logout"];
  "/api/auth/profile": external["auth.yaml"]["paths"]["/auth/profile"];
  "/api/trading/strategies": external["trading.yaml"]["paths"]["/trading/strategies"];
  "/api/trading/strategies/{strategyId}": external["trading.yaml"]["paths"]["/trading/strategies/{strategyId}"];
  "/api/trading/positions": external["trading.yaml"]["paths"]["/trading/positions"];
  "/api/trading/execute": external["trading.yaml"]["paths"]["/trading/execute"];
  "/api/arbitrage/deploy": external["trading.yaml"]["paths"]["/arbitrage/deploy"];
  "/api/documents/upload": external["ai-core.yaml"]["paths"]["/documents/upload"];
  "/api/documents": external["ai-core.yaml"]["paths"]["/documents"];
  "/api/documents/{documentId}": external["ai-core.yaml"]["paths"]["/documents/{documentId}"];
  "/api/documents/search": external["ai-core.yaml"]["paths"]["/documents/search"];
  "/api/telegram/webhook": external["comm.yaml"]["paths"]["/telegram/webhook"];
  "/api/telegram/send-message": external["comm.yaml"]["paths"]["/telegram/send-message"];
  "/api/email/send-invoice": external["comm.yaml"]["paths"]["/email/send-invoice"];
  "/api/alerts": external["comm.yaml"]["paths"]["/alerts"];
  "/api/financial/accounts": external["financial.yaml"]["paths"]["/api/financial/accounts"];
  "/api/financial/accounts/{id}": external["financial.yaml"]["paths"]["/api/financial/accounts/{id}"];
  "/api/financial/clients": external["financial.yaml"]["paths"]["/api/financial/clients"];
  "/api/financial/clients/{id}": external["financial.yaml"]["paths"]["/api/financial/clients/{id}"];
  "/api/financial/invoices": external["financial.yaml"]["paths"]["/api/financial/invoices"];
  "/api/financial/invoices/{id}": external["financial.yaml"]["paths"]["/api/financial/invoices/{id}"];
  "/api/financial/transactions": external["financial.yaml"]["paths"]["/api/financial/transactions"];
  "/api/financial/transactions/{id}": external["financial.yaml"]["paths"]["/api/financial/transactions/{id}"];
  "/api/financial/transactions/export": external["financial.yaml"]["paths"]["/api/financial/transactions/export"];
  "/api/financial/attachments": external["financial.yaml"]["paths"]["/api/financial/attachments"];
  "/api/financial/attachments/{id}": external["financial.yaml"]["paths"]["/api/financial/attachments/{id}"];
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SuccessResponse: {
      /** @default true */
      success: boolean;
      /** @description Response data */
      data?: Record<string, never>;
      /** @description Additional metadata */
      meta?: Record<string, never>;
    };
    ErrorResponse: {
      /** @default false */
      success: boolean;
      error: {
        code: string;
        message: string;
        details?: Record<string, never>;
      };
    };
    Error: external["financial.yaml"]["components"]["schemas"]["Error"];
    PaginationInfo: external["financial.yaml"]["components"]["schemas"]["PaginationInfo"];
    Account: external["financial.yaml"]["components"]["schemas"]["Account"];
    AccountListResponse: external["financial.yaml"]["components"]["schemas"]["AccountListResponse"];
    Client: external["financial.yaml"]["components"]["schemas"]["Client"];
    ClientListResponse: external["financial.yaml"]["components"]["schemas"]["ClientListResponse"];
    Invoice: external["financial.yaml"]["components"]["schemas"]["Invoice"];
    InvoiceListResponse: external["financial.yaml"]["components"]["schemas"]["InvoiceListResponse"];
    Transaction: external["financial.yaml"]["components"]["schemas"]["Transaction"];
    TransactionListResponse: external["financial.yaml"]["components"]["schemas"]["TransactionListResponse"];
    Attachment: external["financial.yaml"]["components"]["schemas"]["Attachment"];
    AttachmentListResponse: external["financial.yaml"]["components"]["schemas"]["AttachmentListResponse"];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export interface external {
  "ai-core.yaml": {
    paths: {
      "/documents/upload": {
        /** Upload and analyze document */
        post: operations["uploadDocument"];
      };
      "/documents": {
        /** List documents */
        get: operations["listDocuments"];
      };
      "/documents/{documentId}": {
        /** Get document details */
        get: operations["getDocument"];
        /** Delete document */
        delete: operations["deleteDocument"];
      };
      "/documents/{documentId}/analyze": {
        /** Analyze document */
        post: operations["analyzeDocument"];
      };
      "/documents/{documentId}/analysis": {
        /** Get document analysis */
        get: operations["getDocumentAnalysis"];
      };
      "/documents/{documentId}/question": {
        /** Ask question about document */
        post: operations["questionDocument"];
      };
      "/documents/search": {
        /** Semantic search across documents */
        post: operations["searchDocuments"];
      };
      "/documents/stats/overview": {
        /** Get document statistics */
        get: operations["getDocumentStats"];
      };
      "/trading/ai-status": {
        /** Get AI provider status */
        get: operations["getAIStatus"];
      };
      "/trading/test-claude": {
        /** Test Claude integration */
        get: operations["testClaude"];
      };
      "/trading/strategies/generate": {
        /** Generate trading strategy with AI */
        post: operations["generateStrategy"];
      };
      "/trading/analyze": {
        /** Analyze trading opportunity */
        post: operations["analyzeTradingOpportunity"];
      };
      "/trading/market-analysis": {
        /** Analyze market conditions */
        post: operations["analyzeMarket"];
      };
      "/integrations/configs": {
        /** List AI provider configurations */
        get: operations["listAIConfigs"];
        /** Update AI provider configuration */
        post: operations["updateAIConfig"];
      };
      "/integrations/configs/claude/{configKey}": {
        /** Get Claude configuration */
        get: operations["getClaudeConfig"];
      };
      "/integrations/configs/openai/{configKey}": {
        /** Get OpenAI configuration */
        get: operations["getOpenAIConfig"];
      };
      "/financial/transactions/categorize": {
        /** Categorize financial transactions */
        post: operations["categorizeTransactions"];
      };
      "/financial/ai/learning-stats": {
        /** Get AI learning statistics */
        get: operations["getAILearningStats"];
      };
      "/financial/ai/feedback": {
        /** Provide categorization feedback */
        post: operations["provideFeedback"];
      };
    };
    webhooks: Record<string, never>;
    components: {
      schemas: {
        Document: {
          id: string;
          filename: string;
          mimeType: string;
          size: number;
          analyzed?: boolean;
          analysis?: external["ai-core.yaml"]["components"]["schemas"]["DocumentAnalysis"];
          /** Format: date-time */
          createdAt: string;
          /** Format: date-time */
          updatedAt?: string;
        };
        DocumentAnalysis: {
          summary?: string;
          entities?: external["ai-core.yaml"]["components"]["schemas"]["Entity"][];
          topics?: external["ai-core.yaml"]["components"]["schemas"]["Topic"][];
          sentiment?: external["ai-core.yaml"]["components"]["schemas"]["Sentiment"];
          language?: string;
        };
        Entity: {
          text?: string;
          /** @enum {string} */
          type?: "person" | "organization" | "location" | "date" | "money" | "other";
          confidence?: number;
        };
        Topic: {
          name?: string;
          confidence?: number;
        };
        Sentiment: {
          score?: number;
          /** @enum {string} */
          label?: "positive" | "negative" | "neutral";
        };
        AnalyzeDocumentRequest: {
          /** @default true */
          extractEntities?: boolean;
          /** @default true */
          detectTopics?: boolean;
          /** @default true */
          analyzeSentiment?: boolean;
        };
        DocumentQuestionRequest: {
          /** @description Question to ask about the document */
          question: string;
        };
        DocumentSearchRequest: {
          /** @description Search query */
          query: string;
          /** @default 10 */
          limit?: number;
          /**
           * @description Similarity threshold
           * @default 0.7
           */
          threshold?: number;
        };
        DocumentSearchResult: {
          documentId?: string;
          filename?: string;
          snippet?: string;
          score?: number;
        };
        GenerateStrategyRequest: {
          /** @description Current market conditions */
          marketConditions: string;
          /** @enum {string} */
          riskTolerance: "low" | "medium" | "high";
          targetReturn?: number;
          /** @enum {string} */
          timeHorizon?: "short" | "medium" | "long";
        };
        GeneratedStrategy: {
          name?: string;
          description?: string;
          type?: string;
          parameters?: {
            [key: string]: unknown;
          };
          riskScore?: number;
          expectedReturn?: number;
          reasoning?: string;
        };
        AnalyzeTradingRequest: {
          symbol: string;
          data: {
            [key: string]: unknown;
          };
          strategy?: string;
        };
        TradingAnalysis: {
          /** @enum {string} */
          recommendation?: "buy" | "sell" | "hold";
          confidence?: number;
          reasoning?: string;
          /** @enum {string} */
          riskLevel?: "low" | "medium" | "high";
          suggestedAction?: {
            [key: string]: unknown;
          };
        };
        MarketAnalysisRequest: {
          symbols: string[];
          /** @enum {string} */
          timeframe?: "1h" | "4h" | "1d" | "1w";
        };
        MarketAnalysis: {
          /** @enum {string} */
          overallTrend?: "bullish" | "bearish" | "neutral";
          /** @enum {string} */
          volatility?: "low" | "medium" | "high";
          opportunities?: {
              symbol?: string;
              action?: string;
              reasoning?: string;
            }[];
        };
        AIConfig: {
          /** @enum {string} */
          provider?: "openai" | "claude" | "anthropic";
          model?: string;
          apiKey?: string;
          settings?: {
            [key: string]: unknown;
          };
          isActive?: boolean;
        };
        UpdateAIConfigRequest: {
          /** @enum {string} */
          provider: "openai" | "claude" | "anthropic";
          config: {
            [key: string]: unknown;
          };
        };
        CategorizeTransactionsRequest: {
          transactions: {
              id?: string;
              description?: string;
              amount?: number;
              /** Format: date */
              date?: string;
            }[];
        };
        CategorizationResult: {
          transactionId?: string;
          category?: string;
          confidence?: number;
          tags?: string[];
        };
        CategorizationFeedbackRequest: {
          transactionId: string;
          correctCategory: string;
          feedback?: string;
        };
        AILearningStats: {
          totalCategorized?: number;
          accuracy?: number;
          confidenceAverage?: number;
          categoriesUsed?: {
              category?: string;
              count?: number;
            }[];
        };
        AIStatus: {
          providers?: ({
              name?: string;
              /** @enum {string} */
              status?: "active" | "inactive" | "error";
              model?: string;
              /** Format: date-time */
              lastUsed?: string;
            })[];
        };
        DocumentResponse: {
          success: boolean;
          data: external["ai-core.yaml"]["components"]["schemas"]["Document"];
        };
        DocumentListResponse: {
          success: boolean;
          data: external["ai-core.yaml"]["components"]["schemas"]["Document"][];
          pagination: external["ai-core.yaml"]["components"]["schemas"]["PaginationMeta"];
        };
        DocumentAnalysisResponse: {
          success: boolean;
          data: external["ai-core.yaml"]["components"]["schemas"]["DocumentAnalysis"];
        };
        DocumentAnswerResponse: {
          success: boolean;
          data: {
            answer?: string;
            confidence?: number;
            sources?: string[];
          };
        };
        DocumentSearchResponse: {
          success: boolean;
          data: external["ai-core.yaml"]["components"]["schemas"]["DocumentSearchResult"][];
        };
        DocumentStatsResponse: {
          success: boolean;
          data: {
            totalDocuments?: number;
            analyzedDocuments?: number;
            totalSize?: number;
            averageAnalysisTime?: number;
          };
        };
        AIStatusResponse: {
          success: boolean;
          data: external["ai-core.yaml"]["components"]["schemas"]["AIStatus"];
        };
        ClaudeTestResponse: {
          success: boolean;
          data: {
            status?: string;
            response?: string;
            model?: string;
          };
        };
        GeneratedStrategyResponse: {
          success: boolean;
          data: external["ai-core.yaml"]["components"]["schemas"]["GeneratedStrategy"];
        };
        TradingAnalysisResponse: {
          success: boolean;
          data: external["ai-core.yaml"]["components"]["schemas"]["TradingAnalysis"];
        };
        MarketAnalysisResponse: {
          success: boolean;
          data: external["ai-core.yaml"]["components"]["schemas"]["MarketAnalysis"];
        };
        AIConfigResponse: {
          success: boolean;
          data: external["ai-core.yaml"]["components"]["schemas"]["AIConfig"];
        };
        AIConfigListResponse: {
          success: boolean;
          data: external["ai-core.yaml"]["components"]["schemas"]["AIConfig"][];
        };
        CategorizationResponse: {
          success: boolean;
          data: external["ai-core.yaml"]["components"]["schemas"]["CategorizationResult"][];
        };
        AILearningStatsResponse: {
          success: boolean;
          data: external["ai-core.yaml"]["components"]["schemas"]["AILearningStats"];
        };
        MessageResponse: {
          success: boolean;
          message: string;
        };
        PaginationMeta: {
          page: number;
          limit: number;
          total: number;
          totalPages: number;
        };
        ErrorResponse: {
          /** @default false */
          success: boolean;
          error: {
            code: string;
            message: string;
            details?: {
              [key: string]: unknown;
            };
          };
        };
      };
      responses: {
        /** @description Bad request */
        BadRequest: {
          content: {
            "application/json": external["ai-core.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
        /** @description Unauthorized */
        Unauthorized: {
          content: {
            "application/json": external["ai-core.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not found */
        NotFound: {
          content: {
            "application/json": external["ai-core.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
      };
      parameters: {
        /** @description Page number */
        PageParam?: number;
        /** @description Items per page */
        LimitParam?: number;
        /** @description Document identifier */
        DocumentIdParam: string;
      };
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "auth.yaml": {
    paths: {
      "/auth/register": {
        /**
         * Register a new user
         * @description Create a new user account with email and password
         */
        post: operations["register"];
      };
      "/auth/login": {
        /**
         * Login user
         * @description Authenticate user with email and password
         */
        post: operations["login"];
      };
      "/auth/refresh": {
        /**
         * Refresh access token
         * @description Get a new access token using refresh token
         */
        post: operations["refreshToken"];
      };
      "/auth/logout": {
        /**
         * Logout user
         * @description Invalidate current access token
         */
        post: operations["logout"];
      };
      "/auth/forgot-password": {
        /**
         * Request password reset
         * @description Send password reset email to user
         */
        post: operations["forgotPassword"];
      };
      "/auth/reset-password": {
        /**
         * Reset password
         * @description Reset user password with token
         */
        post: operations["resetPassword"];
      };
      "/auth/profile": {
        /**
         * Get user profile
         * @description Get current user profile information
         */
        get: operations["getProfile"];
        /**
         * Update user profile
         * @description Update current user profile information
         */
        put: operations["updateProfile"];
      };
      "/auth/users": {
        /**
         * List all users
         * @description Get list of all users (admin only)
         */
        get: operations["listUsers"];
      };
      "/auth/users/{userId}": {
        /**
         * Delete user
         * @description Delete a user account (admin only)
         */
        delete: operations["deleteUser"];
      };
    };
    webhooks: Record<string, never>;
    components: {
      schemas: {
        RegisterRequest: {
          /**
           * Format: email
           * @description User email address
           */
          email: string;
          /**
           * Format: password
           * @description User password (min 8 characters)
           */
          password: string;
          /** @description User first name */
          firstName?: string;
          /** @description User last name */
          lastName?: string;
        };
        LoginRequest: {
          /**
           * Format: email
           * @description User email address
           */
          email: string;
          /**
           * Format: password
           * @description User password
           */
          password: string;
        };
        RefreshTokenRequest: {
          /** @description JWT refresh token */
          refreshToken: string;
        };
        ForgotPasswordRequest: {
          /**
           * Format: email
           * @description User email address
           */
          email: string;
        };
        ResetPasswordRequest: {
          /** @description Password reset token */
          token: string;
          /**
           * Format: password
           * @description New password (min 8 characters)
           */
          password: string;
        };
        UpdateProfileRequest: {
          /** @description User first name */
          firstName?: string;
          /** @description User last name */
          lastName?: string;
          /**
           * Format: email
           * @description User email address
           */
          email?: string;
        };
        AuthResponse: {
          /** @description Operation success status */
          success: boolean;
          data: {
            user: external["auth.yaml"]["components"]["schemas"]["UserProfile"];
            /** @description JWT access token */
            accessToken: string;
            /** @description JWT refresh token */
            refreshToken: string;
            /** @description Token expiration time in seconds */
            expiresIn?: number;
          };
        };
        UserProfile: {
          /** @description User unique identifier */
          id: string;
          /**
           * Format: email
           * @description User email address
           */
          email: string;
          /** @description User first name */
          firstName?: string;
          /** @description User last name */
          lastName?: string;
          role: external["auth.yaml"]["components"]["schemas"]["UserRole"];
          /** @description User active status */
          isActive: boolean;
          /**
           * Format: date-time
           * @description Account creation timestamp
           */
          createdAt: string;
          /**
           * Format: date-time
           * @description Last update timestamp
           */
          updatedAt?: string;
        };
        /**
         * @description User role for authorization
         * @enum {string}
         */
        UserRole: "ADMIN" | "USER";
        UserListResponse: {
          success: boolean;
          data: external["auth.yaml"]["components"]["schemas"]["UserProfile"][];
          pagination: external["auth.yaml"]["components"]["schemas"]["PaginationMeta"];
        };
        PaginationMeta: {
          /** @description Current page number */
          page: number;
          /** @description Items per page */
          limit: number;
          /** @description Total number of items */
          total: number;
          /** @description Total number of pages */
          totalPages: number;
        };
        MessageResponse: {
          success: boolean;
          /** @description Response message */
          message: string;
        };
        ErrorResponse: {
          /** @default false */
          success: boolean;
          error: {
            /** @description Error code */
            code: string;
            /** @description Error message */
            message: string;
            /** @description Additional error details */
            details?: {
              [key: string]: unknown;
            };
          };
        };
      };
      responses: {
        /** @description Bad request - Invalid input data */
        BadRequest: {
          content: {
            "application/json": external["auth.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
        /** @description Unauthorized - Invalid or missing authentication */
        Unauthorized: {
          content: {
            "application/json": external["auth.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
        /** @description Forbidden - Insufficient permissions */
        Forbidden: {
          content: {
            "application/json": external["auth.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not found - Resource does not exist */
        NotFound: {
          content: {
            "application/json": external["auth.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
        /** @description Too many requests - Rate limit exceeded */
        TooManyRequests: {
          content: {
            "application/json": external["auth.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
      };
      parameters: {
        /** @description Page number for pagination */
        PageParam?: number;
        /** @description Number of items per page */
        LimitParam?: number;
      };
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "comm.yaml": {
    paths: {
      "/telegram/webhook": {
        /**
         * Receive Telegram webhook
         * @description Endpoint for Telegram bot updates
         */
        post: operations["telegramWebhook"];
      };
      "/telegram/send-message": {
        /** Send Telegram message */
        post: operations["sendTelegramMessage"];
      };
      "/telegram/send-alert": {
        /** Send system alert via Telegram */
        post: operations["sendTelegramAlert"];
      };
      "/telegram/setup-webhook": {
        /** Configure Telegram webhook */
        post: operations["setupTelegramWebhook"];
      };
      "/telegram/status": {
        /** Get Telegram service status */
        get: operations["getTelegramStatus"];
      };
      "/email/send-invoice": {
        /** Send invoice email */
        post: operations["sendInvoiceEmail"];
      };
      "/email/send-reminder": {
        /** Send payment reminder */
        post: operations["sendPaymentReminder"];
      };
      "/email/send-receipt": {
        /** Send payment receipt */
        post: operations["sendPaymentReceipt"];
      };
      "/email/templates": {
        /** List email templates */
        get: operations["listEmailTemplates"];
      };
      "/websocket/send-to-user": {
        /** Send WebSocket message to user */
        post: operations["sendWebSocketToUser"];
      };
      "/websocket/broadcast": {
        /** Broadcast WebSocket message */
        post: operations["broadcastWebSocket"];
      };
      "/websocket/connected-users": {
        /** Get connected users */
        get: operations["getConnectedUsers"];
      };
      "/websocket/user-status/{userId}": {
        /** Check user connection status */
        get: operations["getUserConnectionStatus"];
      };
      "/alerts": {
        /** List alerts */
        get: operations["listAlerts"];
        /** Create alert */
        post: operations["createAlert"];
      };
      "/alerts/{alertId}/acknowledge": {
        /** Acknowledge alert */
        post: operations["acknowledgeAlert"];
      };
    };
    webhooks: Record<string, never>;
    components: {
      schemas: {
        /** @description Telegram bot update object */
        TelegramUpdate: {
          update_id?: number;
          message?: {
            message_id?: number;
            from?: {
              id?: number;
              first_name?: string;
              username?: string;
            };
            chat?: {
              id?: number;
              type?: string;
            };
            text?: string;
            date?: number;
          };
        };
        SendTelegramMessageRequest: {
          /** @description Telegram chat ID */
          chatId: string;
          /** @description Message text */
          text: string;
          /**
           * @description Text parsing mode
           * @enum {string}
           */
          parseMode?: "Markdown" | "HTML";
          /** @description Inline keyboard markup */
          replyMarkup?: Record<string, never>;
        };
        SendAlertRequest: {
          type: external["comm.yaml"]["components"]["schemas"]["AlertType"];
          message: string;
          priority: external["comm.yaml"]["components"]["schemas"]["AlertPriority"];
          details?: {
            [key: string]: unknown;
          };
        };
        SetupWebhookRequest: {
          /**
           * Format: uri
           * @description Webhook URL
           */
          url: string;
          /** @description Update types to receive */
          allowedUpdates?: string[];
        };
        TelegramStatus: {
          botUsername?: string;
          webhookUrl?: string;
          isActive?: boolean;
          /** Format: date-time */
          lastUpdate?: string;
          pendingUpdates?: number;
        };
        SendInvoiceEmailRequest: {
          /** Format: email */
          to: string;
          invoiceId: string;
          cc?: string[];
          bcc?: string[];
          /**
           * @default en
           * @enum {string}
           */
          language?: "en" | "es";
          /** @default true */
          attachPdf?: boolean;
        };
        SendReminderRequest: {
          /** Format: email */
          to: string;
          invoiceId: string;
          daysOverdue: number;
          /**
           * @default en
           * @enum {string}
           */
          language?: "en" | "es";
        };
        SendReceiptRequest: {
          /** Format: email */
          to: string;
          paymentId: string;
          amount: number;
          /** @default EUR */
          currency?: string;
          /**
           * @default en
           * @enum {string}
           */
          language?: "en" | "es";
        };
        EmailTemplate: {
          id?: string;
          name?: string;
          subject?: string;
          language?: string;
          variables?: string[];
        };
        EmailResult: {
          messageId?: string;
          accepted?: string[];
          rejected?: string[];
        };
        SendWebSocketMessageRequest: {
          userId: string;
          event: string;
          data: {
            [key: string]: unknown;
          };
        };
        BroadcastWebSocketRequest: {
          event: string;
          data: {
            [key: string]: unknown;
          };
          /** @description Optional list of user IDs to broadcast to */
          userIds?: string[];
        };
        ConnectedUser: {
          userId?: string;
          socketId?: string;
          /** Format: date-time */
          connectedAt?: string;
          rooms?: string[];
        };
        /** @enum {string} */
        AlertType: "transaction" | "sync_error" | "unusual_spending" | "system_error" | "security" | "performance";
        /** @enum {string} */
        AlertPriority: "critical" | "high" | "medium" | "low";
        Alert: {
          id: string;
          type: external["comm.yaml"]["components"]["schemas"]["AlertType"];
          message: string;
          priority: external["comm.yaml"]["components"]["schemas"]["AlertPriority"];
          details?: {
            [key: string]: unknown;
          };
          acknowledged?: boolean;
          acknowledgedBy?: string;
          /** Format: date-time */
          acknowledgedAt?: string;
          /** Format: date-time */
          createdAt: string;
        };
        CreateAlertRequest: {
          type: external["comm.yaml"]["components"]["schemas"]["AlertType"];
          message: string;
          priority: external["comm.yaml"]["components"]["schemas"]["AlertPriority"];
          details?: {
            [key: string]: unknown;
          };
          /** @description Notification channels */
          channels?: ("telegram" | "email" | "websocket")[];
        };
        TelegramMessageResponse: {
          success: boolean;
          data: {
            messageId?: number;
            chatId?: string;
          };
        };
        TelegramStatusResponse: {
          success: boolean;
          data: external["comm.yaml"]["components"]["schemas"]["TelegramStatus"];
        };
        EmailResponse: {
          success: boolean;
          data: external["comm.yaml"]["components"]["schemas"]["EmailResult"];
        };
        EmailTemplateListResponse: {
          success: boolean;
          data: external["comm.yaml"]["components"]["schemas"]["EmailTemplate"][];
        };
        BroadcastResponse: {
          success: boolean;
          data: {
            delivered?: number;
            failed?: number;
          };
        };
        ConnectedUsersResponse: {
          success: boolean;
          data: external["comm.yaml"]["components"]["schemas"]["ConnectedUser"][];
        };
        UserConnectionStatusResponse: {
          success: boolean;
          data: {
            isConnected?: boolean;
            /** Format: date-time */
            lastSeen?: string;
          };
        };
        AlertResponse: {
          success: boolean;
          data: external["comm.yaml"]["components"]["schemas"]["Alert"];
        };
        AlertListResponse: {
          success: boolean;
          data: external["comm.yaml"]["components"]["schemas"]["Alert"][];
          pagination: external["comm.yaml"]["components"]["schemas"]["PaginationMeta"];
        };
        MessageResponse: {
          success: boolean;
          message: string;
        };
        PaginationMeta: {
          page: number;
          limit: number;
          total: number;
          totalPages: number;
        };
        ErrorResponse: {
          /** @default false */
          success: boolean;
          error: {
            code: string;
            message: string;
            details?: {
              [key: string]: unknown;
            };
          };
        };
      };
      responses: {
        /** @description Bad request */
        BadRequest: {
          content: {
            "application/json": external["comm.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
        /** @description Unauthorized */
        Unauthorized: {
          content: {
            "application/json": external["comm.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not found */
        NotFound: {
          content: {
            "application/json": external["comm.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
      };
      parameters: {
        /** @description Page number */
        PageParam?: number;
        /** @description Items per page */
        LimitParam?: number;
      };
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "financial.yaml": {
    paths: {
      "/api/financial/accounts": {
        /** List bank accounts */
        get: operations["listAccounts"];
      };
      "/api/financial/accounts/{id}": {
        /** Get account by ID */
        get: operations["getAccount"];
      };
      "/api/financial/clients": {
        /** List clients */
        get: operations["listClients"];
      };
      "/api/financial/clients/{id}": {
        /** Get client by ID */
        get: operations["getClient"];
      };
      "/api/financial/invoices": {
        /** List invoices */
        get: operations["listInvoices"];
      };
      "/api/financial/invoices/{id}": {
        /** Get invoice by ID */
        get: operations["getInvoice"];
      };
      "/api/financial/transactions": {
        /** List transactions */
        get: operations["listTransactions"];
      };
      "/api/financial/transactions/{id}": {
        /** Get transaction by ID */
        get: operations["getTransaction"];
      };
      "/api/financial/transactions/export": {
        /** Export transactions */
        get: operations["exportTransactions"];
      };
      "/api/financial/attachments": {
        /** List attachments */
        get: operations["listAttachments"];
      };
      "/api/financial/attachments/{id}": {
        /** Get attachment by ID */
        get: operations["getAttachment"];
      };
    };
    webhooks: Record<string, never>;
    components: {
      schemas: {
        Error: {
          /** @description Error message */
          message: string;
          /** @description Error code (BAD_REQUEST, NOT_FOUND, etc.) */
          code: string;
        };
        PaginationInfo: {
          page: number;
          limit: number;
          total: number;
        };
        Account: {
          /** Format: uuid */
          id: string;
          account_id: string;
          name: string;
          type: string;
          institution?: string;
          institution_id?: string;
          iban?: string;
          currency?: string;
          balance?: number;
          available_balance?: number;
          is_active?: boolean;
          /** Format: date-time */
          last_sync?: string;
          /** Format: date-time */
          created_at?: string;
          /** Format: date-time */
          updated_at?: string;
        };
        AccountListResponse: external["financial.yaml"]["components"]["schemas"]["PaginationInfo"] & {
          accounts: external["financial.yaml"]["components"]["schemas"]["Account"][];
        };
        Client: {
          /** Format: uuid */
          id: string;
          name: string;
          /** Format: email */
          email: string;
          taxId?: string;
          phone?: string;
          address?: string;
          city?: string;
          postalCode?: string;
          country?: string;
          /** @enum {string} */
          status: "active" | "inactive";
          notes?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
        };
        ClientListResponse: external["financial.yaml"]["components"]["schemas"]["PaginationInfo"] & {
          clients: external["financial.yaml"]["components"]["schemas"]["Client"][];
        };
        Invoice: {
          /** Format: uuid */
          id: string;
          invoiceNumber: string;
          /** Format: uuid */
          clientId: string;
          clientName?: string;
          clientTaxId?: string;
          /** @enum {string} */
          status: "draft" | "sent" | "paid" | "overdue" | "cancelled";
          total: number;
          subtotal?: number;
          tax?: number;
          /** Format: date */
          issueDate: string;
          /** Format: date */
          dueDate: string;
          /** Format: date */
          paidDate?: string;
          notes?: string;
          items?: external["financial.yaml"]["components"]["schemas"]["InvoiceItem"][];
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
        };
        InvoiceItem: {
          description: string;
          quantity: number;
          unitPrice: number;
          total: number;
        };
        InvoiceListResponse: external["financial.yaml"]["components"]["schemas"]["PaginationInfo"] & {
          invoices: external["financial.yaml"]["components"]["schemas"]["Invoice"][];
        };
        Transaction: {
          /** Format: uuid */
          id: string;
          transaction_id: string;
          account_id: string;
          amount: number;
          currency?: string;
          /** @enum {string} */
          type: "debit" | "credit" | "transfer";
          /** @enum {string} */
          status?: "pending" | "confirmed" | "failed" | "cancelled";
          description?: string;
          reference?: string;
          counterparty_name?: string;
          counterparty_account?: string;
          /** Format: date */
          date: string;
          tags?: string[];
          fee_amount?: number;
          fee_currency?: string;
          metadata?: Record<string, never>;
          gocardless_data?: Record<string, never>;
          /** Format: date-time */
          created_at?: string;
          /** Format: date-time */
          updated_at?: string;
        };
        TransactionListResponse: external["financial.yaml"]["components"]["schemas"]["PaginationInfo"] & {
          transactions: external["financial.yaml"]["components"]["schemas"]["Transaction"][];
          stats?: {
            totalIncome?: number;
            totalExpenses?: number;
          };
        };
        Attachment: {
          /** Format: uuid */
          id: string;
          /** Format: uuid */
          invoiceId: string;
          fileName: string;
          filePath: string;
          fileSize: number;
          fileType: string;
          description?: string;
          uploadedBy?: string;
          /** Format: date-time */
          uploadedAt: string;
          isDeleted?: boolean;
          /** Format: date-time */
          deletedAt?: string;
          deletedBy?: string;
        };
        AttachmentListResponse: external["financial.yaml"]["components"]["schemas"]["PaginationInfo"] & {
          attachments: external["financial.yaml"]["components"]["schemas"]["Attachment"][];
        };
      };
      responses: never;
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
  "trading.yaml": {
    paths: {
      "/trading/strategies": {
        /** List trading strategies */
        get: operations["listStrategies"];
        /** Create trading strategy */
        post: operations["createStrategy"];
      };
      "/trading/strategies/{strategyId}": {
        /** Get strategy details */
        get: operations["getStrategy"];
        /** Update strategy */
        put: operations["updateStrategy"];
        /** Delete strategy */
        delete: operations["deleteStrategy"];
      };
      "/trading/strategies/{strategyId}/activate": {
        /** Activate strategy */
        post: operations["activateStrategy"];
      };
      "/trading/strategies/{strategyId}/deactivate": {
        /** Deactivate strategy */
        post: operations["deactivateStrategy"];
      };
      "/trading/positions": {
        /** Get active positions */
        get: operations["getPositions"];
      };
      "/trading/execute": {
        /** Execute trade */
        post: operations["executeTrade"];
      };
      "/trading/balance": {
        /** Get account balance */
        get: operations["getBalance"];
      };
      "/trading/market-data": {
        /** Get market data */
        get: operations["getMarketData"];
      };
      "/arbitrage/deploy": {
        /** Deploy arbitrage bot */
        post: operations["deployArbitrage"];
      };
      "/arbitrage/status": {
        /** Get arbitrage bot status */
        get: operations["getArbitrageStatus"];
      };
      "/arbitrage/stop": {
        /** Stop arbitrage bot */
        post: operations["stopArbitrage"];
      };
      "/trading/backtest": {
        /** Run strategy backtest */
        post: operations["runBacktest"];
      };
    };
    webhooks: Record<string, never>;
    components: {
      schemas: {
        TradingStrategy: {
          id: string;
          name: string;
          description?: string;
          /** @enum {string} */
          type: "scalping" | "swing" | "arbitrage" | "dca" | "grid";
          parameters?: {
            [key: string]: unknown;
          };
          isActive: boolean;
          performance?: external["trading.yaml"]["components"]["schemas"]["StrategyPerformance"];
          /** Format: date-time */
          createdAt: string;
          /** Format: date-time */
          updatedAt?: string;
        };
        StrategyPerformance: {
          totalTrades?: number;
          winRate?: number;
          profitLoss?: number;
          sharpeRatio?: number;
        };
        CreateStrategyRequest: {
          name: string;
          description?: string;
          /** @enum {string} */
          type: "scalping" | "swing" | "arbitrage" | "dca" | "grid";
          parameters: {
            [key: string]: unknown;
          };
        };
        UpdateStrategyRequest: {
          name?: string;
          description?: string;
          parameters?: {
            [key: string]: unknown;
          };
        };
        Position: {
          id: string;
          symbol: string;
          /** @enum {string} */
          side: "long" | "short";
          quantity: number;
          entryPrice: number;
          currentPrice?: number;
          unrealizedPnl?: number;
          exchange?: string;
        };
        ExecuteTradeRequest: {
          symbol: string;
          /** @enum {string} */
          side: "buy" | "sell";
          quantity: number;
          /** @enum {string} */
          type: "market" | "limit";
          /** @description Required for limit orders */
          price?: number;
          /** @enum {string} */
          exchange?: "binance" | "coinbase" | "alpaca";
        };
        Trade: {
          id: string;
          symbol: string;
          /** @enum {string} */
          side: "buy" | "sell";
          quantity: number;
          price: number;
          fee?: number;
          exchange?: string;
          /** Format: date-time */
          timestamp: string;
        };
        MarketData: {
          symbol?: string;
          bid?: number;
          ask?: number;
          last?: number;
          volume24h?: number;
          change24h?: number;
          /** Format: date-time */
          timestamp?: string;
        };
        Balance: {
          currency?: string;
          available?: number;
          locked?: number;
          total?: number;
        };
        DeployArbitrageRequest: {
          /** @default 0.005 */
          minSpread?: number;
          /** @default 1000 */
          maxPositionSize?: number;
          exchanges?: ("binance" | "coinbase")[];
        };
        ArbitrageStatus: {
          isRunning?: boolean;
          /** Format: date-time */
          startedAt?: string;
          totalTrades?: number;
          totalProfit?: number;
          currentOpportunities?: external["trading.yaml"]["components"]["schemas"]["ArbitrageOpportunity"][];
        };
        ArbitrageOpportunity: {
          symbol?: string;
          buyExchange?: string;
          sellExchange?: string;
          spread?: number;
          estimatedProfit?: number;
        };
        BacktestRequest: {
          strategyId: string;
          /** Format: date */
          startDate: string;
          /** Format: date */
          endDate: string;
          /** @default 10000 */
          initialCapital?: number;
        };
        BacktestResult: {
          totalReturn?: number;
          sharpeRatio?: number;
          maxDrawdown?: number;
          winRate?: number;
          totalTrades?: number;
          trades?: external["trading.yaml"]["components"]["schemas"]["Trade"][];
        };
        StrategyResponse: {
          success: boolean;
          data: external["trading.yaml"]["components"]["schemas"]["TradingStrategy"];
        };
        StrategyListResponse: {
          success: boolean;
          data: external["trading.yaml"]["components"]["schemas"]["TradingStrategy"][];
          pagination: external["trading.yaml"]["components"]["schemas"]["PaginationMeta"];
        };
        PositionListResponse: {
          success: boolean;
          data: external["trading.yaml"]["components"]["schemas"]["Position"][];
        };
        TradeResponse: {
          success: boolean;
          data: external["trading.yaml"]["components"]["schemas"]["Trade"];
        };
        BalanceResponse: {
          success: boolean;
          data: external["trading.yaml"]["components"]["schemas"]["Balance"][];
        };
        MarketDataResponse: {
          success: boolean;
          data: external["trading.yaml"]["components"]["schemas"]["MarketData"];
        };
        ArbitrageStatusResponse: {
          success: boolean;
          data: external["trading.yaml"]["components"]["schemas"]["ArbitrageStatus"];
        };
        BacktestResponse: {
          success: boolean;
          data: external["trading.yaml"]["components"]["schemas"]["BacktestResult"];
        };
        MessageResponse: {
          success: boolean;
          message: string;
        };
        PaginationMeta: {
          page: number;
          limit: number;
          total: number;
          totalPages: number;
        };
        ErrorResponse: {
          /** @default false */
          success: boolean;
          error: {
            code: string;
            message: string;
            details?: {
              [key: string]: unknown;
            };
          };
        };
      };
      responses: {
        /** @description Bad request */
        BadRequest: {
          content: {
            "application/json": external["trading.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
        /** @description Unauthorized */
        Unauthorized: {
          content: {
            "application/json": external["trading.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not found */
        NotFound: {
          content: {
            "application/json": external["trading.yaml"]["components"]["schemas"]["ErrorResponse"];
          };
        };
      };
      parameters: {
        /** @description Page number */
        PageParam?: number;
        /** @description Items per page */
        LimitParam?: number;
        /** @description Strategy identifier */
        StrategyIdParam: string;
      };
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
}

export interface operations {

  /** Liveness probe */
  getLiveness: {
    responses: {
      /** @description Service is alive */
      200: {
        content: {
          "application/json": {
            ok?: boolean;
          };
        };
      };
    };
  };
  /** Readiness probe */
  getReadiness: {
    responses: {
      /** @description Service is ready */
      200: {
        content: {
          "application/json": {
            ok?: boolean;
          };
        };
      };
      /** @description Service not ready */
      503: {
        content: {
          "application/json": {
            ok?: boolean;
          };
        };
      };
    };
  };
  /** Prometheus metrics */
  getMetrics: {
    responses: {
      /** @description Prometheus metrics */
      200: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
  /** Upload and analyze document */
  uploadDocument: {
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description Document file (PDF, DOCX, TXT)
           */
          file: string;
          /**
           * @description Automatically analyze after upload
           * @default true
           */
          autoAnalyze?: boolean;
        };
      };
    };
    responses: {
      /** @description Document uploaded successfully */
      201: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["DocumentResponse"];
        };
      };
      400: external["ai-core.yaml"]["components"]["responses"]["BadRequest"];
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** List documents */
  listDocuments: {
    parameters: {
      query?: {
        page?: external["ai-core.yaml"]["components"]["parameters"]["PageParam"];
        limit?: external["ai-core.yaml"]["components"]["parameters"]["LimitParam"];
        /** @description Filter by analysis status */
        analyzed?: boolean;
      };
    };
    responses: {
      /** @description Documents retrieved successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["DocumentListResponse"];
        };
      };
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Get document details */
  getDocument: {
    parameters: {
      path: {
        documentId: external["ai-core.yaml"]["components"]["parameters"]["DocumentIdParam"];
      };
    };
    responses: {
      /** @description Document retrieved successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["DocumentResponse"];
        };
      };
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["ai-core.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** Delete document */
  deleteDocument: {
    parameters: {
      path: {
        documentId: external["ai-core.yaml"]["components"]["parameters"]["DocumentIdParam"];
      };
    };
    responses: {
      /** @description Document deleted successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["MessageResponse"];
        };
      };
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["ai-core.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** Analyze document */
  analyzeDocument: {
    parameters: {
      path: {
        documentId: external["ai-core.yaml"]["components"]["parameters"]["DocumentIdParam"];
      };
    };
    requestBody?: {
      content: {
        "application/json": external["ai-core.yaml"]["components"]["schemas"]["AnalyzeDocumentRequest"];
      };
    };
    responses: {
      /** @description Analysis completed successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["DocumentAnalysisResponse"];
        };
      };
      400: external["ai-core.yaml"]["components"]["responses"]["BadRequest"];
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["ai-core.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** Get document analysis */
  getDocumentAnalysis: {
    parameters: {
      path: {
        documentId: external["ai-core.yaml"]["components"]["parameters"]["DocumentIdParam"];
      };
    };
    responses: {
      /** @description Analysis retrieved successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["DocumentAnalysisResponse"];
        };
      };
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["ai-core.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** Ask question about document */
  questionDocument: {
    parameters: {
      path: {
        documentId: external["ai-core.yaml"]["components"]["parameters"]["DocumentIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": external["ai-core.yaml"]["components"]["schemas"]["DocumentQuestionRequest"];
      };
    };
    responses: {
      /** @description Question answered successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["DocumentAnswerResponse"];
        };
      };
      400: external["ai-core.yaml"]["components"]["responses"]["BadRequest"];
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["ai-core.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** Semantic search across documents */
  searchDocuments: {
    requestBody: {
      content: {
        "application/json": external["ai-core.yaml"]["components"]["schemas"]["DocumentSearchRequest"];
      };
    };
    responses: {
      /** @description Search completed successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["DocumentSearchResponse"];
        };
      };
      400: external["ai-core.yaml"]["components"]["responses"]["BadRequest"];
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Get document statistics */
  getDocumentStats: {
    responses: {
      /** @description Statistics retrieved successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["DocumentStatsResponse"];
        };
      };
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Get AI provider status */
  getAIStatus: {
    responses: {
      /** @description AI status retrieved successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["AIStatusResponse"];
        };
      };
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Test Claude integration */
  testClaude: {
    responses: {
      /** @description Claude test successful */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["ClaudeTestResponse"];
        };
      };
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
      /** @description Claude service unavailable */
      503: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Generate trading strategy with AI */
  generateStrategy: {
    requestBody: {
      content: {
        "application/json": external["ai-core.yaml"]["components"]["schemas"]["GenerateStrategyRequest"];
      };
    };
    responses: {
      /** @description Strategy generated successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["GeneratedStrategyResponse"];
        };
      };
      400: external["ai-core.yaml"]["components"]["responses"]["BadRequest"];
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Analyze trading opportunity */
  analyzeTradingOpportunity: {
    requestBody: {
      content: {
        "application/json": external["ai-core.yaml"]["components"]["schemas"]["AnalyzeTradingRequest"];
      };
    };
    responses: {
      /** @description Analysis completed successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["TradingAnalysisResponse"];
        };
      };
      400: external["ai-core.yaml"]["components"]["responses"]["BadRequest"];
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Analyze market conditions */
  analyzeMarket: {
    requestBody: {
      content: {
        "application/json": external["ai-core.yaml"]["components"]["schemas"]["MarketAnalysisRequest"];
      };
    };
    responses: {
      /** @description Market analysis completed */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["MarketAnalysisResponse"];
        };
      };
      400: external["ai-core.yaml"]["components"]["responses"]["BadRequest"];
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** List AI provider configurations */
  listAIConfigs: {
    responses: {
      /** @description Configurations retrieved successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["AIConfigListResponse"];
        };
      };
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Update AI provider configuration */
  updateAIConfig: {
    requestBody: {
      content: {
        "application/json": external["ai-core.yaml"]["components"]["schemas"]["UpdateAIConfigRequest"];
      };
    };
    responses: {
      /** @description Configuration updated successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["AIConfigResponse"];
        };
      };
      400: external["ai-core.yaml"]["components"]["responses"]["BadRequest"];
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Get Claude configuration */
  getClaudeConfig: {
    parameters: {
      path: {
        /** @description Configuration key */
        configKey: string;
      };
    };
    responses: {
      /** @description Configuration retrieved successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["AIConfigResponse"];
        };
      };
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["ai-core.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** Get OpenAI configuration */
  getOpenAIConfig: {
    parameters: {
      path: {
        /** @description Configuration key */
        configKey: string;
      };
    };
    responses: {
      /** @description Configuration retrieved successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["AIConfigResponse"];
        };
      };
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["ai-core.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** Categorize financial transactions */
  categorizeTransactions: {
    requestBody: {
      content: {
        "application/json": external["ai-core.yaml"]["components"]["schemas"]["CategorizeTransactionsRequest"];
      };
    };
    responses: {
      /** @description Categorization completed successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["CategorizationResponse"];
        };
      };
      400: external["ai-core.yaml"]["components"]["responses"]["BadRequest"];
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Get AI learning statistics */
  getAILearningStats: {
    responses: {
      /** @description Statistics retrieved successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["AILearningStatsResponse"];
        };
      };
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Provide categorization feedback */
  provideFeedback: {
    requestBody: {
      content: {
        "application/json": external["ai-core.yaml"]["components"]["schemas"]["CategorizationFeedbackRequest"];
      };
    };
    responses: {
      /** @description Feedback recorded successfully */
      200: {
        content: {
          "application/json": external["ai-core.yaml"]["components"]["schemas"]["MessageResponse"];
        };
      };
      400: external["ai-core.yaml"]["components"]["responses"]["BadRequest"];
      401: external["ai-core.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /**
   * Register a new user
   * @description Create a new user account with email and password
   */
  register: {
    requestBody: {
      content: {
        "application/json": external["auth.yaml"]["components"]["schemas"]["RegisterRequest"];
      };
    };
    responses: {
      /** @description User registered successfully */
      201: {
        content: {
          "application/json": external["auth.yaml"]["components"]["schemas"]["AuthResponse"];
        };
      };
      400: external["auth.yaml"]["components"]["responses"]["BadRequest"];
      /** @description User already exists */
      409: {
        content: {
          "application/json": external["auth.yaml"]["components"]["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Login user
   * @description Authenticate user with email and password
   */
  login: {
    requestBody: {
      content: {
        "application/json": external["auth.yaml"]["components"]["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description Login successful */
      200: {
        content: {
          "application/json": external["auth.yaml"]["components"]["schemas"]["AuthResponse"];
        };
      };
      400: external["auth.yaml"]["components"]["responses"]["BadRequest"];
      401: external["auth.yaml"]["components"]["responses"]["Unauthorized"];
      429: external["auth.yaml"]["components"]["responses"]["TooManyRequests"];
    };
  };
  /**
   * Refresh access token
   * @description Get a new access token using refresh token
   */
  refreshToken: {
    requestBody: {
      content: {
        "application/json": external["auth.yaml"]["components"]["schemas"]["RefreshTokenRequest"];
      };
    };
    responses: {
      /** @description Token refreshed successfully */
      200: {
        content: {
          "application/json": external["auth.yaml"]["components"]["schemas"]["AuthResponse"];
        };
      };
      401: external["auth.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /**
   * Logout user
   * @description Invalidate current access token
   */
  logout: {
    responses: {
      /** @description Logout successful */
      200: {
        content: {
          "application/json": external["auth.yaml"]["components"]["schemas"]["MessageResponse"];
        };
      };
      401: external["auth.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /**
   * Request password reset
   * @description Send password reset email to user
   */
  forgotPassword: {
    requestBody: {
      content: {
        "application/json": external["auth.yaml"]["components"]["schemas"]["ForgotPasswordRequest"];
      };
    };
    responses: {
      /** @description Password reset email sent */
      200: {
        content: {
          "application/json": external["auth.yaml"]["components"]["schemas"]["MessageResponse"];
        };
      };
      400: external["auth.yaml"]["components"]["responses"]["BadRequest"];
      429: external["auth.yaml"]["components"]["responses"]["TooManyRequests"];
    };
  };
  /**
   * Reset password
   * @description Reset user password with token
   */
  resetPassword: {
    requestBody: {
      content: {
        "application/json": external["auth.yaml"]["components"]["schemas"]["ResetPasswordRequest"];
      };
    };
    responses: {
      /** @description Password reset successful */
      200: {
        content: {
          "application/json": external["auth.yaml"]["components"]["schemas"]["MessageResponse"];
        };
      };
      400: external["auth.yaml"]["components"]["responses"]["BadRequest"];
      /** @description Invalid or expired token */
      401: {
        content: {
          "application/json": external["auth.yaml"]["components"]["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get user profile
   * @description Get current user profile information
   */
  getProfile: {
    responses: {
      /** @description Profile retrieved successfully */
      200: {
        content: {
          "application/json": external["auth.yaml"]["components"]["schemas"]["UserProfile"];
        };
      };
      401: external["auth.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /**
   * Update user profile
   * @description Update current user profile information
   */
  updateProfile: {
    requestBody: {
      content: {
        "application/json": external["auth.yaml"]["components"]["schemas"]["UpdateProfileRequest"];
      };
    };
    responses: {
      /** @description Profile updated successfully */
      200: {
        content: {
          "application/json": external["auth.yaml"]["components"]["schemas"]["UserProfile"];
        };
      };
      400: external["auth.yaml"]["components"]["responses"]["BadRequest"];
      401: external["auth.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /**
   * List all users
   * @description Get list of all users (admin only)
   */
  listUsers: {
    parameters: {
      query?: {
        page?: external["auth.yaml"]["components"]["parameters"]["PageParam"];
        limit?: external["auth.yaml"]["components"]["parameters"]["LimitParam"];
        /** @description Filter by user role */
        role?: external["auth.yaml"]["components"]["schemas"]["UserRole"];
        /** @description Filter by active status */
        isActive?: boolean;
      };
    };
    responses: {
      /** @description Users retrieved successfully */
      200: {
        content: {
          "application/json": external["auth.yaml"]["components"]["schemas"]["UserListResponse"];
        };
      };
      401: external["auth.yaml"]["components"]["responses"]["Unauthorized"];
      403: external["auth.yaml"]["components"]["responses"]["Forbidden"];
    };
  };
  /**
   * Delete user
   * @description Delete a user account (admin only)
   */
  deleteUser: {
    parameters: {
      path: {
        /** @description User ID to delete */
        userId: string;
      };
    };
    responses: {
      /** @description User deleted successfully */
      200: {
        content: {
          "application/json": external["auth.yaml"]["components"]["schemas"]["MessageResponse"];
        };
      };
      401: external["auth.yaml"]["components"]["responses"]["Unauthorized"];
      403: external["auth.yaml"]["components"]["responses"]["Forbidden"];
      404: external["auth.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /**
   * Receive Telegram webhook
   * @description Endpoint for Telegram bot updates
   */
  telegramWebhook: {
    requestBody: {
      content: {
        "application/json": external["comm.yaml"]["components"]["schemas"]["TelegramUpdate"];
      };
    };
    responses: {
      /** @description Webhook processed successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["MessageResponse"];
        };
      };
      400: external["comm.yaml"]["components"]["responses"]["BadRequest"];
    };
  };
  /** Send Telegram message */
  sendTelegramMessage: {
    requestBody: {
      content: {
        "application/json": external["comm.yaml"]["components"]["schemas"]["SendTelegramMessageRequest"];
      };
    };
    responses: {
      /** @description Message sent successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["TelegramMessageResponse"];
        };
      };
      400: external["comm.yaml"]["components"]["responses"]["BadRequest"];
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Send system alert via Telegram */
  sendTelegramAlert: {
    requestBody: {
      content: {
        "application/json": external["comm.yaml"]["components"]["schemas"]["SendAlertRequest"];
      };
    };
    responses: {
      /** @description Alert sent successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["MessageResponse"];
        };
      };
      400: external["comm.yaml"]["components"]["responses"]["BadRequest"];
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Configure Telegram webhook */
  setupTelegramWebhook: {
    requestBody: {
      content: {
        "application/json": external["comm.yaml"]["components"]["schemas"]["SetupWebhookRequest"];
      };
    };
    responses: {
      /** @description Webhook configured successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["MessageResponse"];
        };
      };
      400: external["comm.yaml"]["components"]["responses"]["BadRequest"];
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Get Telegram service status */
  getTelegramStatus: {
    responses: {
      /** @description Status retrieved successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["TelegramStatusResponse"];
        };
      };
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Send invoice email */
  sendInvoiceEmail: {
    requestBody: {
      content: {
        "application/json": external["comm.yaml"]["components"]["schemas"]["SendInvoiceEmailRequest"];
      };
    };
    responses: {
      /** @description Email sent successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["EmailResponse"];
        };
      };
      400: external["comm.yaml"]["components"]["responses"]["BadRequest"];
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Send payment reminder */
  sendPaymentReminder: {
    requestBody: {
      content: {
        "application/json": external["comm.yaml"]["components"]["schemas"]["SendReminderRequest"];
      };
    };
    responses: {
      /** @description Reminder sent successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["EmailResponse"];
        };
      };
      400: external["comm.yaml"]["components"]["responses"]["BadRequest"];
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Send payment receipt */
  sendPaymentReceipt: {
    requestBody: {
      content: {
        "application/json": external["comm.yaml"]["components"]["schemas"]["SendReceiptRequest"];
      };
    };
    responses: {
      /** @description Receipt sent successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["EmailResponse"];
        };
      };
      400: external["comm.yaml"]["components"]["responses"]["BadRequest"];
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** List email templates */
  listEmailTemplates: {
    parameters: {
      query?: {
        /** @description Template language */
        language?: "en" | "es";
      };
    };
    responses: {
      /** @description Templates retrieved successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["EmailTemplateListResponse"];
        };
      };
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Send WebSocket message to user */
  sendWebSocketToUser: {
    requestBody: {
      content: {
        "application/json": external["comm.yaml"]["components"]["schemas"]["SendWebSocketMessageRequest"];
      };
    };
    responses: {
      /** @description Message sent successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["MessageResponse"];
        };
      };
      400: external["comm.yaml"]["components"]["responses"]["BadRequest"];
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Broadcast WebSocket message */
  broadcastWebSocket: {
    requestBody: {
      content: {
        "application/json": external["comm.yaml"]["components"]["schemas"]["BroadcastWebSocketRequest"];
      };
    };
    responses: {
      /** @description Message broadcast successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["BroadcastResponse"];
        };
      };
      400: external["comm.yaml"]["components"]["responses"]["BadRequest"];
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Get connected users */
  getConnectedUsers: {
    responses: {
      /** @description Connected users retrieved successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["ConnectedUsersResponse"];
        };
      };
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Check user connection status */
  getUserConnectionStatus: {
    parameters: {
      path: {
        /** @description User ID to check */
        userId: string;
      };
    };
    responses: {
      /** @description Status retrieved successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["UserConnectionStatusResponse"];
        };
      };
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["comm.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** List alerts */
  listAlerts: {
    parameters: {
      query?: {
        page?: external["comm.yaml"]["components"]["parameters"]["PageParam"];
        limit?: external["comm.yaml"]["components"]["parameters"]["LimitParam"];
        /** @description Filter by alert type */
        type?: external["comm.yaml"]["components"]["schemas"]["AlertType"];
        /** @description Filter by priority */
        priority?: external["comm.yaml"]["components"]["schemas"]["AlertPriority"];
        /** @description Filter by acknowledgment status */
        acknowledged?: boolean;
      };
    };
    responses: {
      /** @description Alerts retrieved successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["AlertListResponse"];
        };
      };
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Create alert */
  createAlert: {
    requestBody: {
      content: {
        "application/json": external["comm.yaml"]["components"]["schemas"]["CreateAlertRequest"];
      };
    };
    responses: {
      /** @description Alert created successfully */
      201: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["AlertResponse"];
        };
      };
      400: external["comm.yaml"]["components"]["responses"]["BadRequest"];
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Acknowledge alert */
  acknowledgeAlert: {
    parameters: {
      path: {
        /** @description Alert ID */
        alertId: string;
      };
    };
    responses: {
      /** @description Alert acknowledged successfully */
      200: {
        content: {
          "application/json": external["comm.yaml"]["components"]["schemas"]["AlertResponse"];
        };
      };
      401: external["comm.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["comm.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** List bank accounts */
  listAccounts: {
    parameters: {
      query?: {
        /** @description Page number (1-based) */
        page?: number;
        /** @description Items per page */
        limit?: number;
      };
    };
    responses: {
      /** @description List of accounts */
      200: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["AccountListResponse"];
        };
      };
      /** @description Invalid parameters */
      400: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Error"];
        };
      };
    };
  };
  /** Get account by ID */
  getAccount: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Account details */
      200: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Account"];
        };
      };
      /** @description Account not found */
      404: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Error"];
        };
      };
    };
  };
  /** List clients */
  listClients: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
        email?: string;
        name?: string;
      };
    };
    responses: {
      /** @description List of clients */
      200: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["ClientListResponse"];
        };
      };
      /** @description Invalid parameters */
      400: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Error"];
        };
      };
    };
  };
  /** Get client by ID */
  getClient: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Client details */
      200: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Client"];
        };
      };
      /** @description Client not found */
      404: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Error"];
        };
      };
    };
  };
  /** List invoices */
  listInvoices: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
        clientId?: string;
        status?: "draft" | "sent" | "paid" | "overdue" | "cancelled";
      };
    };
    responses: {
      /** @description List of invoices */
      200: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["InvoiceListResponse"];
        };
      };
      /** @description Invalid parameters */
      400: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Error"];
        };
      };
    };
  };
  /** Get invoice by ID */
  getInvoice: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Invoice details */
      200: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Invoice"];
        };
      };
      /** @description Invoice not found */
      404: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Error"];
        };
      };
    };
  };
  /** List transactions */
  listTransactions: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
        accountId?: string;
        type?: "debit" | "credit" | "transfer";
        status?: "pending" | "confirmed" | "failed" | "cancelled";
        dateFrom?: string;
        dateTo?: string;
        minAmount?: number;
        maxAmount?: number;
        search?: string;
      };
    };
    responses: {
      /** @description List of transactions */
      200: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["TransactionListResponse"];
        };
      };
      /** @description Invalid parameters */
      400: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Error"];
        };
      };
    };
  };
  /** Get transaction by ID */
  getTransaction: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Transaction details */
      200: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Transaction"];
        };
      };
      /** @description Transaction not found */
      404: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Error"];
        };
      };
    };
  };
  /** Export transactions */
  exportTransactions: {
    parameters: {
      query?: {
        format?: "csv" | "json";
        accountId?: string;
        dateFrom?: string;
        dateTo?: string;
      };
    };
    responses: {
      /** @description Exported transactions */
      200: {
        content: {
          "text/csv": string;
          "application/json": external["financial.yaml"]["components"]["schemas"]["Transaction"][];
        };
      };
      /** @description Invalid parameters */
      400: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Error"];
        };
      };
    };
  };
  /** List attachments */
  listAttachments: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
        invoiceId?: string;
        fileType?: string;
      };
    };
    responses: {
      /** @description List of attachments */
      200: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["AttachmentListResponse"];
        };
      };
      /** @description Invalid parameters */
      400: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Error"];
        };
      };
    };
  };
  /** Get attachment by ID */
  getAttachment: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Attachment details */
      200: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Attachment"];
        };
      };
      /** @description Attachment not found */
      404: {
        content: {
          "application/json": external["financial.yaml"]["components"]["schemas"]["Error"];
        };
      };
    };
  };
  /** List trading strategies */
  listStrategies: {
    parameters: {
      query?: {
        page?: external["trading.yaml"]["components"]["parameters"]["PageParam"];
        limit?: external["trading.yaml"]["components"]["parameters"]["LimitParam"];
        /** @description Filter by active status */
        active?: boolean;
      };
    };
    responses: {
      /** @description Strategies retrieved successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["StrategyListResponse"];
        };
      };
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Create trading strategy */
  createStrategy: {
    requestBody: {
      content: {
        "application/json": external["trading.yaml"]["components"]["schemas"]["CreateStrategyRequest"];
      };
    };
    responses: {
      /** @description Strategy created successfully */
      201: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["StrategyResponse"];
        };
      };
      400: external["trading.yaml"]["components"]["responses"]["BadRequest"];
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Get strategy details */
  getStrategy: {
    parameters: {
      path: {
        strategyId: external["trading.yaml"]["components"]["parameters"]["StrategyIdParam"];
      };
    };
    responses: {
      /** @description Strategy retrieved successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["StrategyResponse"];
        };
      };
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["trading.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** Update strategy */
  updateStrategy: {
    parameters: {
      path: {
        strategyId: external["trading.yaml"]["components"]["parameters"]["StrategyIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": external["trading.yaml"]["components"]["schemas"]["UpdateStrategyRequest"];
      };
    };
    responses: {
      /** @description Strategy updated successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["StrategyResponse"];
        };
      };
      400: external["trading.yaml"]["components"]["responses"]["BadRequest"];
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["trading.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** Delete strategy */
  deleteStrategy: {
    parameters: {
      path: {
        strategyId: external["trading.yaml"]["components"]["parameters"]["StrategyIdParam"];
      };
    };
    responses: {
      /** @description Strategy deleted successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["MessageResponse"];
        };
      };
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["trading.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** Activate strategy */
  activateStrategy: {
    parameters: {
      path: {
        strategyId: external["trading.yaml"]["components"]["parameters"]["StrategyIdParam"];
      };
    };
    responses: {
      /** @description Strategy activated successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["StrategyResponse"];
        };
      };
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["trading.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** Deactivate strategy */
  deactivateStrategy: {
    parameters: {
      path: {
        strategyId: external["trading.yaml"]["components"]["parameters"]["StrategyIdParam"];
      };
    };
    responses: {
      /** @description Strategy deactivated successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["StrategyResponse"];
        };
      };
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["trading.yaml"]["components"]["responses"]["NotFound"];
    };
  };
  /** Get active positions */
  getPositions: {
    parameters: {
      query?: {
        /** @description Filter by exchange */
        exchange?: "binance" | "coinbase" | "alpaca";
      };
    };
    responses: {
      /** @description Positions retrieved successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["PositionListResponse"];
        };
      };
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Execute trade */
  executeTrade: {
    requestBody: {
      content: {
        "application/json": external["trading.yaml"]["components"]["schemas"]["ExecuteTradeRequest"];
      };
    };
    responses: {
      /** @description Trade executed successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["TradeResponse"];
        };
      };
      400: external["trading.yaml"]["components"]["responses"]["BadRequest"];
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Get account balance */
  getBalance: {
    parameters: {
      query?: {
        /** @description Exchange to get balance from */
        exchange?: "binance" | "coinbase" | "alpaca";
      };
    };
    responses: {
      /** @description Balance retrieved successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["BalanceResponse"];
        };
      };
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Get market data */
  getMarketData: {
    parameters: {
      query: {
        /** @description Trading symbol (e.g., BTC/USDT) */
        symbol: string;
        exchange?: "binance" | "coinbase" | "alpaca";
      };
    };
    responses: {
      /** @description Market data retrieved successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["MarketDataResponse"];
        };
      };
      400: external["trading.yaml"]["components"]["responses"]["BadRequest"];
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Deploy arbitrage bot */
  deployArbitrage: {
    requestBody: {
      content: {
        "application/json": external["trading.yaml"]["components"]["schemas"]["DeployArbitrageRequest"];
      };
    };
    responses: {
      /** @description Arbitrage bot deployed successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["ArbitrageStatusResponse"];
        };
      };
      400: external["trading.yaml"]["components"]["responses"]["BadRequest"];
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Get arbitrage bot status */
  getArbitrageStatus: {
    responses: {
      /** @description Status retrieved successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["ArbitrageStatusResponse"];
        };
      };
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Stop arbitrage bot */
  stopArbitrage: {
    responses: {
      /** @description Arbitrage bot stopped successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["MessageResponse"];
        };
      };
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
  /** Run strategy backtest */
  runBacktest: {
    requestBody: {
      content: {
        "application/json": external["trading.yaml"]["components"]["schemas"]["BacktestRequest"];
      };
    };
    responses: {
      /** @description Backtest completed successfully */
      200: {
        content: {
          "application/json": external["trading.yaml"]["components"]["schemas"]["BacktestResponse"];
        };
      };
      400: external["trading.yaml"]["components"]["responses"]["BadRequest"];
      401: external["trading.yaml"]["components"]["responses"]["Unauthorized"];
    };
  };
}
