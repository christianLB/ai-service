/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/telegram/webhook": {
    /**
     * Receive Telegram webhook
     * @description Endpoint for Telegram bot updates
     */
    post: operations["telegramWebhook"];
  };
  "/telegram/send-message": {
    /** Send Telegram message */
    post: operations["sendTelegramMessage"];
  };
  "/telegram/send-alert": {
    /** Send system alert via Telegram */
    post: operations["sendTelegramAlert"];
  };
  "/telegram/setup-webhook": {
    /** Configure Telegram webhook */
    post: operations["setupTelegramWebhook"];
  };
  "/telegram/status": {
    /** Get Telegram service status */
    get: operations["getTelegramStatus"];
  };
  "/email/send-invoice": {
    /** Send invoice email */
    post: operations["sendInvoiceEmail"];
  };
  "/email/send-reminder": {
    /** Send payment reminder */
    post: operations["sendPaymentReminder"];
  };
  "/email/send-receipt": {
    /** Send payment receipt */
    post: operations["sendPaymentReceipt"];
  };
  "/email/templates": {
    /** List email templates */
    get: operations["listEmailTemplates"];
  };
  "/websocket/send-to-user": {
    /** Send WebSocket message to user */
    post: operations["sendWebSocketToUser"];
  };
  "/websocket/broadcast": {
    /** Broadcast WebSocket message */
    post: operations["broadcastWebSocket"];
  };
  "/websocket/connected-users": {
    /** Get connected users */
    get: operations["getConnectedUsers"];
  };
  "/websocket/user-status/{userId}": {
    /** Check user connection status */
    get: operations["getUserConnectionStatus"];
  };
  "/alerts": {
    /** List alerts */
    get: operations["listAlerts"];
    /** Create alert */
    post: operations["createAlert"];
  };
  "/alerts/{alertId}/acknowledge": {
    /** Acknowledge alert */
    post: operations["acknowledgeAlert"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Telegram bot update object */
    TelegramUpdate: {
      update_id?: number;
      message?: {
        message_id?: number;
        from?: {
          id?: number;
          first_name?: string;
          username?: string;
        };
        chat?: {
          id?: number;
          type?: string;
        };
        text?: string;
        date?: number;
      };
    };
    SendTelegramMessageRequest: {
      /** @description Telegram chat ID */
      chatId: string;
      /** @description Message text */
      text: string;
      /**
       * @description Text parsing mode
       * @enum {string}
       */
      parseMode?: "Markdown" | "HTML";
      /** @description Inline keyboard markup */
      replyMarkup?: Record<string, never>;
    };
    SendAlertRequest: {
      type: components["schemas"]["AlertType"];
      message: string;
      priority: components["schemas"]["AlertPriority"];
      details?: {
        [key: string]: unknown;
      };
    };
    SetupWebhookRequest: {
      /**
       * Format: uri
       * @description Webhook URL
       */
      url: string;
      /** @description Update types to receive */
      allowedUpdates?: string[];
    };
    TelegramStatus: {
      botUsername?: string;
      webhookUrl?: string;
      isActive?: boolean;
      /** Format: date-time */
      lastUpdate?: string;
      pendingUpdates?: number;
    };
    SendInvoiceEmailRequest: {
      /** Format: email */
      to: string;
      invoiceId: string;
      cc?: string[];
      bcc?: string[];
      /**
       * @default en
       * @enum {string}
       */
      language?: "en" | "es";
      /** @default true */
      attachPdf?: boolean;
    };
    SendReminderRequest: {
      /** Format: email */
      to: string;
      invoiceId: string;
      daysOverdue: number;
      /**
       * @default en
       * @enum {string}
       */
      language?: "en" | "es";
    };
    SendReceiptRequest: {
      /** Format: email */
      to: string;
      paymentId: string;
      amount: number;
      /** @default EUR */
      currency?: string;
      /**
       * @default en
       * @enum {string}
       */
      language?: "en" | "es";
    };
    EmailTemplate: {
      id?: string;
      name?: string;
      subject?: string;
      language?: string;
      variables?: string[];
    };
    EmailResult: {
      messageId?: string;
      accepted?: string[];
      rejected?: string[];
    };
    SendWebSocketMessageRequest: {
      userId: string;
      event: string;
      data: {
        [key: string]: unknown;
      };
    };
    BroadcastWebSocketRequest: {
      event: string;
      data: {
        [key: string]: unknown;
      };
      /** @description Optional list of user IDs to broadcast to */
      userIds?: string[];
    };
    ConnectedUser: {
      userId?: string;
      socketId?: string;
      /** Format: date-time */
      connectedAt?: string;
      rooms?: string[];
    };
    /** @enum {string} */
    AlertType: "transaction" | "sync_error" | "unusual_spending" | "system_error" | "security" | "performance";
    /** @enum {string} */
    AlertPriority: "critical" | "high" | "medium" | "low";
    Alert: {
      id: string;
      type: components["schemas"]["AlertType"];
      message: string;
      priority: components["schemas"]["AlertPriority"];
      details?: {
        [key: string]: unknown;
      };
      acknowledged?: boolean;
      acknowledgedBy?: string;
      /** Format: date-time */
      acknowledgedAt?: string;
      /** Format: date-time */
      createdAt: string;
    };
    CreateAlertRequest: {
      type: components["schemas"]["AlertType"];
      message: string;
      priority: components["schemas"]["AlertPriority"];
      details?: {
        [key: string]: unknown;
      };
      /** @description Notification channels */
      channels?: ("telegram" | "email" | "websocket")[];
    };
    TelegramMessageResponse: {
      success: boolean;
      data: {
        messageId?: number;
        chatId?: string;
      };
    };
    TelegramStatusResponse: {
      success: boolean;
      data: components["schemas"]["TelegramStatus"];
    };
    EmailResponse: {
      success: boolean;
      data: components["schemas"]["EmailResult"];
    };
    EmailTemplateListResponse: {
      success: boolean;
      data: components["schemas"]["EmailTemplate"][];
    };
    BroadcastResponse: {
      success: boolean;
      data: {
        delivered?: number;
        failed?: number;
      };
    };
    ConnectedUsersResponse: {
      success: boolean;
      data: components["schemas"]["ConnectedUser"][];
    };
    UserConnectionStatusResponse: {
      success: boolean;
      data: {
        isConnected?: boolean;
        /** Format: date-time */
        lastSeen?: string;
      };
    };
    AlertResponse: {
      success: boolean;
      data: components["schemas"]["Alert"];
    };
    AlertListResponse: {
      success: boolean;
      data: components["schemas"]["Alert"][];
      pagination: components["schemas"]["PaginationMeta"];
    };
    MessageResponse: {
      success: boolean;
      message: string;
    };
    PaginationMeta: {
      page: number;
      limit: number;
      total: number;
      totalPages: number;
    };
    ErrorResponse: {
      /** @default false */
      success: boolean;
      error: {
        code: string;
        message: string;
        details?: {
          [key: string]: unknown;
        };
      };
    };
  };
  responses: {
    /** @description Bad request */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Unauthorized */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Not found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: {
    /** @description Page number */
    PageParam?: number;
    /** @description Items per page */
    LimitParam?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Receive Telegram webhook
   * @description Endpoint for Telegram bot updates
   */
  telegramWebhook: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TelegramUpdate"];
      };
    };
    responses: {
      /** @description Webhook processed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
    };
  };
  /** Send Telegram message */
  sendTelegramMessage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendTelegramMessageRequest"];
      };
    };
    responses: {
      /** @description Message sent successfully */
      200: {
        content: {
          "application/json": components["schemas"]["TelegramMessageResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Send system alert via Telegram */
  sendTelegramAlert: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendAlertRequest"];
      };
    };
    responses: {
      /** @description Alert sent successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Configure Telegram webhook */
  setupTelegramWebhook: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetupWebhookRequest"];
      };
    };
    responses: {
      /** @description Webhook configured successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Get Telegram service status */
  getTelegramStatus: {
    responses: {
      /** @description Status retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["TelegramStatusResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Send invoice email */
  sendInvoiceEmail: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendInvoiceEmailRequest"];
      };
    };
    responses: {
      /** @description Email sent successfully */
      200: {
        content: {
          "application/json": components["schemas"]["EmailResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Send payment reminder */
  sendPaymentReminder: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendReminderRequest"];
      };
    };
    responses: {
      /** @description Reminder sent successfully */
      200: {
        content: {
          "application/json": components["schemas"]["EmailResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Send payment receipt */
  sendPaymentReceipt: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendReceiptRequest"];
      };
    };
    responses: {
      /** @description Receipt sent successfully */
      200: {
        content: {
          "application/json": components["schemas"]["EmailResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** List email templates */
  listEmailTemplates: {
    parameters: {
      query?: {
        /** @description Template language */
        language?: "en" | "es";
      };
    };
    responses: {
      /** @description Templates retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["EmailTemplateListResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Send WebSocket message to user */
  sendWebSocketToUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendWebSocketMessageRequest"];
      };
    };
    responses: {
      /** @description Message sent successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Broadcast WebSocket message */
  broadcastWebSocket: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BroadcastWebSocketRequest"];
      };
    };
    responses: {
      /** @description Message broadcast successfully */
      200: {
        content: {
          "application/json": components["schemas"]["BroadcastResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Get connected users */
  getConnectedUsers: {
    responses: {
      /** @description Connected users retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ConnectedUsersResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Check user connection status */
  getUserConnectionStatus: {
    parameters: {
      path: {
        /** @description User ID to check */
        userId: string;
      };
    };
    responses: {
      /** @description Status retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UserConnectionStatusResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** List alerts */
  listAlerts: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        /** @description Filter by alert type */
        type?: components["schemas"]["AlertType"];
        /** @description Filter by priority */
        priority?: components["schemas"]["AlertPriority"];
        /** @description Filter by acknowledgment status */
        acknowledged?: boolean;
      };
    };
    responses: {
      /** @description Alerts retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AlertListResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Create alert */
  createAlert: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAlertRequest"];
      };
    };
    responses: {
      /** @description Alert created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["AlertResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Acknowledge alert */
  acknowledgeAlert: {
    parameters: {
      path: {
        /** @description Alert ID */
        alertId: string;
      };
    };
    responses: {
      /** @description Alert acknowledged successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AlertResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
}
