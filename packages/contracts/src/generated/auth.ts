/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/register": {
    /**
     * Register a new user
     * @description Create a new user account with email and password
     */
    post: operations["register"];
  };
  "/auth/login": {
    /**
     * Login user
     * @description Authenticate user with email and password
     */
    post: operations["login"];
  };
  "/auth/refresh": {
    /**
     * Refresh access token
     * @description Get a new access token using refresh token
     */
    post: operations["refreshToken"];
  };
  "/auth/logout": {
    /**
     * Logout user
     * @description Invalidate current access token
     */
    post: operations["logout"];
  };
  "/auth/forgot-password": {
    /**
     * Request password reset
     * @description Send password reset email to user
     */
    post: operations["forgotPassword"];
  };
  "/auth/reset-password": {
    /**
     * Reset password
     * @description Reset user password with token
     */
    post: operations["resetPassword"];
  };
  "/auth/profile": {
    /**
     * Get user profile
     * @description Get current user profile information
     */
    get: operations["getProfile"];
    /**
     * Update user profile
     * @description Update current user profile information
     */
    put: operations["updateProfile"];
  };
  "/auth/users": {
    /**
     * List all users
     * @description Get list of all users (admin only)
     */
    get: operations["listUsers"];
  };
  "/auth/users/{userId}": {
    /**
     * Delete user
     * @description Delete a user account (admin only)
     */
    delete: operations["deleteUser"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    RegisterRequest: {
      /**
       * Format: email
       * @description User email address
       */
      email: string;
      /**
       * Format: password
       * @description User password (min 8 characters)
       */
      password: string;
      /** @description User first name */
      firstName?: string;
      /** @description User last name */
      lastName?: string;
    };
    LoginRequest: {
      /**
       * Format: email
       * @description User email address
       */
      email: string;
      /**
       * Format: password
       * @description User password
       */
      password: string;
    };
    RefreshTokenRequest: {
      /** @description JWT refresh token */
      refreshToken: string;
    };
    ForgotPasswordRequest: {
      /**
       * Format: email
       * @description User email address
       */
      email: string;
    };
    ResetPasswordRequest: {
      /** @description Password reset token */
      token: string;
      /**
       * Format: password
       * @description New password (min 8 characters)
       */
      password: string;
    };
    UpdateProfileRequest: {
      /** @description User first name */
      firstName?: string;
      /** @description User last name */
      lastName?: string;
      /**
       * Format: email
       * @description User email address
       */
      email?: string;
    };
    AuthResponse: {
      /** @description Operation success status */
      success: boolean;
      data: {
        user: components["schemas"]["UserProfile"];
        /** @description JWT access token */
        accessToken: string;
        /** @description JWT refresh token */
        refreshToken: string;
        /** @description Token expiration time in seconds */
        expiresIn?: number;
      };
    };
    UserProfile: {
      /** @description User unique identifier */
      id: string;
      /**
       * Format: email
       * @description User email address
       */
      email: string;
      /** @description User first name */
      firstName?: string;
      /** @description User last name */
      lastName?: string;
      role: components["schemas"]["UserRole"];
      /** @description User active status */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Account creation timestamp
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt?: string;
    };
    /**
     * @description User role for authorization
     * @enum {string}
     */
    UserRole: "ADMIN" | "USER";
    UserListResponse: {
      success: boolean;
      data: components["schemas"]["UserProfile"][];
      pagination: components["schemas"]["PaginationMeta"];
    };
    PaginationMeta: {
      /** @description Current page number */
      page: number;
      /** @description Items per page */
      limit: number;
      /** @description Total number of items */
      total: number;
      /** @description Total number of pages */
      totalPages: number;
    };
    MessageResponse: {
      success: boolean;
      /** @description Response message */
      message: string;
    };
    ErrorResponse: {
      /** @default false */
      success: boolean;
      error: {
        /** @description Error code */
        code: string;
        /** @description Error message */
        message: string;
        /** @description Additional error details */
        details?: {
          [key: string]: unknown;
        };
      };
    };
  };
  responses: {
    /** @description Bad request - Invalid input data */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Unauthorized - Invalid or missing authentication */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Forbidden - Insufficient permissions */
    Forbidden: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Not found - Resource does not exist */
    NotFound: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Too many requests - Rate limit exceeded */
    TooManyRequests: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: {
    /** @description Page number for pagination */
    PageParam?: number;
    /** @description Number of items per page */
    LimitParam?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Register a new user
   * @description Create a new user account with email and password
   */
  register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterRequest"];
      };
    };
    responses: {
      /** @description User registered successfully */
      201: {
        content: {
          "application/json": components["schemas"]["AuthResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      /** @description User already exists */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Login user
   * @description Authenticate user with email and password
   */
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description Login successful */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      429: components["responses"]["TooManyRequests"];
    };
  };
  /**
   * Refresh access token
   * @description Get a new access token using refresh token
   */
  refreshToken: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshTokenRequest"];
      };
    };
    responses: {
      /** @description Token refreshed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Logout user
   * @description Invalidate current access token
   */
  logout: {
    responses: {
      /** @description Logout successful */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Request password reset
   * @description Send password reset email to user
   */
  forgotPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForgotPasswordRequest"];
      };
    };
    responses: {
      /** @description Password reset email sent */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      429: components["responses"]["TooManyRequests"];
    };
  };
  /**
   * Reset password
   * @description Reset user password with token
   */
  resetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordRequest"];
      };
    };
    responses: {
      /** @description Password reset successful */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      /** @description Invalid or expired token */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get user profile
   * @description Get current user profile information
   */
  getProfile: {
    responses: {
      /** @description Profile retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UserProfile"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Update user profile
   * @description Update current user profile information
   */
  updateProfile: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProfileRequest"];
      };
    };
    responses: {
      /** @description Profile updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UserProfile"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * List all users
   * @description Get list of all users (admin only)
   */
  listUsers: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        /** @description Filter by user role */
        role?: components["schemas"]["UserRole"];
        /** @description Filter by active status */
        isActive?: boolean;
      };
    };
    responses: {
      /** @description Users retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["UserListResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  /**
   * Delete user
   * @description Delete a user account (admin only)
   */
  deleteUser: {
    parameters: {
      path: {
        /** @description User ID to delete */
        userId: string;
      };
    };
    responses: {
      /** @description User deleted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
    };
  };
}
