/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/trading/strategies": {
    /** List trading strategies */
    get: operations["listStrategies"];
    /** Create trading strategy */
    post: operations["createStrategy"];
  };
  "/trading/strategies/{strategyId}": {
    /** Get strategy details */
    get: operations["getStrategy"];
    /** Update strategy */
    put: operations["updateStrategy"];
    /** Delete strategy */
    delete: operations["deleteStrategy"];
  };
  "/trading/strategies/{strategyId}/activate": {
    /** Activate strategy */
    post: operations["activateStrategy"];
  };
  "/trading/strategies/{strategyId}/deactivate": {
    /** Deactivate strategy */
    post: operations["deactivateStrategy"];
  };
  "/trading/positions": {
    /** Get active positions */
    get: operations["getPositions"];
  };
  "/trading/execute": {
    /** Execute trade */
    post: operations["executeTrade"];
  };
  "/trading/balance": {
    /** Get account balance */
    get: operations["getBalance"];
  };
  "/trading/market-data": {
    /** Get market data */
    get: operations["getMarketData"];
  };
  "/arbitrage/deploy": {
    /** Deploy arbitrage bot */
    post: operations["deployArbitrage"];
  };
  "/arbitrage/status": {
    /** Get arbitrage bot status */
    get: operations["getArbitrageStatus"];
  };
  "/arbitrage/stop": {
    /** Stop arbitrage bot */
    post: operations["stopArbitrage"];
  };
  "/trading/backtest": {
    /** Run strategy backtest */
    post: operations["runBacktest"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    TradingStrategy: {
      id: string;
      name: string;
      description?: string;
      /** @enum {string} */
      type: "scalping" | "swing" | "arbitrage" | "dca" | "grid";
      parameters?: {
        [key: string]: unknown;
      };
      isActive: boolean;
      performance?: components["schemas"]["StrategyPerformance"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    StrategyPerformance: {
      totalTrades?: number;
      winRate?: number;
      profitLoss?: number;
      sharpeRatio?: number;
    };
    CreateStrategyRequest: {
      name: string;
      description?: string;
      /** @enum {string} */
      type: "scalping" | "swing" | "arbitrage" | "dca" | "grid";
      parameters: {
        [key: string]: unknown;
      };
    };
    UpdateStrategyRequest: {
      name?: string;
      description?: string;
      parameters?: {
        [key: string]: unknown;
      };
    };
    Position: {
      id: string;
      symbol: string;
      /** @enum {string} */
      side: "long" | "short";
      quantity: number;
      entryPrice: number;
      currentPrice?: number;
      unrealizedPnl?: number;
      exchange?: string;
    };
    ExecuteTradeRequest: {
      symbol: string;
      /** @enum {string} */
      side: "buy" | "sell";
      quantity: number;
      /** @enum {string} */
      type: "market" | "limit";
      /** @description Required for limit orders */
      price?: number;
      /** @enum {string} */
      exchange?: "binance" | "coinbase" | "alpaca";
    };
    Trade: {
      id: string;
      symbol: string;
      /** @enum {string} */
      side: "buy" | "sell";
      quantity: number;
      price: number;
      fee?: number;
      exchange?: string;
      /** Format: date-time */
      timestamp: string;
    };
    MarketData: {
      symbol?: string;
      bid?: number;
      ask?: number;
      last?: number;
      volume24h?: number;
      change24h?: number;
      /** Format: date-time */
      timestamp?: string;
    };
    Balance: {
      currency?: string;
      available?: number;
      locked?: number;
      total?: number;
    };
    DeployArbitrageRequest: {
      /** @default 0.005 */
      minSpread?: number;
      /** @default 1000 */
      maxPositionSize?: number;
      exchanges?: ("binance" | "coinbase")[];
    };
    ArbitrageStatus: {
      isRunning?: boolean;
      /** Format: date-time */
      startedAt?: string;
      totalTrades?: number;
      totalProfit?: number;
      currentOpportunities?: components["schemas"]["ArbitrageOpportunity"][];
    };
    ArbitrageOpportunity: {
      symbol?: string;
      buyExchange?: string;
      sellExchange?: string;
      spread?: number;
      estimatedProfit?: number;
    };
    BacktestRequest: {
      strategyId: string;
      /** Format: date */
      startDate: string;
      /** Format: date */
      endDate: string;
      /** @default 10000 */
      initialCapital?: number;
    };
    BacktestResult: {
      totalReturn?: number;
      sharpeRatio?: number;
      maxDrawdown?: number;
      winRate?: number;
      totalTrades?: number;
      trades?: components["schemas"]["Trade"][];
    };
    StrategyResponse: {
      success: boolean;
      data: components["schemas"]["TradingStrategy"];
    };
    StrategyListResponse: {
      success: boolean;
      data: components["schemas"]["TradingStrategy"][];
      pagination: components["schemas"]["PaginationMeta"];
    };
    PositionListResponse: {
      success: boolean;
      data: components["schemas"]["Position"][];
    };
    TradeResponse: {
      success: boolean;
      data: components["schemas"]["Trade"];
    };
    BalanceResponse: {
      success: boolean;
      data: components["schemas"]["Balance"][];
    };
    MarketDataResponse: {
      success: boolean;
      data: components["schemas"]["MarketData"];
    };
    ArbitrageStatusResponse: {
      success: boolean;
      data: components["schemas"]["ArbitrageStatus"];
    };
    BacktestResponse: {
      success: boolean;
      data: components["schemas"]["BacktestResult"];
    };
    MessageResponse: {
      success: boolean;
      message: string;
    };
    PaginationMeta: {
      page: number;
      limit: number;
      total: number;
      totalPages: number;
    };
    ErrorResponse: {
      /** @default false */
      success: boolean;
      error: {
        code: string;
        message: string;
        details?: {
          [key: string]: unknown;
        };
      };
    };
  };
  responses: {
    /** @description Bad request */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Unauthorized */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Not found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: {
    /** @description Page number */
    PageParam?: number;
    /** @description Items per page */
    LimitParam?: number;
    /** @description Strategy identifier */
    StrategyIdParam: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** List trading strategies */
  listStrategies: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        /** @description Filter by active status */
        active?: boolean;
      };
    };
    responses: {
      /** @description Strategies retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["StrategyListResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Create trading strategy */
  createStrategy: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateStrategyRequest"];
      };
    };
    responses: {
      /** @description Strategy created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["StrategyResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Get strategy details */
  getStrategy: {
    parameters: {
      path: {
        strategyId: components["parameters"]["StrategyIdParam"];
      };
    };
    responses: {
      /** @description Strategy retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["StrategyResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Update strategy */
  updateStrategy: {
    parameters: {
      path: {
        strategyId: components["parameters"]["StrategyIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateStrategyRequest"];
      };
    };
    responses: {
      /** @description Strategy updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["StrategyResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Delete strategy */
  deleteStrategy: {
    parameters: {
      path: {
        strategyId: components["parameters"]["StrategyIdParam"];
      };
    };
    responses: {
      /** @description Strategy deleted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Activate strategy */
  activateStrategy: {
    parameters: {
      path: {
        strategyId: components["parameters"]["StrategyIdParam"];
      };
    };
    responses: {
      /** @description Strategy activated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["StrategyResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Deactivate strategy */
  deactivateStrategy: {
    parameters: {
      path: {
        strategyId: components["parameters"]["StrategyIdParam"];
      };
    };
    responses: {
      /** @description Strategy deactivated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["StrategyResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get active positions */
  getPositions: {
    parameters: {
      query?: {
        /** @description Filter by exchange */
        exchange?: "binance" | "coinbase" | "alpaca";
      };
    };
    responses: {
      /** @description Positions retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["PositionListResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Execute trade */
  executeTrade: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExecuteTradeRequest"];
      };
    };
    responses: {
      /** @description Trade executed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["TradeResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Get account balance */
  getBalance: {
    parameters: {
      query?: {
        /** @description Exchange to get balance from */
        exchange?: "binance" | "coinbase" | "alpaca";
      };
    };
    responses: {
      /** @description Balance retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["BalanceResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Get market data */
  getMarketData: {
    parameters: {
      query: {
        /** @description Trading symbol (e.g., BTC/USDT) */
        symbol: string;
        exchange?: "binance" | "coinbase" | "alpaca";
      };
    };
    responses: {
      /** @description Market data retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MarketDataResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Deploy arbitrage bot */
  deployArbitrage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeployArbitrageRequest"];
      };
    };
    responses: {
      /** @description Arbitrage bot deployed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ArbitrageStatusResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Get arbitrage bot status */
  getArbitrageStatus: {
    responses: {
      /** @description Status retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ArbitrageStatusResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Stop arbitrage bot */
  stopArbitrage: {
    responses: {
      /** @description Arbitrage bot stopped successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** Run strategy backtest */
  runBacktest: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BacktestRequest"];
      };
    };
    responses: {
      /** @description Backtest completed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["BacktestResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
}
