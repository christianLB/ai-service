import { promises as fs } from 'node:fs';
import path from 'node:path';
import { execFile } from 'node:child_process';
import { promisify } from 'node:util';
const execFileAsync = promisify(execFile);

async function main() {
  const repoRoot = path.resolve(__dirname, '../../..');
  const openapiDir = path.join(repoRoot, 'openapi');
  const outDir = path.join(__dirname, 'generated');

  await fs.mkdir(outDir, { recursive: true });

  const entries = await fs.readdir(openapiDir, { withFileTypes: true }).catch(() => []);
  const specs = entries
    .filter((e) => e.isFile())
    .map((e) => e.name)
    .filter((n) => /\.(ya?ml|json)$/i.test(n));

  if (specs.length === 0) {
    console.warn(`No OpenAPI specs found in ${openapiDir}`);
  }

  const generated: string[] = [];

  // Resolve CLI entry for openapi-typescript within workspace root
  const pkgJsonPath = require.resolve('openapi-typescript/package.json', { paths: [repoRoot] });
  const pkgDir = path.dirname(pkgJsonPath);
  const pkgJson = JSON.parse(await fs.readFile(pkgJsonPath, 'utf8')) as { bin?: Record<string, string> };
  const binRel = pkgJson.bin?.['openapi-typescript'] || 'bin/cli.mjs';
  const cli = path.join(pkgDir, binRel);

  for (const file of specs) {
    const base = path.basename(file).replace(/\.(ya?ml|json)$/i, '');
    const specPath = path.join(openapiDir, file);
    const outFile = path.join(outDir, `${base}.ts`);

    // Run CLI to generate types directly to file
    await execFileAsync(process.execPath, [cli, specPath, '--output', outFile], {
      cwd: repoRoot,
      env: process.env,
    });

    // Prepend header (read+rewrite for simplicity)
    const current = await fs.readFile(outFile, 'utf8');
    await fs.writeFile(outFile, `// AUTO-GENERATED by @ai/contracts. Do not edit.\n${current}`, 'utf8');

    generated.push(base);
    console.log(`Generated types for ${file} -> ${path.relative(repoRoot, outFile)}`);
  }

  // Create a barrel that re-exports types and exposes a typed client factory
  const indexLines: string[] = [];
  indexLines.push(`import createClient from 'openapi-fetch';`);
  indexLines.push(`export { createClient };`);
  for (const base of generated) {
    const typeName = `${pascal(base)}Paths`;
    indexLines.push(`import type { paths as ${typeName} } from './generated/${base}';`);
    indexLines.push(`export type { paths as ${typeName} } from './generated/${base}';`);
    indexLines.push(`export const create${pascal(base)}Client = (baseUrl: string) => createClient<${typeName}>({ baseUrl });`);
  }
  indexLines.push('');
  const indexPath = path.join(__dirname, 'index.ts');
  await fs.writeFile(indexPath, indexLines.join('\n'), 'utf8');
  console.log(`Wrote barrel: ${path.relative(repoRoot, indexPath)}`);
}

function pascal(input: string): string {
  return input
    .replace(/[^a-zA-Z0-9]+/g, ' ')
    .split(' ')
    .filter(Boolean)
    .map((s) => s[0].toUpperCase() + s.slice(1))
    .join('');
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
