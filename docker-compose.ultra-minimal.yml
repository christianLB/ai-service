version: "3.8"

networks:
  ai-service-network:
    driver: bridge

services:
  # PostgreSQL b√°sico (SABEMOS QUE FUNCIONA)
  postgres:
    image: postgres:15-alpine
    container_name: ai-service-db
    environment:
      POSTGRES_DB: ai_service
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - /volume1/docker/ai-service/postgres:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - ai-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis SIN HEALTH CHECK (posible problema)
  redis:
    image: redis:7-alpine
    container_name: ai-service-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - /volume1/docker/ai-service/redis:/data
    ports:
      - "6380:6379"
    networks:
      - ai-service-network
    restart: unless-stopped
    # SIN HEALTH CHECK

  # AI Service COMPLETO (como step 3 que funciona)
  ai-service:
    image: k2600x/ai-service:latest
    container_name: ai-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ai_service
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=info
      # Telegram completo
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      - TELEGRAM_ALERTS_ENABLED=true
      # APIs opcionales
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-}
      # GoCardless Financial
      - GO_SECRET_ID=${GO_SECRET_ID}
      - GO_SECRET_KEY=${GO_SECRET_KEY}
      - GO_REDIRECT_URI=${GO_REDIRECT_URI}
      - DASHBOARD_URL=${DASHBOARD_URL}
    ports:
      - "3003:3000"
    volumes:
      - /volume1/docker/ai-service/logs:/app/logs
      - /volume1/docker/ai-service/workflows:/app/data/workflows
      - /volume1/docker/ai-service/documents:/app/data/documents
      - /volume1/docker/ai-service/knowledge:/app/data/knowledge
    networks:
      - ai-service-network
    depends_on:
      postgres:
        condition: service_healthy
      # SIN DEPENDENCIA DE REDIS HEALTH CHECK
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3